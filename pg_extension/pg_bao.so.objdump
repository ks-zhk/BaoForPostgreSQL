
pg_bao.so：     文件格式 elf64-x86-64


Disassembly of section .init:

0000000000002000 <_init>:
    2000:	f3 0f 1e fa          	endbr64 
    2004:	48 83 ec 08          	sub    $0x8,%rsp
    2008:	48 8b 05 b9 7f 00 00 	mov    0x7fb9(%rip),%rax        # 9fc8 <__gmon_start__@Base>
    200f:	48 85 c0             	test   %rax,%rax
    2012:	74 02                	je     2016 <_init+0x16>
    2014:	ff d0                	call   *%rax
    2016:	48 83 c4 08          	add    $0x8,%rsp
    201a:	c3                   	ret    

Disassembly of section .plt:

0000000000002020 <.plt>:
    2020:	ff 35 e2 7f 00 00    	push   0x7fe2(%rip)        # a008 <_GLOBAL_OFFSET_TABLE_+0x8>
    2026:	f2 ff 25 e3 7f 00 00 	bnd jmp *0x7fe3(%rip)        # a010 <_GLOBAL_OFFSET_TABLE_+0x10>
    202d:	0f 1f 00             	nopl   (%rax)
    2030:	f3 0f 1e fa          	endbr64 
    2034:	68 00 00 00 00       	push   $0x0
    2039:	f2 e9 e1 ff ff ff    	bnd jmp 2020 <_init+0x20>
    203f:	90                   	nop
    2040:	f3 0f 1e fa          	endbr64 
    2044:	68 01 00 00 00       	push   $0x1
    2049:	f2 e9 d1 ff ff ff    	bnd jmp 2020 <_init+0x20>
    204f:	90                   	nop
    2050:	f3 0f 1e fa          	endbr64 
    2054:	68 02 00 00 00       	push   $0x2
    2059:	f2 e9 c1 ff ff ff    	bnd jmp 2020 <_init+0x20>
    205f:	90                   	nop
    2060:	f3 0f 1e fa          	endbr64 
    2064:	68 03 00 00 00       	push   $0x3
    2069:	f2 e9 b1 ff ff ff    	bnd jmp 2020 <_init+0x20>
    206f:	90                   	nop
    2070:	f3 0f 1e fa          	endbr64 
    2074:	68 04 00 00 00       	push   $0x4
    2079:	f2 e9 a1 ff ff ff    	bnd jmp 2020 <_init+0x20>
    207f:	90                   	nop
    2080:	f3 0f 1e fa          	endbr64 
    2084:	68 05 00 00 00       	push   $0x5
    2089:	f2 e9 91 ff ff ff    	bnd jmp 2020 <_init+0x20>
    208f:	90                   	nop
    2090:	f3 0f 1e fa          	endbr64 
    2094:	68 06 00 00 00       	push   $0x6
    2099:	f2 e9 81 ff ff ff    	bnd jmp 2020 <_init+0x20>
    209f:	90                   	nop
    20a0:	f3 0f 1e fa          	endbr64 
    20a4:	68 07 00 00 00       	push   $0x7
    20a9:	f2 e9 71 ff ff ff    	bnd jmp 2020 <_init+0x20>
    20af:	90                   	nop
    20b0:	f3 0f 1e fa          	endbr64 
    20b4:	68 08 00 00 00       	push   $0x8
    20b9:	f2 e9 61 ff ff ff    	bnd jmp 2020 <_init+0x20>
    20bf:	90                   	nop
    20c0:	f3 0f 1e fa          	endbr64 
    20c4:	68 09 00 00 00       	push   $0x9
    20c9:	f2 e9 51 ff ff ff    	bnd jmp 2020 <_init+0x20>
    20cf:	90                   	nop
    20d0:	f3 0f 1e fa          	endbr64 
    20d4:	68 0a 00 00 00       	push   $0xa
    20d9:	f2 e9 41 ff ff ff    	bnd jmp 2020 <_init+0x20>
    20df:	90                   	nop
    20e0:	f3 0f 1e fa          	endbr64 
    20e4:	68 0b 00 00 00       	push   $0xb
    20e9:	f2 e9 31 ff ff ff    	bnd jmp 2020 <_init+0x20>
    20ef:	90                   	nop
    20f0:	f3 0f 1e fa          	endbr64 
    20f4:	68 0c 00 00 00       	push   $0xc
    20f9:	f2 e9 21 ff ff ff    	bnd jmp 2020 <_init+0x20>
    20ff:	90                   	nop
    2100:	f3 0f 1e fa          	endbr64 
    2104:	68 0d 00 00 00       	push   $0xd
    2109:	f2 e9 11 ff ff ff    	bnd jmp 2020 <_init+0x20>
    210f:	90                   	nop
    2110:	f3 0f 1e fa          	endbr64 
    2114:	68 0e 00 00 00       	push   $0xe
    2119:	f2 e9 01 ff ff ff    	bnd jmp 2020 <_init+0x20>
    211f:	90                   	nop
    2120:	f3 0f 1e fa          	endbr64 
    2124:	68 0f 00 00 00       	push   $0xf
    2129:	f2 e9 f1 fe ff ff    	bnd jmp 2020 <_init+0x20>
    212f:	90                   	nop
    2130:	f3 0f 1e fa          	endbr64 
    2134:	68 10 00 00 00       	push   $0x10
    2139:	f2 e9 e1 fe ff ff    	bnd jmp 2020 <_init+0x20>
    213f:	90                   	nop
    2140:	f3 0f 1e fa          	endbr64 
    2144:	68 11 00 00 00       	push   $0x11
    2149:	f2 e9 d1 fe ff ff    	bnd jmp 2020 <_init+0x20>
    214f:	90                   	nop
    2150:	f3 0f 1e fa          	endbr64 
    2154:	68 12 00 00 00       	push   $0x12
    2159:	f2 e9 c1 fe ff ff    	bnd jmp 2020 <_init+0x20>
    215f:	90                   	nop
    2160:	f3 0f 1e fa          	endbr64 
    2164:	68 13 00 00 00       	push   $0x13
    2169:	f2 e9 b1 fe ff ff    	bnd jmp 2020 <_init+0x20>
    216f:	90                   	nop
    2170:	f3 0f 1e fa          	endbr64 
    2174:	68 14 00 00 00       	push   $0x14
    2179:	f2 e9 a1 fe ff ff    	bnd jmp 2020 <_init+0x20>
    217f:	90                   	nop
    2180:	f3 0f 1e fa          	endbr64 
    2184:	68 15 00 00 00       	push   $0x15
    2189:	f2 e9 91 fe ff ff    	bnd jmp 2020 <_init+0x20>
    218f:	90                   	nop
    2190:	f3 0f 1e fa          	endbr64 
    2194:	68 16 00 00 00       	push   $0x16
    2199:	f2 e9 81 fe ff ff    	bnd jmp 2020 <_init+0x20>
    219f:	90                   	nop
    21a0:	f3 0f 1e fa          	endbr64 
    21a4:	68 17 00 00 00       	push   $0x17
    21a9:	f2 e9 71 fe ff ff    	bnd jmp 2020 <_init+0x20>
    21af:	90                   	nop
    21b0:	f3 0f 1e fa          	endbr64 
    21b4:	68 18 00 00 00       	push   $0x18
    21b9:	f2 e9 61 fe ff ff    	bnd jmp 2020 <_init+0x20>
    21bf:	90                   	nop
    21c0:	f3 0f 1e fa          	endbr64 
    21c4:	68 19 00 00 00       	push   $0x19
    21c9:	f2 e9 51 fe ff ff    	bnd jmp 2020 <_init+0x20>
    21cf:	90                   	nop
    21d0:	f3 0f 1e fa          	endbr64 
    21d4:	68 1a 00 00 00       	push   $0x1a
    21d9:	f2 e9 41 fe ff ff    	bnd jmp 2020 <_init+0x20>
    21df:	90                   	nop
    21e0:	f3 0f 1e fa          	endbr64 
    21e4:	68 1b 00 00 00       	push   $0x1b
    21e9:	f2 e9 31 fe ff ff    	bnd jmp 2020 <_init+0x20>
    21ef:	90                   	nop
    21f0:	f3 0f 1e fa          	endbr64 
    21f4:	68 1c 00 00 00       	push   $0x1c
    21f9:	f2 e9 21 fe ff ff    	bnd jmp 2020 <_init+0x20>
    21ff:	90                   	nop
    2200:	f3 0f 1e fa          	endbr64 
    2204:	68 1d 00 00 00       	push   $0x1d
    2209:	f2 e9 11 fe ff ff    	bnd jmp 2020 <_init+0x20>
    220f:	90                   	nop
    2210:	f3 0f 1e fa          	endbr64 
    2214:	68 1e 00 00 00       	push   $0x1e
    2219:	f2 e9 01 fe ff ff    	bnd jmp 2020 <_init+0x20>
    221f:	90                   	nop
    2220:	f3 0f 1e fa          	endbr64 
    2224:	68 1f 00 00 00       	push   $0x1f
    2229:	f2 e9 f1 fd ff ff    	bnd jmp 2020 <_init+0x20>
    222f:	90                   	nop
    2230:	f3 0f 1e fa          	endbr64 
    2234:	68 20 00 00 00       	push   $0x20
    2239:	f2 e9 e1 fd ff ff    	bnd jmp 2020 <_init+0x20>
    223f:	90                   	nop
    2240:	f3 0f 1e fa          	endbr64 
    2244:	68 21 00 00 00       	push   $0x21
    2249:	f2 e9 d1 fd ff ff    	bnd jmp 2020 <_init+0x20>
    224f:	90                   	nop
    2250:	f3 0f 1e fa          	endbr64 
    2254:	68 22 00 00 00       	push   $0x22
    2259:	f2 e9 c1 fd ff ff    	bnd jmp 2020 <_init+0x20>
    225f:	90                   	nop
    2260:	f3 0f 1e fa          	endbr64 
    2264:	68 23 00 00 00       	push   $0x23
    2269:	f2 e9 b1 fd ff ff    	bnd jmp 2020 <_init+0x20>
    226f:	90                   	nop
    2270:	f3 0f 1e fa          	endbr64 
    2274:	68 24 00 00 00       	push   $0x24
    2279:	f2 e9 a1 fd ff ff    	bnd jmp 2020 <_init+0x20>
    227f:	90                   	nop
    2280:	f3 0f 1e fa          	endbr64 
    2284:	68 25 00 00 00       	push   $0x25
    2289:	f2 e9 91 fd ff ff    	bnd jmp 2020 <_init+0x20>
    228f:	90                   	nop
    2290:	f3 0f 1e fa          	endbr64 
    2294:	68 26 00 00 00       	push   $0x26
    2299:	f2 e9 81 fd ff ff    	bnd jmp 2020 <_init+0x20>
    229f:	90                   	nop
    22a0:	f3 0f 1e fa          	endbr64 
    22a4:	68 27 00 00 00       	push   $0x27
    22a9:	f2 e9 71 fd ff ff    	bnd jmp 2020 <_init+0x20>
    22af:	90                   	nop
    22b0:	f3 0f 1e fa          	endbr64 
    22b4:	68 28 00 00 00       	push   $0x28
    22b9:	f2 e9 61 fd ff ff    	bnd jmp 2020 <_init+0x20>
    22bf:	90                   	nop
    22c0:	f3 0f 1e fa          	endbr64 
    22c4:	68 29 00 00 00       	push   $0x29
    22c9:	f2 e9 51 fd ff ff    	bnd jmp 2020 <_init+0x20>
    22cf:	90                   	nop
    22d0:	f3 0f 1e fa          	endbr64 
    22d4:	68 2a 00 00 00       	push   $0x2a
    22d9:	f2 e9 41 fd ff ff    	bnd jmp 2020 <_init+0x20>
    22df:	90                   	nop
    22e0:	f3 0f 1e fa          	endbr64 
    22e4:	68 2b 00 00 00       	push   $0x2b
    22e9:	f2 e9 31 fd ff ff    	bnd jmp 2020 <_init+0x20>
    22ef:	90                   	nop
    22f0:	f3 0f 1e fa          	endbr64 
    22f4:	68 2c 00 00 00       	push   $0x2c
    22f9:	f2 e9 21 fd ff ff    	bnd jmp 2020 <_init+0x20>
    22ff:	90                   	nop
    2300:	f3 0f 1e fa          	endbr64 
    2304:	68 2d 00 00 00       	push   $0x2d
    2309:	f2 e9 11 fd ff ff    	bnd jmp 2020 <_init+0x20>
    230f:	90                   	nop
    2310:	f3 0f 1e fa          	endbr64 
    2314:	68 2e 00 00 00       	push   $0x2e
    2319:	f2 e9 01 fd ff ff    	bnd jmp 2020 <_init+0x20>
    231f:	90                   	nop

Disassembly of section .plt.got:

0000000000002320 <__cxa_finalize@plt>:
    2320:	f3 0f 1e fa          	endbr64 
    2324:	f2 ff 25 cd 7c 00 00 	bnd jmp *0x7ccd(%rip)        # 9ff8 <__cxa_finalize@GLIBC_2.2.5>
    232b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

Disassembly of section .plt.sec:

0000000000002330 <ExplainOpenGroup@plt>:
    2330:	f3 0f 1e fa          	endbr64 
    2334:	f2 ff 25 dd 7c 00 00 	bnd jmp *0x7cdd(%rip)        # a018 <ExplainOpenGroup@Base>
    233b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000002340 <free@plt>:
    2340:	f3 0f 1e fa          	endbr64 
    2344:	f2 ff 25 d5 7c 00 00 	bnd jmp *0x7cd5(%rip)        # a020 <free@GLIBC_2.2.5>
    234b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000002350 <abort@plt>:
    2350:	f3 0f 1e fa          	endbr64 
    2354:	f2 ff 25 cd 7c 00 00 	bnd jmp *0x7ccd(%rip)        # a028 <abort@GLIBC_2.2.5>
    235b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000002360 <open_memstream@plt>:
    2360:	f3 0f 1e fa          	endbr64 
    2364:	f2 ff 25 c5 7c 00 00 	bnd jmp *0x7cc5(%rip)        # a030 <open_memstream@GLIBC_2.2.5>
    236b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000002370 <get_rel_name@plt>:
    2370:	f3 0f 1e fa          	endbr64 
    2374:	f2 ff 25 bd 7c 00 00 	bnd jmp *0x7cbd(%rip)        # a038 <get_rel_name@Base>
    237b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000002380 <strncmp@plt>:
    2380:	f3 0f 1e fa          	endbr64 
    2384:	f2 ff 25 b5 7c 00 00 	bnd jmp *0x7cb5(%rip)        # a040 <strncmp@GLIBC_2.2.5>
    238b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000002390 <pg_fprintf@plt>:
    2390:	f3 0f 1e fa          	endbr64 
    2394:	f2 ff 25 ad 7c 00 00 	bnd jmp *0x7cad(%rip)        # a048 <pg_fprintf@Base>
    239b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

00000000000023a0 <RelidByRelfilenumber@plt>:
    23a0:	f3 0f 1e fa          	endbr64 
    23a4:	f2 ff 25 a5 7c 00 00 	bnd jmp *0x7ca5(%rip)        # a050 <RelidByRelfilenumber@Base>
    23ab:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

00000000000023b0 <clock_gettime@plt>:
    23b0:	f3 0f 1e fa          	endbr64 
    23b4:	f2 ff 25 9d 7c 00 00 	bnd jmp *0x7c9d(%rip)        # a058 <clock_gettime@GLIBC_2.17>
    23bb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

00000000000023c0 <write@plt>:
    23c0:	f3 0f 1e fa          	endbr64 
    23c4:	f2 ff 25 95 7c 00 00 	bnd jmp *0x7c95(%rip)        # a060 <write@GLIBC_2.2.5>
    23cb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

00000000000023d0 <getpid@plt>:
    23d0:	f3 0f 1e fa          	endbr64 
    23d4:	f2 ff 25 8d 7c 00 00 	bnd jmp *0x7c8d(%rip)        # a068 <getpid@GLIBC_2.2.5>
    23db:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

00000000000023e0 <ExplainOnePlan@plt>:
    23e0:	f3 0f 1e fa          	endbr64 
    23e4:	f2 ff 25 85 7c 00 00 	bnd jmp *0x7c85(%rip)        # a070 <ExplainOnePlan@Base>
    23eb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

00000000000023f0 <clock@plt>:
    23f0:	f3 0f 1e fa          	endbr64 
    23f4:	f2 ff 25 7d 7c 00 00 	bnd jmp *0x7c7d(%rip)        # a078 <clock@GLIBC_2.2.5>
    23fb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000002400 <fclose@plt>:
    2400:	f3 0f 1e fa          	endbr64 
    2404:	f2 ff 25 75 7c 00 00 	bnd jmp *0x7c75(%rip)        # a080 <fclose@GLIBC_2.2.5>
    240b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000002410 <shutdown@plt>:
    2410:	f3 0f 1e fa          	endbr64 
    2414:	f2 ff 25 6d 7c 00 00 	bnd jmp *0x7c6d(%rip)        # a088 <shutdown@GLIBC_2.2.5>
    241b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000002420 <strlen@plt>:
    2420:	f3 0f 1e fa          	endbr64 
    2424:	f2 ff 25 65 7c 00 00 	bnd jmp *0x7c65(%rip)        # a090 <strlen@GLIBC_2.2.5>
    242b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000002430 <__stack_chk_fail@plt>:
    2430:	f3 0f 1e fa          	endbr64 
    2434:	f2 ff 25 5d 7c 00 00 	bnd jmp *0x7c5d(%rip)        # a098 <__stack_chk_fail@GLIBC_2.4>
    243b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000002440 <htons@plt>:
    2440:	f3 0f 1e fa          	endbr64 
    2444:	f2 ff 25 55 7c 00 00 	bnd jmp *0x7c55(%rip)        # a0a0 <htons@GLIBC_2.2.5>
    244b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000002450 <errmsg_internal@plt>:
    2450:	f3 0f 1e fa          	endbr64 
    2454:	f2 ff 25 4d 7c 00 00 	bnd jmp *0x7c4d(%rip)        # a0a8 <errmsg_internal@Base>
    245b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000002460 <memset@plt>:
    2460:	f3 0f 1e fa          	endbr64 
    2464:	f2 ff 25 45 7c 00 00 	bnd jmp *0x7c45(%rip)        # a0b0 <memset@GLIBC_2.2.5>
    246b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000002470 <DefineCustomIntVariable@plt>:
    2470:	f3 0f 1e fa          	endbr64 
    2474:	f2 ff 25 3d 7c 00 00 	bnd jmp *0x7c3d(%rip)        # a0b8 <DefineCustomIntVariable@Base>
    247b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000002480 <errstart@plt>:
    2480:	f3 0f 1e fa          	endbr64 
    2484:	f2 ff 25 35 7c 00 00 	bnd jmp *0x7c35(%rip)        # a0c0 <errstart@Base>
    248b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000002490 <ExplainCloseGroup@plt>:
    2490:	f3 0f 1e fa          	endbr64 
    2494:	f2 ff 25 2d 7c 00 00 	bnd jmp *0x7c2d(%rip)        # a0c8 <ExplainCloseGroup@Base>
    249b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

00000000000024a0 <read@plt>:
    24a0:	f3 0f 1e fa          	endbr64 
    24a4:	f2 ff 25 25 7c 00 00 	bnd jmp *0x7c25(%rip)        # a0d0 <read@GLIBC_2.2.5>
    24ab:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

00000000000024b0 <memcmp@plt>:
    24b0:	f3 0f 1e fa          	endbr64 
    24b4:	f2 ff 25 1d 7c 00 00 	bnd jmp *0x7c1d(%rip)        # a0d8 <memcmp@GLIBC_2.2.5>
    24bb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

00000000000024c0 <strcmp@plt>:
    24c0:	f3 0f 1e fa          	endbr64 
    24c4:	f2 ff 25 15 7c 00 00 	bnd jmp *0x7c15(%rip)        # a0e0 <strcmp@GLIBC_2.2.5>
    24cb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

00000000000024d0 <standard_ExecutorStart@plt>:
    24d0:	f3 0f 1e fa          	endbr64 
    24d4:	f2 ff 25 0d 7c 00 00 	bnd jmp *0x7c0d(%rip)        # a0e8 <standard_ExecutorStart@Base>
    24db:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

00000000000024e0 <inet_pton@plt>:
    24e0:	f3 0f 1e fa          	endbr64 
    24e4:	f2 ff 25 05 7c 00 00 	bnd jmp *0x7c05(%rip)        # a0f0 <inet_pton@GLIBC_2.2.5>
    24eb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

00000000000024f0 <ExplainPropertyFloat@plt>:
    24f0:	f3 0f 1e fa          	endbr64 
    24f4:	f2 ff 25 fd 7b 00 00 	bnd jmp *0x7bfd(%rip)        # a0f8 <ExplainPropertyFloat@Base>
    24fb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000002500 <get_namespace_name@plt>:
    2500:	f3 0f 1e fa          	endbr64 
    2504:	f2 ff 25 f5 7b 00 00 	bnd jmp *0x7bf5(%rip)        # a100 <get_namespace_name@Base>
    250b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000002510 <malloc@plt>:
    2510:	f3 0f 1e fa          	endbr64 
    2514:	f2 ff 25 ed 7b 00 00 	bnd jmp *0x7bed(%rip)        # a108 <malloc@GLIBC_2.2.5>
    251b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000002520 <copyObjectImpl@plt>:
    2520:	f3 0f 1e fa          	endbr64 
    2524:	f2 ff 25 e5 7b 00 00 	bnd jmp *0x7be5(%rip)        # a110 <copyObjectImpl@Base>
    252b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000002530 <standard_planner@plt>:
    2530:	f3 0f 1e fa          	endbr64 
    2534:	f2 ff 25 dd 7b 00 00 	bnd jmp *0x7bdd(%rip)        # a118 <standard_planner@Base>
    253b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000002540 <InstrEndLoop@plt>:
    2540:	f3 0f 1e fa          	endbr64 
    2544:	f2 ff 25 d5 7b 00 00 	bnd jmp *0x7bd5(%rip)        # a120 <InstrEndLoop@Base>
    254b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000002550 <InstrAlloc@plt>:
    2550:	f3 0f 1e fa          	endbr64 
    2554:	f2 ff 25 cd 7b 00 00 	bnd jmp *0x7bcd(%rip)        # a128 <InstrAlloc@Base>
    255b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000002560 <get_rel_namespace@plt>:
    2560:	f3 0f 1e fa          	endbr64 
    2564:	f2 ff 25 c5 7b 00 00 	bnd jmp *0x7bc5(%rip)        # a130 <get_rel_namespace@Base>
    256b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000002570 <errfinish@plt>:
    2570:	f3 0f 1e fa          	endbr64 
    2574:	f2 ff 25 bd 7b 00 00 	bnd jmp *0x7bbd(%rip)        # a138 <errfinish@Base>
    257b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000002580 <exit@plt>:
    2580:	f3 0f 1e fa          	endbr64 
    2584:	f2 ff 25 b5 7b 00 00 	bnd jmp *0x7bb5(%rip)        # a140 <exit@GLIBC_2.2.5>
    258b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000002590 <DefineCustomStringVariable@plt>:
    2590:	f3 0f 1e fa          	endbr64 
    2594:	f2 ff 25 ad 7b 00 00 	bnd jmp *0x7bad(%rip)        # a148 <DefineCustomStringVariable@Base>
    259b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

00000000000025a0 <connect@plt>:
    25a0:	f3 0f 1e fa          	endbr64 
    25a4:	f2 ff 25 a5 7b 00 00 	bnd jmp *0x7ba5(%rip)        # a150 <connect@GLIBC_2.2.5>
    25ab:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

00000000000025b0 <standard_ExecutorEnd@plt>:
    25b0:	f3 0f 1e fa          	endbr64 
    25b4:	f2 ff 25 9d 7b 00 00 	bnd jmp *0x7b9d(%rip)        # a158 <standard_ExecutorEnd@Base>
    25bb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

00000000000025c0 <ExceptionalCondition@plt>:
    25c0:	f3 0f 1e fa          	endbr64 
    25c4:	f2 ff 25 95 7b 00 00 	bnd jmp *0x7b95(%rip)        # a160 <ExceptionalCondition@Base>
    25cb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

00000000000025d0 <DefineCustomBoolVariable@plt>:
    25d0:	f3 0f 1e fa          	endbr64 
    25d4:	f2 ff 25 8d 7b 00 00 	bnd jmp *0x7b8d(%rip)        # a168 <DefineCustomBoolVariable@Base>
    25db:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

00000000000025e0 <BufferUsageAccumDiff@plt>:
    25e0:	f3 0f 1e fa          	endbr64 
    25e4:	f2 ff 25 85 7b 00 00 	bnd jmp *0x7b85(%rip)        # a170 <BufferUsageAccumDiff@Base>
    25eb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

00000000000025f0 <ExplainPropertyText@plt>:
    25f0:	f3 0f 1e fa          	endbr64 
    25f4:	f2 ff 25 7d 7b 00 00 	bnd jmp *0x7b7d(%rip)        # a178 <ExplainPropertyText@Base>
    25fb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000002600 <socket@plt>:
    2600:	f3 0f 1e fa          	endbr64 
    2604:	f2 ff 25 75 7b 00 00 	bnd jmp *0x7b75(%rip)        # a180 <socket@GLIBC_2.2.5>
    260b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000002610 <errstart_cold@plt>:
    2610:	f3 0f 1e fa          	endbr64 
    2614:	f2 ff 25 6d 7b 00 00 	bnd jmp *0x7b6d(%rip)        # a188 <errstart_cold@Base>
    261b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

Disassembly of section .text:

0000000000002620 <deregister_tm_clones>:
    2620:	48 8d 3d 99 7b 00 00 	lea    0x7b99(%rip),%rdi        # a1c0 <completed.0>
    2627:	48 8d 05 92 7b 00 00 	lea    0x7b92(%rip),%rax        # a1c0 <completed.0>
    262e:	48 39 f8             	cmp    %rdi,%rax
    2631:	74 15                	je     2648 <deregister_tm_clones+0x28>
    2633:	48 8b 05 46 79 00 00 	mov    0x7946(%rip),%rax        # 9f80 <_ITM_deregisterTMCloneTable@Base>
    263a:	48 85 c0             	test   %rax,%rax
    263d:	74 09                	je     2648 <deregister_tm_clones+0x28>
    263f:	ff e0                	jmp    *%rax
    2641:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
    2648:	c3                   	ret    
    2649:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

0000000000002650 <register_tm_clones>:
    2650:	48 8d 3d 69 7b 00 00 	lea    0x7b69(%rip),%rdi        # a1c0 <completed.0>
    2657:	48 8d 35 62 7b 00 00 	lea    0x7b62(%rip),%rsi        # a1c0 <completed.0>
    265e:	48 29 fe             	sub    %rdi,%rsi
    2661:	48 89 f0             	mov    %rsi,%rax
    2664:	48 c1 ee 3f          	shr    $0x3f,%rsi
    2668:	48 c1 f8 03          	sar    $0x3,%rax
    266c:	48 01 c6             	add    %rax,%rsi
    266f:	48 d1 fe             	sar    %rsi
    2672:	74 14                	je     2688 <register_tm_clones+0x38>
    2674:	48 8b 05 65 79 00 00 	mov    0x7965(%rip),%rax        # 9fe0 <_ITM_registerTMCloneTable@Base>
    267b:	48 85 c0             	test   %rax,%rax
    267e:	74 08                	je     2688 <register_tm_clones+0x38>
    2680:	ff e0                	jmp    *%rax
    2682:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
    2688:	c3                   	ret    
    2689:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

0000000000002690 <__do_global_dtors_aux>:
    2690:	f3 0f 1e fa          	endbr64 
    2694:	80 3d 25 7b 00 00 00 	cmpb   $0x0,0x7b25(%rip)        # a1c0 <completed.0>
    269b:	75 2b                	jne    26c8 <__do_global_dtors_aux+0x38>
    269d:	55                   	push   %rbp
    269e:	48 83 3d 52 79 00 00 	cmpq   $0x0,0x7952(%rip)        # 9ff8 <__cxa_finalize@GLIBC_2.2.5>
    26a5:	00 
    26a6:	48 89 e5             	mov    %rsp,%rbp
    26a9:	74 0c                	je     26b7 <__do_global_dtors_aux+0x27>
    26ab:	48 8b 3d de 7a 00 00 	mov    0x7ade(%rip),%rdi        # a190 <__dso_handle>
    26b2:	e8 69 fc ff ff       	call   2320 <__cxa_finalize@plt>
    26b7:	e8 64 ff ff ff       	call   2620 <deregister_tm_clones>
    26bc:	c6 05 fd 7a 00 00 01 	movb   $0x1,0x7afd(%rip)        # a1c0 <completed.0>
    26c3:	5d                   	pop    %rbp
    26c4:	c3                   	ret    
    26c5:	0f 1f 00             	nopl   (%rax)
    26c8:	c3                   	ret    
    26c9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

00000000000026d0 <frame_dummy>:
    26d0:	f3 0f 1e fa          	endbr64 
    26d4:	e9 77 ff ff ff       	jmp    2650 <register_tm_clones>

00000000000026d9 <MemoryContextSwitchTo>:
 */

#ifndef FRONTEND
static inline MemoryContext
MemoryContextSwitchTo(MemoryContext context)
{
    26d9:	55                   	push   %rbp
    26da:	48 89 e5             	mov    %rsp,%rbp
    26dd:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
	MemoryContext old = CurrentMemoryContext;
    26e1:	48 8b 05 a8 78 00 00 	mov    0x78a8(%rip),%rax        # 9f90 <CurrentMemoryContext@Base>
    26e8:	48 8b 00             	mov    (%rax),%rax
    26eb:	48 89 45 f8          	mov    %rax,-0x8(%rbp)

	CurrentMemoryContext = context;
    26ef:	48 8b 05 9a 78 00 00 	mov    0x789a(%rip),%rax        # 9f90 <CurrentMemoryContext@Base>
    26f6:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    26fa:	48 89 10             	mov    %rdx,(%rax)
	return old;
    26fd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
}
    2701:	5d                   	pop    %rbp
    2702:	c3                   	ret    

0000000000002703 <list_length>:
}

/* Fetch list's length */
static inline int
list_length(const List *l)
{
    2703:	55                   	push   %rbp
    2704:	48 89 e5             	mov    %rsp,%rbp
    2707:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	return l ? l->length : 0;
    270b:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
    2710:	74 09                	je     271b <list_length+0x18>
    2712:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    2716:	8b 40 04             	mov    0x4(%rax),%eax
    2719:	eb 05                	jmp    2720 <list_length+0x1d>
    271b:	b8 00 00 00 00       	mov    $0x0,%eax
}
    2720:	5d                   	pop    %rbp
    2721:	c3                   	ret    

0000000000002722 <list_nth_cell>:
 * Locate the n'th cell (counting from 0) of the list.
 * It is an assertion failure if there is no such cell.
 */
static inline ListCell *
list_nth_cell(const List *list, int n)
{
    2722:	55                   	push   %rbp
    2723:	48 89 e5             	mov    %rsp,%rbp
    2726:	48 83 ec 10          	sub    $0x10,%rsp
    272a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    272e:	89 75 f4             	mov    %esi,-0xc(%rbp)
	Assert(list != NIL);
    2731:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
    2736:	75 1e                	jne    2756 <list_nth_cell+0x34>
    2738:	ba 17 01 00 00       	mov    $0x117,%edx
    273d:	48 8d 05 bc 48 00 00 	lea    0x48bc(%rip),%rax        # 7000 <_fini+0xd04>
    2744:	48 89 c6             	mov    %rax,%rsi
    2747:	48 8d 05 06 49 00 00 	lea    0x4906(%rip),%rax        # 7054 <_fini+0xd58>
    274e:	48 89 c7             	mov    %rax,%rdi
    2751:	e8 6a fe ff ff       	call   25c0 <ExceptionalCondition@plt>
	Assert(n >= 0 && n < list->length);
    2756:	83 7d f4 00          	cmpl   $0x0,-0xc(%rbp)
    275a:	78 0c                	js     2768 <list_nth_cell+0x46>
    275c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    2760:	8b 40 04             	mov    0x4(%rax),%eax
    2763:	39 45 f4             	cmp    %eax,-0xc(%rbp)
    2766:	7c 1e                	jl     2786 <list_nth_cell+0x64>
    2768:	ba 18 01 00 00       	mov    $0x118,%edx
    276d:	48 8d 05 8c 48 00 00 	lea    0x488c(%rip),%rax        # 7000 <_fini+0xd04>
    2774:	48 89 c6             	mov    %rax,%rsi
    2777:	48 8d 05 e2 48 00 00 	lea    0x48e2(%rip),%rax        # 7060 <_fini+0xd64>
    277e:	48 89 c7             	mov    %rax,%rdi
    2781:	e8 3a fe ff ff       	call   25c0 <ExceptionalCondition@plt>
	return &list->elements[n];
    2786:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    278a:	48 8b 50 10          	mov    0x10(%rax),%rdx
    278e:	8b 45 f4             	mov    -0xc(%rbp),%eax
    2791:	48 98                	cltq   
    2793:	48 c1 e0 03          	shl    $0x3,%rax
    2797:	48 01 d0             	add    %rdx,%rax
}
    279a:	c9                   	leave  
    279b:	c3                   	ret    

000000000000279c <list_nth>:
 * Return the pointer value contained in the n'th element of the
 * specified list. (List elements begin at 0.)
 */
static inline void *
list_nth(const List *list, int n)
{
    279c:	55                   	push   %rbp
    279d:	48 89 e5             	mov    %rsp,%rbp
    27a0:	48 83 ec 10          	sub    $0x10,%rsp
    27a4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    27a8:	89 75 f4             	mov    %esi,-0xc(%rbp)
	Assert(IsA(list, List));
    27ab:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    27af:	8b 00                	mov    (%rax),%eax
    27b1:	83 f8 01             	cmp    $0x1,%eax
    27b4:	74 1e                	je     27d4 <list_nth+0x38>
    27b6:	ba 2d 01 00 00       	mov    $0x12d,%edx
    27bb:	48 8d 05 3e 48 00 00 	lea    0x483e(%rip),%rax        # 7000 <_fini+0xd04>
    27c2:	48 89 c6             	mov    %rax,%rsi
    27c5:	48 8d 05 af 48 00 00 	lea    0x48af(%rip),%rax        # 707b <_fini+0xd7f>
    27cc:	48 89 c7             	mov    %rax,%rdi
    27cf:	e8 ec fd ff ff       	call   25c0 <ExceptionalCondition@plt>
	return lfirst(list_nth_cell(list, n));
    27d4:	8b 55 f4             	mov    -0xc(%rbp),%edx
    27d7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    27db:	89 d6                	mov    %edx,%esi
    27dd:	48 89 c7             	mov    %rax,%rdi
    27e0:	e8 3d ff ff ff       	call   2722 <list_nth_cell>
    27e5:	48 8b 00             	mov    (%rax),%rax
}
    27e8:	c9                   	leave  
    27e9:	c3                   	ret    

00000000000027ea <pg_clock_gettime_ns>:
#endif

/* helper for INSTR_TIME_SET_CURRENT */
static inline instr_time
pg_clock_gettime_ns(void)
{
    27ea:	55                   	push   %rbp
    27eb:	48 89 e5             	mov    %rsp,%rbp
    27ee:	48 83 ec 30          	sub    $0x30,%rsp
    27f2:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    27f9:	00 00 
    27fb:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    27ff:	31 c0                	xor    %eax,%eax
	instr_time	now;
	struct timespec tmp;

	clock_gettime(PG_INSTR_CLOCK, &tmp);
    2801:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    2805:	48 89 c6             	mov    %rax,%rsi
    2808:	bf 01 00 00 00       	mov    $0x1,%edi
    280d:	e8 9e fb ff ff       	call   23b0 <clock_gettime@plt>
	now.ticks = tmp.tv_sec * NS_PER_S + tmp.tv_nsec;
    2812:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    2816:	48 69 d0 00 ca 9a 3b 	imul   $0x3b9aca00,%rax,%rdx
    281d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    2821:	48 01 d0             	add    %rdx,%rax
    2824:	48 89 45 d8          	mov    %rax,-0x28(%rbp)

	return now;
    2828:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
}
    282c:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
    2830:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
    2837:	00 00 
    2839:	74 05                	je     2840 <pg_clock_gettime_ns+0x56>
    283b:	e8 f0 fb ff ff       	call   2430 <__stack_chk_fail@plt>
    2840:	c9                   	leave  
    2841:	c3                   	ret    

0000000000002842 <free_bao_query_info>:
  // The arm index we used to generate this plan.
  unsigned int selection;
} BaoPlan;

// Free a BaoQueryInfo struct.
static void free_bao_query_info(BaoQueryInfo* info) {
    2842:	f3 0f 1e fa          	endbr64 
    2846:	55                   	push   %rbp
    2847:	48 89 e5             	mov    %rsp,%rbp
    284a:	48 83 ec 10          	sub    $0x10,%rsp
    284e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  if (!info) return;
    2852:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
    2857:	74 46                	je     289f <free_bao_query_info+0x5d>
  if (info->plan_json) free(info->plan_json);
    2859:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    285d:	48 8b 00             	mov    (%rax),%rax
    2860:	48 85 c0             	test   %rax,%rax
    2863:	74 0f                	je     2874 <free_bao_query_info+0x32>
    2865:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    2869:	48 8b 00             	mov    (%rax),%rax
    286c:	48 89 c7             	mov    %rax,%rdi
    286f:	e8 cc fa ff ff       	call   2340 <free@plt>
  if (info->buffer_json) free(info->buffer_json);
    2874:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    2878:	48 8b 40 08          	mov    0x8(%rax),%rax
    287c:	48 85 c0             	test   %rax,%rax
    287f:	74 10                	je     2891 <free_bao_query_info+0x4f>
    2881:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    2885:	48 8b 40 08          	mov    0x8(%rax),%rax
    2889:	48 89 c7             	mov    %rax,%rdi
    288c:	e8 af fa ff ff       	call   2340 <free@plt>
  free(info);
    2891:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    2895:	48 89 c7             	mov    %rax,%rdi
    2898:	e8 a3 fa ff ff       	call   2340 <free@plt>
    289d:	eb 01                	jmp    28a0 <free_bao_query_info+0x5e>
  if (!info) return;
    289f:	90                   	nop
}
    28a0:	c9                   	leave  
    28a1:	c3                   	ret    

00000000000028a2 <free_bao_plan>:

// Free a BaoPlan (including the contained BaoQueryInfo).
static void free_bao_plan(BaoPlan* plan) {
    28a2:	f3 0f 1e fa          	endbr64 
    28a6:	55                   	push   %rbp
    28a7:	48 89 e5             	mov    %rsp,%rbp
    28aa:	48 83 ec 10          	sub    $0x10,%rsp
    28ae:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  if (!plan) return;
    28b2:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
    28b7:	74 29                	je     28e2 <free_bao_plan+0x40>
  if (plan->query_info) free_bao_query_info(plan->query_info);
    28b9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    28bd:	48 8b 00             	mov    (%rax),%rax
    28c0:	48 85 c0             	test   %rax,%rax
    28c3:	74 0f                	je     28d4 <free_bao_plan+0x32>
    28c5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    28c9:	48 8b 00             	mov    (%rax),%rax
    28cc:	48 89 c7             	mov    %rax,%rdi
    28cf:	e8 6e ff ff ff       	call   2842 <free_bao_query_info>
  free(plan);
    28d4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    28d8:	48 89 c7             	mov    %rax,%rdi
    28db:	e8 60 fa ff ff       	call   2340 <free@plt>
    28e0:	eb 01                	jmp    28e3 <free_bao_plan+0x41>
  if (!plan) return;
    28e2:	90                   	nop
}
    28e3:	c9                   	leave  
    28e4:	c3                   	ret    

00000000000028e5 <should_report_reward>:

// Determine if we should report the reward of this query or not.
static bool should_report_reward(QueryDesc* queryDesc) {
    28e5:	f3 0f 1e fa          	endbr64 
    28e9:	55                   	push   %rbp
    28ea:	48 89 e5             	mov    %rsp,%rbp
    28ed:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  // before reporting a reward, check that:
  // (1) that the query ID is not zero (query ID is left as 0 for INSERT, UPDATE, etc.)
  // (2) that the query actually executed (e.g., was not an EXPLAIN).
  // (3) the the instrument_options is zero (e.g., was not an EXPLAIN ANALYZE)
  return (queryDesc->plannedstmt->queryId != 0
    28f1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    28f5:	48 8b 40 08          	mov    0x8(%rax),%rax
    28f9:	48 8b 40 08          	mov    0x8(%rax),%rax
          && queryDesc->already_executed
          && queryDesc->instrument_options == 0);
    28fd:	48 85 c0             	test   %rax,%rax
    2900:	74 1e                	je     2920 <should_report_reward+0x3b>
          && queryDesc->already_executed
    2902:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    2906:	0f b6 40 60          	movzbl 0x60(%rax),%eax
    290a:	84 c0                	test   %al,%al
    290c:	74 12                	je     2920 <should_report_reward+0x3b>
          && queryDesc->instrument_options == 0);
    290e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    2912:	8b 40 40             	mov    0x40(%rax),%eax
    2915:	85 c0                	test   %eax,%eax
    2917:	75 07                	jne    2920 <should_report_reward+0x3b>
    2919:	b8 01 00 00 00       	mov    $0x1,%eax
    291e:	eb 05                	jmp    2925 <should_report_reward+0x40>
    2920:	b8 00 00 00 00       	mov    $0x0,%eax
    2925:	83 e0 01             	and    $0x1,%eax
}
    2928:	5d                   	pop    %rbp
    2929:	c3                   	ret    

000000000000292a <should_bao_optimize>:

// Determine if we should optimize this query or not.
static bool should_bao_optimize(Query* parse) {
    292a:	f3 0f 1e fa          	endbr64 
    292e:	55                   	push   %rbp
    292f:	48 89 e5             	mov    %rsp,%rbp
    2932:	48 83 ec 20          	sub    $0x20,%rsp
    2936:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  Oid relid;
  char* namespace;

  // Don't try and optimize anything that isn't a SELECT query.
  if (parse->commandType != CMD_SELECT) return false; 
    293a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    293e:	8b 40 04             	mov    0x4(%rax),%eax
    2941:	83 f8 01             	cmp    $0x1,%eax
    2944:	74 0a                	je     2950 <should_bao_optimize+0x26>
    2946:	b8 00 00 00 00       	mov    $0x0,%eax
    294b:	e9 88 00 00 00       	jmp    29d8 <should_bao_optimize+0xae>

  // Iterate over all the relations in this query.
  for (int i = 0; i < list_length(parse->rtable); i++) {
    2950:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%rbp)
    2957:	eb 65                	jmp    29be <should_bao_optimize+0x94>
    relid = rt_fetch(i, parse->rtable)->relid;
    2959:	8b 45 f0             	mov    -0x10(%rbp),%eax
    295c:	8d 50 ff             	lea    -0x1(%rax),%edx
    295f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    2963:	48 8b 40 40          	mov    0x40(%rax),%rax
    2967:	89 d6                	mov    %edx,%esi
    2969:	48 89 c7             	mov    %rax,%rdi
    296c:	e8 2b fe ff ff       	call   279c <list_nth>
    2971:	8b 40 08             	mov    0x8(%rax),%eax
    2974:	89 45 f4             	mov    %eax,-0xc(%rbp)
    // A relid of zero seems to have a special meaning, and it causes
    // get_rel_namespace or get_namespace_name to crash. Relid of zero
    // doesn't seem to appear in "normal" queries though.
    if (!relid) return false;
    2977:	83 7d f4 00          	cmpl   $0x0,-0xc(%rbp)
    297b:	75 07                	jne    2984 <should_bao_optimize+0x5a>
    297d:	b8 00 00 00 00       	mov    $0x0,%eax
    2982:	eb 54                	jmp    29d8 <should_bao_optimize+0xae>

    // Ignore queries that involve the pg_catalog (internal data used by PostgreSQL).
    namespace = get_namespace_name(get_rel_namespace(relid));
    2984:	8b 45 f4             	mov    -0xc(%rbp),%eax
    2987:	89 c7                	mov    %eax,%edi
    2989:	e8 d2 fb ff ff       	call   2560 <get_rel_namespace@plt>
    298e:	89 c7                	mov    %eax,%edi
    2990:	e8 6b fb ff ff       	call   2500 <get_namespace_name@plt>
    2995:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    if (strcmp(namespace, "pg_catalog") == 0) return false;
    2999:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    299d:	48 8d 15 34 47 00 00 	lea    0x4734(%rip),%rdx        # 70d8 <_fini+0xddc>
    29a4:	48 89 d6             	mov    %rdx,%rsi
    29a7:	48 89 c7             	mov    %rax,%rdi
    29aa:	e8 11 fb ff ff       	call   24c0 <strcmp@plt>
    29af:	85 c0                	test   %eax,%eax
    29b1:	75 07                	jne    29ba <should_bao_optimize+0x90>
    29b3:	b8 00 00 00 00       	mov    $0x0,%eax
    29b8:	eb 1e                	jmp    29d8 <should_bao_optimize+0xae>
  for (int i = 0; i < list_length(parse->rtable); i++) {
    29ba:	83 45 f0 01          	addl   $0x1,-0x10(%rbp)
    29be:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    29c2:	48 8b 40 40          	mov    0x40(%rax),%rax
    29c6:	48 89 c7             	mov    %rax,%rdi
    29c9:	e8 35 fd ff ff       	call   2703 <list_length>
    29ce:	39 45 f0             	cmp    %eax,-0x10(%rbp)
    29d1:	7c 86                	jl     2959 <should_bao_optimize+0x2f>
  }

  return true;
    29d3:	b8 01 00 00 00       	mov    $0x1,%eax

}
    29d8:	c9                   	leave  
    29d9:	c3                   	ret    

00000000000029da <starts_with>:


// https://stackoverflow.com/a/4770992/1464282
static bool starts_with(const char *str, const char *pre) {
    29da:	f3 0f 1e fa          	endbr64 
    29de:	55                   	push   %rbp
    29df:	48 89 e5             	mov    %rsp,%rbp
    29e2:	48 83 ec 10          	sub    $0x10,%rsp
    29e6:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    29ea:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  return strncmp(pre, str, strlen(pre)) == 0;
    29ee:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    29f2:	48 89 c7             	mov    %rax,%rdi
    29f5:	e8 26 fa ff ff       	call   2420 <strlen@plt>
    29fa:	48 89 c2             	mov    %rax,%rdx
    29fd:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
    2a01:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    2a05:	48 89 ce             	mov    %rcx,%rsi
    2a08:	48 89 c7             	mov    %rax,%rdi
    2a0b:	e8 70 f9 ff ff       	call   2380 <strncmp@plt>
    2a10:	85 c0                	test   %eax,%eax
    2a12:	0f 94 c0             	sete   %al
}
    2a15:	c9                   	leave  
    2a16:	c3                   	ret    

0000000000002a17 <reward_json>:

// Create a JSON object containing the reward, suitable to send to the Bao
// server.
static char* reward_json(double reward) {
    2a17:	f3 0f 1e fa          	endbr64 
    2a1b:	55                   	push   %rbp
    2a1c:	48 89 e5             	mov    %rsp,%rbp
    2a1f:	48 83 ec 40          	sub    $0x40,%rsp
    2a23:	f2 0f 11 45 c8       	movsd  %xmm0,-0x38(%rbp)
    2a28:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    2a2f:	00 00 
    2a31:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    2a35:	31 c0                	xor    %eax,%eax
  char* buf;
  size_t json_size;
  FILE* stream;
  pid_t pid = getpid();
    2a37:	e8 94 f9 ff ff       	call   23d0 <getpid@plt>
    2a3c:	89 45 dc             	mov    %eax,-0x24(%rbp)
  
  stream = open_memstream(&buf, &json_size);
    2a3f:	48 8d 55 e8          	lea    -0x18(%rbp),%rdx
    2a43:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    2a47:	48 89 d6             	mov    %rdx,%rsi
    2a4a:	48 89 c7             	mov    %rax,%rdi
    2a4d:	e8 0e f9 ff ff       	call   2360 <open_memstream@plt>
    2a52:	48 89 45 f0          	mov    %rax,-0x10(%rbp)

  fprintf(stream, "{\"reward\": %f , \"pid\": %d }\n", reward, pid);
    2a56:	8b 55 dc             	mov    -0x24(%rbp),%edx
    2a59:	48 8b 4d c8          	mov    -0x38(%rbp),%rcx
    2a5d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    2a61:	66 48 0f 6e c1       	movq   %rcx,%xmm0
    2a66:	48 8d 0d 76 46 00 00 	lea    0x4676(%rip),%rcx        # 70e3 <_fini+0xde7>
    2a6d:	48 89 ce             	mov    %rcx,%rsi
    2a70:	48 89 c7             	mov    %rax,%rdi
    2a73:	b8 01 00 00 00       	mov    $0x1,%eax
    2a78:	e8 13 f9 ff ff       	call   2390 <pg_fprintf@plt>
  fclose(stream);
    2a7d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    2a81:	48 89 c7             	mov    %rax,%rdi
    2a84:	e8 77 f9 ff ff       	call   2400 <fclose@plt>

  return buf;
    2a89:	48 8b 45 e0          	mov    -0x20(%rbp),%rax

}
    2a8d:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
    2a91:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
    2a98:	00 00 
    2a9a:	74 05                	je     2aa1 <reward_json+0x8a>
    2a9c:	e8 8f f9 ff ff       	call   2430 <__stack_chk_fail@plt>
    2aa1:	c9                   	leave  
    2aa2:	c3                   	ret    

0000000000002aa3 <write_all_to_socket>:

// Write the entire string to the given socket.
static void write_all_to_socket(int conn_fd, const char* json) {
    2aa3:	f3 0f 1e fa          	endbr64 
    2aa7:	55                   	push   %rbp
    2aa8:	48 89 e5             	mov    %rsp,%rbp
    2aab:	48 83 ec 30          	sub    $0x30,%rsp
    2aaf:	89 7d dc             	mov    %edi,-0x24(%rbp)
    2ab2:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  size_t json_length;
  ssize_t written, written_total;
  json_length = strlen(json);
    2ab6:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    2aba:	48 89 c7             	mov    %rax,%rdi
    2abd:	e8 5e f9 ff ff       	call   2420 <strlen@plt>
    2ac2:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  written_total = 0;
    2ac6:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
    2acd:	00 
  
  while (written_total != json_length) {
    2ace:	eb 32                	jmp    2b02 <write_all_to_socket+0x5f>
    written = write(conn_fd,
    2ad0:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
    2ad4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    2ad8:	48 29 c8             	sub    %rcx,%rax
    2adb:	48 89 c2             	mov    %rax,%rdx
    2ade:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
                    json + written_total,
    2ae2:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    2ae6:	48 01 c1             	add    %rax,%rcx
    written = write(conn_fd,
    2ae9:	8b 45 dc             	mov    -0x24(%rbp),%eax
    2aec:	48 89 ce             	mov    %rcx,%rsi
    2aef:	89 c7                	mov    %eax,%edi
    2af1:	e8 ca f8 ff ff       	call   23c0 <write@plt>
    2af6:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
                    json_length - written_total);
    written_total += written;
    2afa:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    2afe:	48 01 45 e8          	add    %rax,-0x18(%rbp)
  while (written_total != json_length) {
    2b02:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    2b06:	48 39 45 e8          	cmp    %rax,-0x18(%rbp)
    2b0a:	75 c4                	jne    2ad0 <write_all_to_socket+0x2d>
  }
}
    2b0c:	90                   	nop
    2b0d:	90                   	nop
    2b0e:	c9                   	leave  
    2b0f:	c3                   	ret    

0000000000002b10 <connect_to_bao>:

// Connect to the Bao server.
static int connect_to_bao(const char* host, int port) {
    2b10:	f3 0f 1e fa          	endbr64 
    2b14:	55                   	push   %rbp
    2b15:	48 89 e5             	mov    %rsp,%rbp
    2b18:	48 83 ec 40          	sub    $0x40,%rsp
    2b1c:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
    2b20:	89 75 c4             	mov    %esi,-0x3c(%rbp)
    2b23:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    2b2a:	00 00 
    2b2c:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    2b30:	31 c0                	xor    %eax,%eax
  int ret, conn_fd;
  struct sockaddr_in server_addr = { 0 };
    2b32:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
    2b39:	00 
    2b3a:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
    2b41:	00 

  server_addr.sin_family = AF_INET;
    2b42:	66 c7 45 e0 02 00    	movw   $0x2,-0x20(%rbp)
  server_addr.sin_port = htons(port);
    2b48:	8b 45 c4             	mov    -0x3c(%rbp),%eax
    2b4b:	0f b7 c0             	movzwl %ax,%eax
    2b4e:	89 c7                	mov    %eax,%edi
    2b50:	e8 eb f8 ff ff       	call   2440 <htons@plt>
    2b55:	66 89 45 e2          	mov    %ax,-0x1e(%rbp)
  inet_pton(AF_INET, host, &server_addr.sin_addr);
    2b59:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    2b5d:	48 8d 50 04          	lea    0x4(%rax),%rdx
    2b61:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    2b65:	48 89 c6             	mov    %rax,%rsi
    2b68:	bf 02 00 00 00       	mov    $0x2,%edi
    2b6d:	e8 6e f9 ff ff       	call   24e0 <inet_pton@plt>
  conn_fd = socket(AF_INET, SOCK_STREAM, 0);
    2b72:	ba 00 00 00 00       	mov    $0x0,%edx
    2b77:	be 01 00 00 00       	mov    $0x1,%esi
    2b7c:	bf 02 00 00 00       	mov    $0x2,%edi
    2b81:	e8 7a fa ff ff       	call   2600 <socket@plt>
    2b86:	89 45 d8             	mov    %eax,-0x28(%rbp)
  if (conn_fd < 0) {
    2b89:	83 7d d8 00          	cmpl   $0x0,-0x28(%rbp)
    2b8d:	79 05                	jns    2b94 <connect_to_bao+0x84>
    return conn_fd;
    2b8f:	8b 45 d8             	mov    -0x28(%rbp),%eax
    2b92:	eb 2a                	jmp    2bbe <connect_to_bao+0xae>
  }
  
  ret = connect(conn_fd, (struct sockaddr*)&server_addr, sizeof(server_addr));
    2b94:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    2b98:	48 89 c1             	mov    %rax,%rcx
    2b9b:	8b 45 d8             	mov    -0x28(%rbp),%eax
    2b9e:	ba 10 00 00 00       	mov    $0x10,%edx
    2ba3:	48 89 ce             	mov    %rcx,%rsi
    2ba6:	89 c7                	mov    %eax,%edi
    2ba8:	e8 f3 f9 ff ff       	call   25a0 <connect@plt>
    2bad:	89 45 dc             	mov    %eax,-0x24(%rbp)
  if (ret == -1) {
    2bb0:	83 7d dc ff          	cmpl   $0xffffffff,-0x24(%rbp)
    2bb4:	75 05                	jne    2bbb <connect_to_bao+0xab>
    return ret;
    2bb6:	8b 45 dc             	mov    -0x24(%rbp),%eax
    2bb9:	eb 03                	jmp    2bbe <connect_to_bao+0xae>
  }

  return conn_fd;
    2bbb:	8b 45 d8             	mov    -0x28(%rbp),%eax

}
    2bbe:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
    2bc2:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
    2bc9:	00 00 
    2bcb:	74 05                	je     2bd2 <connect_to_bao+0xc2>
    2bcd:	e8 5e f8 ff ff       	call   2430 <__stack_chk_fail@plt>
    2bd2:	c9                   	leave  
    2bd3:	c3                   	ret    

0000000000002bd4 <get_relation_name>:

// Get the relation name of a particular plan node with a PostgreSQL
// PlannedStmt.
static char* get_relation_name(PlannedStmt* stmt, Plan* node) {
    2bd4:	f3 0f 1e fa          	endbr64 
    2bd8:	55                   	push   %rbp
    2bd9:	48 89 e5             	mov    %rsp,%rbp
    2bdc:	48 83 ec 20          	sub    $0x20,%rsp
    2be0:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    2be4:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  Index rti;

  switch (node->type) {
    2be8:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    2bec:	8b 00                	mov    (%rax),%eax
    2bee:	2d 38 01 00 00       	sub    $0x138,%eax
    2bf3:	83 f8 16             	cmp    $0x16,%eax
    2bf6:	0f 97 c2             	seta   %dl
    2bf9:	84 d2                	test   %dl,%dl
    2bfb:	75 4a                	jne    2c47 <get_relation_name+0x73>
    2bfd:	ba c1 1f 60 00       	mov    $0x601fc1,%edx
    2c02:	89 c1                	mov    %eax,%ecx
    2c04:	48 d3 ea             	shr    %cl,%rdx
    2c07:	48 89 d0             	mov    %rdx,%rax
    2c0a:	83 e0 01             	and    $0x1,%eax
    2c0d:	48 85 c0             	test   %rax,%rax
    2c10:	0f 95 c0             	setne  %al
    2c13:	84 c0                	test   %al,%al
    2c15:	74 30                	je     2c47 <get_relation_name+0x73>
  case T_BitmapIndexScan:
  case T_TidScan:
  case T_ForeignScan:
  case T_CustomScan:
  case T_ModifyTable:
    rti = ((Scan*)node)->scanrelid;
    2c17:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    2c1b:	8b 40 68             	mov    0x68(%rax),%eax
    2c1e:	89 45 fc             	mov    %eax,-0x4(%rbp)
    return get_rel_name(rt_fetch(rti, stmt->rtable)->relid);
    2c21:	8b 45 fc             	mov    -0x4(%rbp),%eax
    2c24:	83 e8 01             	sub    $0x1,%eax
    2c27:	89 c2                	mov    %eax,%edx
    2c29:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    2c2d:	48 8b 40 28          	mov    0x28(%rax),%rax
    2c31:	89 d6                	mov    %edx,%esi
    2c33:	48 89 c7             	mov    %rax,%rdi
    2c36:	e8 61 fb ff ff       	call   279c <list_nth>
    2c3b:	8b 40 08             	mov    0x8(%rax),%eax
    2c3e:	89 c7                	mov    %eax,%edi
    2c40:	e8 2b f7 ff ff       	call   2370 <get_rel_name@plt>
    2c45:	eb 05                	jmp    2c4c <get_relation_name+0x78>
    break;
  default:
    return NULL;
    2c47:	b8 00 00 00 00       	mov    $0x0,%eax
  }
}
    2c4c:	c9                   	leave  
    2c4d:	c3                   	ret    

0000000000002c4e <GetBufferDescriptor>:
extern PGDLLIMPORT BufferDesc *LocalBufferDescriptors;


static inline BufferDesc *
GetBufferDescriptor(uint32 id)
{
    2c4e:	55                   	push   %rbp
    2c4f:	48 89 e5             	mov    %rsp,%rbp
    2c52:	89 7d fc             	mov    %edi,-0x4(%rbp)
	return &(BufferDescriptors[id]).bufferdesc;
    2c55:	48 8b 05 5c 73 00 00 	mov    0x735c(%rip),%rax        # 9fb8 <BufferDescriptors@Base>
    2c5c:	48 8b 10             	mov    (%rax),%rdx
    2c5f:	8b 45 fc             	mov    -0x4(%rbp),%eax
    2c62:	48 c1 e0 06          	shl    $0x6,%rax
    2c66:	48 01 d0             	add    %rdx,%rax
}
    2c69:	5d                   	pop    %rbp
    2c6a:	c3                   	ret    

0000000000002c6b <buffer_state>:
  UT_hash_handle hh;
};
  

// modified from pg_buffercache_pages
static char* buffer_state() {
    2c6b:	f3 0f 1e fa          	endbr64 
    2c6f:	55                   	push   %rbp
    2c70:	48 89 e5             	mov    %rsp,%rbp
    2c73:	53                   	push   %rbx
    2c74:	48 81 ec e8 00 00 00 	sub    $0xe8,%rsp
    2c7b:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    2c82:	00 00 
    2c84:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    2c88:	31 c0                	xor    %eax,%eax
  char* buf;
  size_t json_size;
  FILE* stream;
 

  struct buffer_counter* map = NULL;
    2c8a:	48 c7 85 70 ff ff ff 	movq   $0x0,-0x90(%rbp)
    2c91:	00 00 00 00 
  struct buffer_counter* query = NULL;
    2c95:	48 c7 85 78 ff ff ff 	movq   $0x0,-0x88(%rbp)
    2c9c:	00 00 00 00 
  struct buffer_counter* tmp = NULL;
    2ca0:	48 c7 45 80 00 00 00 	movq   $0x0,-0x80(%rbp)
    2ca7:	00 

  // For each buffer, we either add or increment a hash table entry.
  for (i = 0; i < NBuffers; i++) {
    2ca8:	c7 85 18 ff ff ff 00 	movl   $0x0,-0xe8(%rbp)
    2caf:	00 00 00 
    2cb2:	e9 fd 12 00 00       	jmp    3fb4 <buffer_state+0x1349>
    BufferDesc *bufHdr;
    
    bufHdr = GetBufferDescriptor(i);
    2cb7:	8b 85 18 ff ff ff    	mov    -0xe8(%rbp),%eax
    2cbd:	89 c7                	mov    %eax,%edi
    2cbf:	e8 8a ff ff ff       	call   2c4e <GetBufferDescriptor>
    2cc4:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
    // But this might slow down PG, and if our buffer cache is a little
    // inaccurate that is OK. Just keep in mind that the tablespace
    // and relfilenode we read from the buffer header may be inconsistent.
    //buf_state = LockBufHdr(bufHdr);

    tablespace = bufHdr->tag.spcOid;
    2cc8:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    2ccc:	8b 00                	mov    (%rax),%eax
    2cce:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%rbp)
    relfilenode = (Oid)bufHdr->tag.relNumber;
    2cd4:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    2cd8:	8b 40 08             	mov    0x8(%rax),%eax
    2cdb:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%rbp)

    // Ensure both are valid.
    if (tablespace == InvalidOid || relfilenode == InvalidOid)
    2ce1:	83 bd 44 ff ff ff 00 	cmpl   $0x0,-0xbc(%rbp)
    2ce8:	0f 84 b5 12 00 00    	je     3fa3 <buffer_state+0x1338>
    2cee:	83 bd 48 ff ff ff 00 	cmpl   $0x0,-0xb8(%rbp)
    2cf5:	0f 84 a8 12 00 00    	je     3fa3 <buffer_state+0x1338>
      continue;

    // Get the relation ID attached to this file node.
    relid = RelidByRelfilenumber(tablespace, (RelFileNumber)relfilenode);
    2cfb:	8b 95 48 ff ff ff    	mov    -0xb8(%rbp),%edx
    2d01:	8b 85 44 ff ff ff    	mov    -0xbc(%rbp),%eax
    2d07:	89 d6                	mov    %edx,%esi
    2d09:	89 c7                	mov    %eax,%edi
    2d0b:	e8 90 f6 ff ff       	call   23a0 <RelidByRelfilenumber@plt>
    2d10:	89 85 4c ff ff ff    	mov    %eax,-0xb4(%rbp)
    if (relid == InvalidOid)
    2d16:	83 bd 4c ff ff ff 00 	cmpl   $0x0,-0xb4(%rbp)
    2d1d:	0f 84 83 12 00 00    	je     3fa6 <buffer_state+0x133b>
      continue;

    // Convert the relid to an actual relation name.
    rel_name = get_rel_name(relid);
    2d23:	8b 85 4c ff ff ff    	mov    -0xb4(%rbp),%eax
    2d29:	89 c7                	mov    %eax,%edi
    2d2b:	e8 40 f6 ff ff       	call   2370 <get_rel_name@plt>
    2d30:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
    if (rel_name == NULL)
    2d34:	48 83 7d c0 00       	cmpq   $0x0,-0x40(%rbp)
    2d39:	0f 84 6a 12 00 00    	je     3fa9 <buffer_state+0x133e>
      continue;

    // Exclude system tables.
    if (starts_with(rel_name, "pg_") || starts_with(rel_name, "sql_"))
    2d3f:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
    2d43:	48 8d 15 b6 43 00 00 	lea    0x43b6(%rip),%rdx        # 7100 <_fini+0xe04>
    2d4a:	48 89 d6             	mov    %rdx,%rsi
    2d4d:	48 89 c7             	mov    %rax,%rdi
    2d50:	e8 85 fc ff ff       	call   29da <starts_with>
    2d55:	84 c0                	test   %al,%al
    2d57:	0f 85 4f 12 00 00    	jne    3fac <buffer_state+0x1341>
    2d5d:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
    2d61:	48 8d 15 9c 43 00 00 	lea    0x439c(%rip),%rdx        # 7104 <_fini+0xe08>
    2d68:	48 89 d6             	mov    %rdx,%rsi
    2d6b:	48 89 c7             	mov    %rax,%rdi
    2d6e:	e8 67 fc ff ff       	call   29da <starts_with>
    2d73:	84 c0                	test   %al,%al
    2d75:	0f 85 31 12 00 00    	jne    3fac <buffer_state+0x1341>
      continue;
    
    // See if this string is already in the table. If so, increment the count.
    // If not, add a new entry.
    HASH_FIND_STR(map, rel_name, query);
    2d7b:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
    2d7f:	48 89 c7             	mov    %rax,%rdi
    2d82:	e8 99 f6 ff ff       	call   2420 <strlen@plt>
    2d87:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%rbp)
    2d8d:	48 c7 85 78 ff ff ff 	movq   $0x0,-0x88(%rbp)
    2d94:	00 00 00 00 
    2d98:	48 83 bd 70 ff ff ff 	cmpq   $0x0,-0x90(%rbp)
    2d9f:	00 
    2da0:	0f 84 68 06 00 00    	je     340e <buffer_state+0x7a3>
    2da6:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
    2daa:	48 89 45 88          	mov    %rax,-0x78(%rbp)
    2dae:	c7 85 1c ff ff ff ef 	movl   $0xfeedbeef,-0xe4(%rbp)
    2db5:	be ed fe 
    2db8:	c7 85 24 ff ff ff b9 	movl   $0x9e3779b9,-0xdc(%rbp)
    2dbf:	79 37 9e 
    2dc2:	8b 85 24 ff ff ff    	mov    -0xdc(%rbp),%eax
    2dc8:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%rbp)
    2dce:	8b 85 50 ff ff ff    	mov    -0xb0(%rbp),%eax
    2dd4:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%rbp)
    2dda:	e9 4e 02 00 00       	jmp    302d <buffer_state+0x3c2>
    2ddf:	48 8b 45 88          	mov    -0x78(%rbp),%rax
    2de3:	0f b6 00             	movzbl (%rax),%eax
    2de6:	0f b6 d0             	movzbl %al,%edx
    2de9:	48 8b 45 88          	mov    -0x78(%rbp),%rax
    2ded:	48 83 c0 01          	add    $0x1,%rax
    2df1:	0f b6 00             	movzbl (%rax),%eax
    2df4:	0f b6 c0             	movzbl %al,%eax
    2df7:	c1 e0 08             	shl    $0x8,%eax
    2dfa:	01 c2                	add    %eax,%edx
    2dfc:	48 8b 45 88          	mov    -0x78(%rbp),%rax
    2e00:	48 83 c0 02          	add    $0x2,%rax
    2e04:	0f b6 00             	movzbl (%rax),%eax
    2e07:	0f b6 c0             	movzbl %al,%eax
    2e0a:	c1 e0 10             	shl    $0x10,%eax
    2e0d:	01 c2                	add    %eax,%edx
    2e0f:	48 8b 45 88          	mov    -0x78(%rbp),%rax
    2e13:	48 83 c0 03          	add    $0x3,%rax
    2e17:	0f b6 00             	movzbl (%rax),%eax
    2e1a:	0f b6 c0             	movzbl %al,%eax
    2e1d:	c1 e0 18             	shl    $0x18,%eax
    2e20:	01 d0                	add    %edx,%eax
    2e22:	01 85 20 ff ff ff    	add    %eax,-0xe0(%rbp)
    2e28:	48 8b 45 88          	mov    -0x78(%rbp),%rax
    2e2c:	48 83 c0 04          	add    $0x4,%rax
    2e30:	0f b6 00             	movzbl (%rax),%eax
    2e33:	0f b6 d0             	movzbl %al,%edx
    2e36:	48 8b 45 88          	mov    -0x78(%rbp),%rax
    2e3a:	48 83 c0 05          	add    $0x5,%rax
    2e3e:	0f b6 00             	movzbl (%rax),%eax
    2e41:	0f b6 c0             	movzbl %al,%eax
    2e44:	c1 e0 08             	shl    $0x8,%eax
    2e47:	01 c2                	add    %eax,%edx
    2e49:	48 8b 45 88          	mov    -0x78(%rbp),%rax
    2e4d:	48 83 c0 06          	add    $0x6,%rax
    2e51:	0f b6 00             	movzbl (%rax),%eax
    2e54:	0f b6 c0             	movzbl %al,%eax
    2e57:	c1 e0 10             	shl    $0x10,%eax
    2e5a:	01 c2                	add    %eax,%edx
    2e5c:	48 8b 45 88          	mov    -0x78(%rbp),%rax
    2e60:	48 83 c0 07          	add    $0x7,%rax
    2e64:	0f b6 00             	movzbl (%rax),%eax
    2e67:	0f b6 c0             	movzbl %al,%eax
    2e6a:	c1 e0 18             	shl    $0x18,%eax
    2e6d:	01 d0                	add    %edx,%eax
    2e6f:	01 85 24 ff ff ff    	add    %eax,-0xdc(%rbp)
    2e75:	48 8b 45 88          	mov    -0x78(%rbp),%rax
    2e79:	48 83 c0 08          	add    $0x8,%rax
    2e7d:	0f b6 00             	movzbl (%rax),%eax
    2e80:	0f b6 d0             	movzbl %al,%edx
    2e83:	48 8b 45 88          	mov    -0x78(%rbp),%rax
    2e87:	48 83 c0 09          	add    $0x9,%rax
    2e8b:	0f b6 00             	movzbl (%rax),%eax
    2e8e:	0f b6 c0             	movzbl %al,%eax
    2e91:	c1 e0 08             	shl    $0x8,%eax
    2e94:	01 c2                	add    %eax,%edx
    2e96:	48 8b 45 88          	mov    -0x78(%rbp),%rax
    2e9a:	48 83 c0 0a          	add    $0xa,%rax
    2e9e:	0f b6 00             	movzbl (%rax),%eax
    2ea1:	0f b6 c0             	movzbl %al,%eax
    2ea4:	c1 e0 10             	shl    $0x10,%eax
    2ea7:	01 c2                	add    %eax,%edx
    2ea9:	48 8b 45 88          	mov    -0x78(%rbp),%rax
    2ead:	48 83 c0 0b          	add    $0xb,%rax
    2eb1:	0f b6 00             	movzbl (%rax),%eax
    2eb4:	0f b6 c0             	movzbl %al,%eax
    2eb7:	c1 e0 18             	shl    $0x18,%eax
    2eba:	01 d0                	add    %edx,%eax
    2ebc:	01 85 1c ff ff ff    	add    %eax,-0xe4(%rbp)
    2ec2:	8b 85 24 ff ff ff    	mov    -0xdc(%rbp),%eax
    2ec8:	29 85 20 ff ff ff    	sub    %eax,-0xe0(%rbp)
    2ece:	8b 85 1c ff ff ff    	mov    -0xe4(%rbp),%eax
    2ed4:	29 85 20 ff ff ff    	sub    %eax,-0xe0(%rbp)
    2eda:	8b 85 1c ff ff ff    	mov    -0xe4(%rbp),%eax
    2ee0:	c1 e8 0d             	shr    $0xd,%eax
    2ee3:	31 85 20 ff ff ff    	xor    %eax,-0xe0(%rbp)
    2ee9:	8b 85 1c ff ff ff    	mov    -0xe4(%rbp),%eax
    2eef:	29 85 24 ff ff ff    	sub    %eax,-0xdc(%rbp)
    2ef5:	8b 85 20 ff ff ff    	mov    -0xe0(%rbp),%eax
    2efb:	29 85 24 ff ff ff    	sub    %eax,-0xdc(%rbp)
    2f01:	8b 85 20 ff ff ff    	mov    -0xe0(%rbp),%eax
    2f07:	c1 e0 08             	shl    $0x8,%eax
    2f0a:	31 85 24 ff ff ff    	xor    %eax,-0xdc(%rbp)
    2f10:	8b 85 20 ff ff ff    	mov    -0xe0(%rbp),%eax
    2f16:	29 85 1c ff ff ff    	sub    %eax,-0xe4(%rbp)
    2f1c:	8b 85 24 ff ff ff    	mov    -0xdc(%rbp),%eax
    2f22:	29 85 1c ff ff ff    	sub    %eax,-0xe4(%rbp)
    2f28:	8b 85 24 ff ff ff    	mov    -0xdc(%rbp),%eax
    2f2e:	c1 e8 0d             	shr    $0xd,%eax
    2f31:	31 85 1c ff ff ff    	xor    %eax,-0xe4(%rbp)
    2f37:	8b 85 24 ff ff ff    	mov    -0xdc(%rbp),%eax
    2f3d:	29 85 20 ff ff ff    	sub    %eax,-0xe0(%rbp)
    2f43:	8b 85 1c ff ff ff    	mov    -0xe4(%rbp),%eax
    2f49:	29 85 20 ff ff ff    	sub    %eax,-0xe0(%rbp)
    2f4f:	8b 85 1c ff ff ff    	mov    -0xe4(%rbp),%eax
    2f55:	c1 e8 0c             	shr    $0xc,%eax
    2f58:	31 85 20 ff ff ff    	xor    %eax,-0xe0(%rbp)
    2f5e:	8b 85 1c ff ff ff    	mov    -0xe4(%rbp),%eax
    2f64:	29 85 24 ff ff ff    	sub    %eax,-0xdc(%rbp)
    2f6a:	8b 85 20 ff ff ff    	mov    -0xe0(%rbp),%eax
    2f70:	29 85 24 ff ff ff    	sub    %eax,-0xdc(%rbp)
    2f76:	8b 85 20 ff ff ff    	mov    -0xe0(%rbp),%eax
    2f7c:	c1 e0 10             	shl    $0x10,%eax
    2f7f:	31 85 24 ff ff ff    	xor    %eax,-0xdc(%rbp)
    2f85:	8b 85 20 ff ff ff    	mov    -0xe0(%rbp),%eax
    2f8b:	29 85 1c ff ff ff    	sub    %eax,-0xe4(%rbp)
    2f91:	8b 85 24 ff ff ff    	mov    -0xdc(%rbp),%eax
    2f97:	29 85 1c ff ff ff    	sub    %eax,-0xe4(%rbp)
    2f9d:	8b 85 24 ff ff ff    	mov    -0xdc(%rbp),%eax
    2fa3:	c1 e8 05             	shr    $0x5,%eax
    2fa6:	31 85 1c ff ff ff    	xor    %eax,-0xe4(%rbp)
    2fac:	8b 85 24 ff ff ff    	mov    -0xdc(%rbp),%eax
    2fb2:	29 85 20 ff ff ff    	sub    %eax,-0xe0(%rbp)
    2fb8:	8b 85 1c ff ff ff    	mov    -0xe4(%rbp),%eax
    2fbe:	29 85 20 ff ff ff    	sub    %eax,-0xe0(%rbp)
    2fc4:	8b 85 1c ff ff ff    	mov    -0xe4(%rbp),%eax
    2fca:	c1 e8 03             	shr    $0x3,%eax
    2fcd:	31 85 20 ff ff ff    	xor    %eax,-0xe0(%rbp)
    2fd3:	8b 85 1c ff ff ff    	mov    -0xe4(%rbp),%eax
    2fd9:	29 85 24 ff ff ff    	sub    %eax,-0xdc(%rbp)
    2fdf:	8b 85 20 ff ff ff    	mov    -0xe0(%rbp),%eax
    2fe5:	29 85 24 ff ff ff    	sub    %eax,-0xdc(%rbp)
    2feb:	8b 85 20 ff ff ff    	mov    -0xe0(%rbp),%eax
    2ff1:	c1 e0 0a             	shl    $0xa,%eax
    2ff4:	31 85 24 ff ff ff    	xor    %eax,-0xdc(%rbp)
    2ffa:	8b 85 20 ff ff ff    	mov    -0xe0(%rbp),%eax
    3000:	29 85 1c ff ff ff    	sub    %eax,-0xe4(%rbp)
    3006:	8b 85 24 ff ff ff    	mov    -0xdc(%rbp),%eax
    300c:	29 85 1c ff ff ff    	sub    %eax,-0xe4(%rbp)
    3012:	8b 85 24 ff ff ff    	mov    -0xdc(%rbp),%eax
    3018:	c1 e8 0f             	shr    $0xf,%eax
    301b:	31 85 1c ff ff ff    	xor    %eax,-0xe4(%rbp)
    3021:	48 83 45 88 0c       	addq   $0xc,-0x78(%rbp)
    3026:	83 ad 28 ff ff ff 0c 	subl   $0xc,-0xd8(%rbp)
    302d:	83 bd 28 ff ff ff 0b 	cmpl   $0xb,-0xd8(%rbp)
    3034:	0f 87 a5 fd ff ff    	ja     2ddf <buffer_state+0x174>
    303a:	8b 85 50 ff ff ff    	mov    -0xb0(%rbp),%eax
    3040:	01 85 1c ff ff ff    	add    %eax,-0xe4(%rbp)
    3046:	83 bd 28 ff ff ff 0b 	cmpl   $0xb,-0xd8(%rbp)
    304d:	0f 87 1a 01 00 00    	ja     316d <buffer_state+0x502>
    3053:	8b 85 28 ff ff ff    	mov    -0xd8(%rbp),%eax
    3059:	48 8d 14 85 00 00 00 	lea    0x0(,%rax,4),%rdx
    3060:	00 
    3061:	48 8d 05 b4 40 00 00 	lea    0x40b4(%rip),%rax        # 711c <_fini+0xe20>
    3068:	8b 04 02             	mov    (%rdx,%rax,1),%eax
    306b:	48 98                	cltq   
    306d:	48 8d 15 a8 40 00 00 	lea    0x40a8(%rip),%rdx        # 711c <_fini+0xe20>
    3074:	48 01 d0             	add    %rdx,%rax
    3077:	3e ff e0             	notrack jmp *%rax
    307a:	48 8b 45 88          	mov    -0x78(%rbp),%rax
    307e:	48 83 c0 0a          	add    $0xa,%rax
    3082:	0f b6 00             	movzbl (%rax),%eax
    3085:	0f b6 c0             	movzbl %al,%eax
    3088:	c1 e0 18             	shl    $0x18,%eax
    308b:	01 85 1c ff ff ff    	add    %eax,-0xe4(%rbp)
    3091:	48 8b 45 88          	mov    -0x78(%rbp),%rax
    3095:	48 83 c0 09          	add    $0x9,%rax
    3099:	0f b6 00             	movzbl (%rax),%eax
    309c:	0f b6 c0             	movzbl %al,%eax
    309f:	c1 e0 10             	shl    $0x10,%eax
    30a2:	01 85 1c ff ff ff    	add    %eax,-0xe4(%rbp)
    30a8:	48 8b 45 88          	mov    -0x78(%rbp),%rax
    30ac:	48 83 c0 08          	add    $0x8,%rax
    30b0:	0f b6 00             	movzbl (%rax),%eax
    30b3:	0f b6 c0             	movzbl %al,%eax
    30b6:	c1 e0 08             	shl    $0x8,%eax
    30b9:	01 85 1c ff ff ff    	add    %eax,-0xe4(%rbp)
    30bf:	48 8b 45 88          	mov    -0x78(%rbp),%rax
    30c3:	48 83 c0 07          	add    $0x7,%rax
    30c7:	0f b6 00             	movzbl (%rax),%eax
    30ca:	0f b6 c0             	movzbl %al,%eax
    30cd:	c1 e0 18             	shl    $0x18,%eax
    30d0:	01 85 24 ff ff ff    	add    %eax,-0xdc(%rbp)
    30d6:	48 8b 45 88          	mov    -0x78(%rbp),%rax
    30da:	48 83 c0 06          	add    $0x6,%rax
    30de:	0f b6 00             	movzbl (%rax),%eax
    30e1:	0f b6 c0             	movzbl %al,%eax
    30e4:	c1 e0 10             	shl    $0x10,%eax
    30e7:	01 85 24 ff ff ff    	add    %eax,-0xdc(%rbp)
    30ed:	48 8b 45 88          	mov    -0x78(%rbp),%rax
    30f1:	48 83 c0 05          	add    $0x5,%rax
    30f5:	0f b6 00             	movzbl (%rax),%eax
    30f8:	0f b6 c0             	movzbl %al,%eax
    30fb:	c1 e0 08             	shl    $0x8,%eax
    30fe:	01 85 24 ff ff ff    	add    %eax,-0xdc(%rbp)
    3104:	48 8b 45 88          	mov    -0x78(%rbp),%rax
    3108:	48 83 c0 04          	add    $0x4,%rax
    310c:	0f b6 00             	movzbl (%rax),%eax
    310f:	0f b6 c0             	movzbl %al,%eax
    3112:	01 85 24 ff ff ff    	add    %eax,-0xdc(%rbp)
    3118:	48 8b 45 88          	mov    -0x78(%rbp),%rax
    311c:	48 83 c0 03          	add    $0x3,%rax
    3120:	0f b6 00             	movzbl (%rax),%eax
    3123:	0f b6 c0             	movzbl %al,%eax
    3126:	c1 e0 18             	shl    $0x18,%eax
    3129:	01 85 20 ff ff ff    	add    %eax,-0xe0(%rbp)
    312f:	48 8b 45 88          	mov    -0x78(%rbp),%rax
    3133:	48 83 c0 02          	add    $0x2,%rax
    3137:	0f b6 00             	movzbl (%rax),%eax
    313a:	0f b6 c0             	movzbl %al,%eax
    313d:	c1 e0 10             	shl    $0x10,%eax
    3140:	01 85 20 ff ff ff    	add    %eax,-0xe0(%rbp)
    3146:	48 8b 45 88          	mov    -0x78(%rbp),%rax
    314a:	48 83 c0 01          	add    $0x1,%rax
    314e:	0f b6 00             	movzbl (%rax),%eax
    3151:	0f b6 c0             	movzbl %al,%eax
    3154:	c1 e0 08             	shl    $0x8,%eax
    3157:	01 85 20 ff ff ff    	add    %eax,-0xe0(%rbp)
    315d:	48 8b 45 88          	mov    -0x78(%rbp),%rax
    3161:	0f b6 00             	movzbl (%rax),%eax
    3164:	0f b6 c0             	movzbl %al,%eax
    3167:	01 85 20 ff ff ff    	add    %eax,-0xe0(%rbp)
    316d:	8b 85 24 ff ff ff    	mov    -0xdc(%rbp),%eax
    3173:	29 85 20 ff ff ff    	sub    %eax,-0xe0(%rbp)
    3179:	8b 85 1c ff ff ff    	mov    -0xe4(%rbp),%eax
    317f:	29 85 20 ff ff ff    	sub    %eax,-0xe0(%rbp)
    3185:	8b 85 1c ff ff ff    	mov    -0xe4(%rbp),%eax
    318b:	c1 e8 0d             	shr    $0xd,%eax
    318e:	31 85 20 ff ff ff    	xor    %eax,-0xe0(%rbp)
    3194:	8b 85 1c ff ff ff    	mov    -0xe4(%rbp),%eax
    319a:	29 85 24 ff ff ff    	sub    %eax,-0xdc(%rbp)
    31a0:	8b 85 20 ff ff ff    	mov    -0xe0(%rbp),%eax
    31a6:	29 85 24 ff ff ff    	sub    %eax,-0xdc(%rbp)
    31ac:	8b 85 20 ff ff ff    	mov    -0xe0(%rbp),%eax
    31b2:	c1 e0 08             	shl    $0x8,%eax
    31b5:	31 85 24 ff ff ff    	xor    %eax,-0xdc(%rbp)
    31bb:	8b 85 20 ff ff ff    	mov    -0xe0(%rbp),%eax
    31c1:	29 85 1c ff ff ff    	sub    %eax,-0xe4(%rbp)
    31c7:	8b 85 24 ff ff ff    	mov    -0xdc(%rbp),%eax
    31cd:	29 85 1c ff ff ff    	sub    %eax,-0xe4(%rbp)
    31d3:	8b 85 24 ff ff ff    	mov    -0xdc(%rbp),%eax
    31d9:	c1 e8 0d             	shr    $0xd,%eax
    31dc:	31 85 1c ff ff ff    	xor    %eax,-0xe4(%rbp)
    31e2:	8b 85 24 ff ff ff    	mov    -0xdc(%rbp),%eax
    31e8:	29 85 20 ff ff ff    	sub    %eax,-0xe0(%rbp)
    31ee:	8b 85 1c ff ff ff    	mov    -0xe4(%rbp),%eax
    31f4:	29 85 20 ff ff ff    	sub    %eax,-0xe0(%rbp)
    31fa:	8b 85 1c ff ff ff    	mov    -0xe4(%rbp),%eax
    3200:	c1 e8 0c             	shr    $0xc,%eax
    3203:	31 85 20 ff ff ff    	xor    %eax,-0xe0(%rbp)
    3209:	8b 85 1c ff ff ff    	mov    -0xe4(%rbp),%eax
    320f:	29 85 24 ff ff ff    	sub    %eax,-0xdc(%rbp)
    3215:	8b 85 20 ff ff ff    	mov    -0xe0(%rbp),%eax
    321b:	29 85 24 ff ff ff    	sub    %eax,-0xdc(%rbp)
    3221:	8b 85 20 ff ff ff    	mov    -0xe0(%rbp),%eax
    3227:	c1 e0 10             	shl    $0x10,%eax
    322a:	31 85 24 ff ff ff    	xor    %eax,-0xdc(%rbp)
    3230:	8b 85 20 ff ff ff    	mov    -0xe0(%rbp),%eax
    3236:	29 85 1c ff ff ff    	sub    %eax,-0xe4(%rbp)
    323c:	8b 85 24 ff ff ff    	mov    -0xdc(%rbp),%eax
    3242:	29 85 1c ff ff ff    	sub    %eax,-0xe4(%rbp)
    3248:	8b 85 24 ff ff ff    	mov    -0xdc(%rbp),%eax
    324e:	c1 e8 05             	shr    $0x5,%eax
    3251:	31 85 1c ff ff ff    	xor    %eax,-0xe4(%rbp)
    3257:	8b 85 24 ff ff ff    	mov    -0xdc(%rbp),%eax
    325d:	29 85 20 ff ff ff    	sub    %eax,-0xe0(%rbp)
    3263:	8b 85 1c ff ff ff    	mov    -0xe4(%rbp),%eax
    3269:	29 85 20 ff ff ff    	sub    %eax,-0xe0(%rbp)
    326f:	8b 85 1c ff ff ff    	mov    -0xe4(%rbp),%eax
    3275:	c1 e8 03             	shr    $0x3,%eax
    3278:	31 85 20 ff ff ff    	xor    %eax,-0xe0(%rbp)
    327e:	8b 85 1c ff ff ff    	mov    -0xe4(%rbp),%eax
    3284:	29 85 24 ff ff ff    	sub    %eax,-0xdc(%rbp)
    328a:	8b 85 20 ff ff ff    	mov    -0xe0(%rbp),%eax
    3290:	29 85 24 ff ff ff    	sub    %eax,-0xdc(%rbp)
    3296:	8b 85 20 ff ff ff    	mov    -0xe0(%rbp),%eax
    329c:	c1 e0 0a             	shl    $0xa,%eax
    329f:	31 85 24 ff ff ff    	xor    %eax,-0xdc(%rbp)
    32a5:	8b 85 20 ff ff ff    	mov    -0xe0(%rbp),%eax
    32ab:	29 85 1c ff ff ff    	sub    %eax,-0xe4(%rbp)
    32b1:	8b 85 24 ff ff ff    	mov    -0xdc(%rbp),%eax
    32b7:	29 85 1c ff ff ff    	sub    %eax,-0xe4(%rbp)
    32bd:	8b 85 24 ff ff ff    	mov    -0xdc(%rbp),%eax
    32c3:	c1 e8 0f             	shr    $0xf,%eax
    32c6:	31 85 1c ff ff ff    	xor    %eax,-0xe4(%rbp)
    32cc:	48 c7 85 78 ff ff ff 	movq   $0x0,-0x88(%rbp)
    32d3:	00 00 00 00 
    32d7:	48 83 bd 70 ff ff ff 	cmpq   $0x0,-0x90(%rbp)
    32de:	00 
    32df:	0f 84 29 01 00 00    	je     340e <buffer_state+0x7a3>
    32e5:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
    32ec:	48 8b 40 10          	mov    0x10(%rax),%rax
    32f0:	8b 40 08             	mov    0x8(%rax),%eax
    32f3:	83 e8 01             	sub    $0x1,%eax
    32f6:	23 85 1c ff ff ff    	and    -0xe4(%rbp),%eax
    32fc:	89 85 54 ff ff ff    	mov    %eax,-0xac(%rbp)
    3302:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
    3309:	48 8b 40 10          	mov    0x10(%rax),%rax
    330d:	48 8b 10             	mov    (%rax),%rdx
    3310:	8b 85 54 ff ff ff    	mov    -0xac(%rbp),%eax
    3316:	48 c1 e0 04          	shl    $0x4,%rax
    331a:	48 01 d0             	add    %rdx,%rax
    331d:	48 8b 00             	mov    (%rax),%rax
    3320:	48 85 c0             	test   %rax,%rax
    3323:	74 3f                	je     3364 <buffer_state+0x6f9>
    3325:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
    332c:	48 8b 40 10          	mov    0x10(%rax),%rax
    3330:	48 8b 10             	mov    (%rax),%rdx
    3333:	8b 85 54 ff ff ff    	mov    -0xac(%rbp),%eax
    3339:	48 c1 e0 04          	shl    $0x4,%rax
    333d:	48 01 d0             	add    %rdx,%rax
    3340:	48 8b 10             	mov    (%rax),%rdx
    3343:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
    334a:	48 8b 40 10          	mov    0x10(%rax),%rax
    334e:	48 8b 40 20          	mov    0x20(%rax),%rax
    3352:	48 f7 d8             	neg    %rax
    3355:	48 01 d0             	add    %rdx,%rax
    3358:	48 89 85 78 ff ff ff 	mov    %rax,-0x88(%rbp)
    335f:	e9 9c 00 00 00       	jmp    3400 <buffer_state+0x795>
    3364:	48 c7 85 78 ff ff ff 	movq   $0x0,-0x88(%rbp)
    336b:	00 00 00 00 
    336f:	e9 8c 00 00 00       	jmp    3400 <buffer_state+0x795>
    3374:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
    337b:	8b 40 44             	mov    0x44(%rax),%eax
    337e:	39 85 1c ff ff ff    	cmp    %eax,-0xe4(%rbp)
    3384:	75 36                	jne    33bc <buffer_state+0x751>
    3386:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
    338d:	8b 40 40             	mov    0x40(%rax),%eax
    3390:	39 85 50 ff ff ff    	cmp    %eax,-0xb0(%rbp)
    3396:	75 24                	jne    33bc <buffer_state+0x751>
    3398:	8b 95 50 ff ff ff    	mov    -0xb0(%rbp),%edx
    339e:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
    33a5:	48 8b 40 38          	mov    0x38(%rax),%rax
    33a9:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
    33ad:	48 89 ce             	mov    %rcx,%rsi
    33b0:	48 89 c7             	mov    %rax,%rdi
    33b3:	e8 f8 f0 ff ff       	call   24b0 <memcmp@plt>
    33b8:	85 c0                	test   %eax,%eax
    33ba:	74 52                	je     340e <buffer_state+0x7a3>
    33bc:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
    33c3:	48 8b 40 30          	mov    0x30(%rax),%rax
    33c7:	48 85 c0             	test   %rax,%rax
    33ca:	74 29                	je     33f5 <buffer_state+0x78a>
    33cc:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
    33d3:	48 8b 50 30          	mov    0x30(%rax),%rdx
    33d7:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
    33de:	48 8b 40 10          	mov    0x10(%rax),%rax
    33e2:	48 8b 40 20          	mov    0x20(%rax),%rax
    33e6:	48 f7 d8             	neg    %rax
    33e9:	48 01 d0             	add    %rdx,%rax
    33ec:	48 89 85 78 ff ff ff 	mov    %rax,-0x88(%rbp)
    33f3:	eb 0b                	jmp    3400 <buffer_state+0x795>
    33f5:	48 c7 85 78 ff ff ff 	movq   $0x0,-0x88(%rbp)
    33fc:	00 00 00 00 
    3400:	48 83 bd 78 ff ff ff 	cmpq   $0x0,-0x88(%rbp)
    3407:	00 
    3408:	0f 85 66 ff ff ff    	jne    3374 <buffer_state+0x709>
    if (query) {
    340e:	48 83 bd 78 ff ff ff 	cmpq   $0x0,-0x88(%rbp)
    3415:	00 
    3416:	74 1c                	je     3434 <buffer_state+0x7c9>
      query->count++;
    3418:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
    341f:	8b 40 08             	mov    0x8(%rax),%eax
    3422:	8d 50 01             	lea    0x1(%rax),%edx
    3425:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
    342c:	89 50 08             	mov    %edx,0x8(%rax)
    342f:	e9 79 0b 00 00       	jmp    3fad <buffer_state+0x1342>
    } else {
      query = (struct buffer_counter*) malloc(sizeof(struct buffer_counter));
    3434:	bf 48 00 00 00       	mov    $0x48,%edi
    3439:	e8 d2 f0 ff ff       	call   2510 <malloc@plt>
    343e:	48 89 85 78 ff ff ff 	mov    %rax,-0x88(%rbp)
      query->key = rel_name;
    3445:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
    344c:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
    3450:	48 89 10             	mov    %rdx,(%rax)
      query->count = 1;
    3453:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
    345a:	c7 40 08 01 00 00 00 	movl   $0x1,0x8(%rax)
      HASH_ADD_KEYPTR(hh, map, query->key, strlen(query->key), query);
    3461:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
    3468:	48 8b 00             	mov    (%rax),%rax
    346b:	48 89 45 90          	mov    %rax,-0x70(%rbp)
    346f:	c7 85 2c ff ff ff ef 	movl   $0xfeedbeef,-0xd4(%rbp)
    3476:	be ed fe 
    3479:	c7 85 34 ff ff ff b9 	movl   $0x9e3779b9,-0xcc(%rbp)
    3480:	79 37 9e 
    3483:	8b 85 34 ff ff ff    	mov    -0xcc(%rbp),%eax
    3489:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%rbp)
    348f:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
    3496:	48 8b 00             	mov    (%rax),%rax
    3499:	48 89 c7             	mov    %rax,%rdi
    349c:	e8 7f ef ff ff       	call   2420 <strlen@plt>
    34a1:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%rbp)
    34a7:	e9 4e 02 00 00       	jmp    36fa <buffer_state+0xa8f>
    34ac:	48 8b 45 90          	mov    -0x70(%rbp),%rax
    34b0:	0f b6 00             	movzbl (%rax),%eax
    34b3:	0f b6 d0             	movzbl %al,%edx
    34b6:	48 8b 45 90          	mov    -0x70(%rbp),%rax
    34ba:	48 83 c0 01          	add    $0x1,%rax
    34be:	0f b6 00             	movzbl (%rax),%eax
    34c1:	0f b6 c0             	movzbl %al,%eax
    34c4:	c1 e0 08             	shl    $0x8,%eax
    34c7:	01 c2                	add    %eax,%edx
    34c9:	48 8b 45 90          	mov    -0x70(%rbp),%rax
    34cd:	48 83 c0 02          	add    $0x2,%rax
    34d1:	0f b6 00             	movzbl (%rax),%eax
    34d4:	0f b6 c0             	movzbl %al,%eax
    34d7:	c1 e0 10             	shl    $0x10,%eax
    34da:	01 c2                	add    %eax,%edx
    34dc:	48 8b 45 90          	mov    -0x70(%rbp),%rax
    34e0:	48 83 c0 03          	add    $0x3,%rax
    34e4:	0f b6 00             	movzbl (%rax),%eax
    34e7:	0f b6 c0             	movzbl %al,%eax
    34ea:	c1 e0 18             	shl    $0x18,%eax
    34ed:	01 d0                	add    %edx,%eax
    34ef:	01 85 30 ff ff ff    	add    %eax,-0xd0(%rbp)
    34f5:	48 8b 45 90          	mov    -0x70(%rbp),%rax
    34f9:	48 83 c0 04          	add    $0x4,%rax
    34fd:	0f b6 00             	movzbl (%rax),%eax
    3500:	0f b6 d0             	movzbl %al,%edx
    3503:	48 8b 45 90          	mov    -0x70(%rbp),%rax
    3507:	48 83 c0 05          	add    $0x5,%rax
    350b:	0f b6 00             	movzbl (%rax),%eax
    350e:	0f b6 c0             	movzbl %al,%eax
    3511:	c1 e0 08             	shl    $0x8,%eax
    3514:	01 c2                	add    %eax,%edx
    3516:	48 8b 45 90          	mov    -0x70(%rbp),%rax
    351a:	48 83 c0 06          	add    $0x6,%rax
    351e:	0f b6 00             	movzbl (%rax),%eax
    3521:	0f b6 c0             	movzbl %al,%eax
    3524:	c1 e0 10             	shl    $0x10,%eax
    3527:	01 c2                	add    %eax,%edx
    3529:	48 8b 45 90          	mov    -0x70(%rbp),%rax
    352d:	48 83 c0 07          	add    $0x7,%rax
    3531:	0f b6 00             	movzbl (%rax),%eax
    3534:	0f b6 c0             	movzbl %al,%eax
    3537:	c1 e0 18             	shl    $0x18,%eax
    353a:	01 d0                	add    %edx,%eax
    353c:	01 85 34 ff ff ff    	add    %eax,-0xcc(%rbp)
    3542:	48 8b 45 90          	mov    -0x70(%rbp),%rax
    3546:	48 83 c0 08          	add    $0x8,%rax
    354a:	0f b6 00             	movzbl (%rax),%eax
    354d:	0f b6 d0             	movzbl %al,%edx
    3550:	48 8b 45 90          	mov    -0x70(%rbp),%rax
    3554:	48 83 c0 09          	add    $0x9,%rax
    3558:	0f b6 00             	movzbl (%rax),%eax
    355b:	0f b6 c0             	movzbl %al,%eax
    355e:	c1 e0 08             	shl    $0x8,%eax
    3561:	01 c2                	add    %eax,%edx
    3563:	48 8b 45 90          	mov    -0x70(%rbp),%rax
    3567:	48 83 c0 0a          	add    $0xa,%rax
    356b:	0f b6 00             	movzbl (%rax),%eax
    356e:	0f b6 c0             	movzbl %al,%eax
    3571:	c1 e0 10             	shl    $0x10,%eax
    3574:	01 c2                	add    %eax,%edx
    3576:	48 8b 45 90          	mov    -0x70(%rbp),%rax
    357a:	48 83 c0 0b          	add    $0xb,%rax
    357e:	0f b6 00             	movzbl (%rax),%eax
    3581:	0f b6 c0             	movzbl %al,%eax
    3584:	c1 e0 18             	shl    $0x18,%eax
    3587:	01 d0                	add    %edx,%eax
    3589:	01 85 2c ff ff ff    	add    %eax,-0xd4(%rbp)
    358f:	8b 85 34 ff ff ff    	mov    -0xcc(%rbp),%eax
    3595:	29 85 30 ff ff ff    	sub    %eax,-0xd0(%rbp)
    359b:	8b 85 2c ff ff ff    	mov    -0xd4(%rbp),%eax
    35a1:	29 85 30 ff ff ff    	sub    %eax,-0xd0(%rbp)
    35a7:	8b 85 2c ff ff ff    	mov    -0xd4(%rbp),%eax
    35ad:	c1 e8 0d             	shr    $0xd,%eax
    35b0:	31 85 30 ff ff ff    	xor    %eax,-0xd0(%rbp)
    35b6:	8b 85 2c ff ff ff    	mov    -0xd4(%rbp),%eax
    35bc:	29 85 34 ff ff ff    	sub    %eax,-0xcc(%rbp)
    35c2:	8b 85 30 ff ff ff    	mov    -0xd0(%rbp),%eax
    35c8:	29 85 34 ff ff ff    	sub    %eax,-0xcc(%rbp)
    35ce:	8b 85 30 ff ff ff    	mov    -0xd0(%rbp),%eax
    35d4:	c1 e0 08             	shl    $0x8,%eax
    35d7:	31 85 34 ff ff ff    	xor    %eax,-0xcc(%rbp)
    35dd:	8b 85 30 ff ff ff    	mov    -0xd0(%rbp),%eax
    35e3:	29 85 2c ff ff ff    	sub    %eax,-0xd4(%rbp)
    35e9:	8b 85 34 ff ff ff    	mov    -0xcc(%rbp),%eax
    35ef:	29 85 2c ff ff ff    	sub    %eax,-0xd4(%rbp)
    35f5:	8b 85 34 ff ff ff    	mov    -0xcc(%rbp),%eax
    35fb:	c1 e8 0d             	shr    $0xd,%eax
    35fe:	31 85 2c ff ff ff    	xor    %eax,-0xd4(%rbp)
    3604:	8b 85 34 ff ff ff    	mov    -0xcc(%rbp),%eax
    360a:	29 85 30 ff ff ff    	sub    %eax,-0xd0(%rbp)
    3610:	8b 85 2c ff ff ff    	mov    -0xd4(%rbp),%eax
    3616:	29 85 30 ff ff ff    	sub    %eax,-0xd0(%rbp)
    361c:	8b 85 2c ff ff ff    	mov    -0xd4(%rbp),%eax
    3622:	c1 e8 0c             	shr    $0xc,%eax
    3625:	31 85 30 ff ff ff    	xor    %eax,-0xd0(%rbp)
    362b:	8b 85 2c ff ff ff    	mov    -0xd4(%rbp),%eax
    3631:	29 85 34 ff ff ff    	sub    %eax,-0xcc(%rbp)
    3637:	8b 85 30 ff ff ff    	mov    -0xd0(%rbp),%eax
    363d:	29 85 34 ff ff ff    	sub    %eax,-0xcc(%rbp)
    3643:	8b 85 30 ff ff ff    	mov    -0xd0(%rbp),%eax
    3649:	c1 e0 10             	shl    $0x10,%eax
    364c:	31 85 34 ff ff ff    	xor    %eax,-0xcc(%rbp)
    3652:	8b 85 30 ff ff ff    	mov    -0xd0(%rbp),%eax
    3658:	29 85 2c ff ff ff    	sub    %eax,-0xd4(%rbp)
    365e:	8b 85 34 ff ff ff    	mov    -0xcc(%rbp),%eax
    3664:	29 85 2c ff ff ff    	sub    %eax,-0xd4(%rbp)
    366a:	8b 85 34 ff ff ff    	mov    -0xcc(%rbp),%eax
    3670:	c1 e8 05             	shr    $0x5,%eax
    3673:	31 85 2c ff ff ff    	xor    %eax,-0xd4(%rbp)
    3679:	8b 85 34 ff ff ff    	mov    -0xcc(%rbp),%eax
    367f:	29 85 30 ff ff ff    	sub    %eax,-0xd0(%rbp)
    3685:	8b 85 2c ff ff ff    	mov    -0xd4(%rbp),%eax
    368b:	29 85 30 ff ff ff    	sub    %eax,-0xd0(%rbp)
    3691:	8b 85 2c ff ff ff    	mov    -0xd4(%rbp),%eax
    3697:	c1 e8 03             	shr    $0x3,%eax
    369a:	31 85 30 ff ff ff    	xor    %eax,-0xd0(%rbp)
    36a0:	8b 85 2c ff ff ff    	mov    -0xd4(%rbp),%eax
    36a6:	29 85 34 ff ff ff    	sub    %eax,-0xcc(%rbp)
    36ac:	8b 85 30 ff ff ff    	mov    -0xd0(%rbp),%eax
    36b2:	29 85 34 ff ff ff    	sub    %eax,-0xcc(%rbp)
    36b8:	8b 85 30 ff ff ff    	mov    -0xd0(%rbp),%eax
    36be:	c1 e0 0a             	shl    $0xa,%eax
    36c1:	31 85 34 ff ff ff    	xor    %eax,-0xcc(%rbp)
    36c7:	8b 85 30 ff ff ff    	mov    -0xd0(%rbp),%eax
    36cd:	29 85 2c ff ff ff    	sub    %eax,-0xd4(%rbp)
    36d3:	8b 85 34 ff ff ff    	mov    -0xcc(%rbp),%eax
    36d9:	29 85 2c ff ff ff    	sub    %eax,-0xd4(%rbp)
    36df:	8b 85 34 ff ff ff    	mov    -0xcc(%rbp),%eax
    36e5:	c1 e8 0f             	shr    $0xf,%eax
    36e8:	31 85 2c ff ff ff    	xor    %eax,-0xd4(%rbp)
    36ee:	48 83 45 90 0c       	addq   $0xc,-0x70(%rbp)
    36f3:	83 ad 38 ff ff ff 0c 	subl   $0xc,-0xc8(%rbp)
    36fa:	83 bd 38 ff ff ff 0b 	cmpl   $0xb,-0xc8(%rbp)
    3701:	0f 87 a5 fd ff ff    	ja     34ac <buffer_state+0x841>
    3707:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
    370e:	48 8b 00             	mov    (%rax),%rax
    3711:	48 89 c7             	mov    %rax,%rdi
    3714:	e8 07 ed ff ff       	call   2420 <strlen@plt>
    3719:	01 85 2c ff ff ff    	add    %eax,-0xd4(%rbp)
    371f:	83 bd 38 ff ff ff 0b 	cmpl   $0xb,-0xc8(%rbp)
    3726:	0f 87 1a 01 00 00    	ja     3846 <buffer_state+0xbdb>
    372c:	8b 85 38 ff ff ff    	mov    -0xc8(%rbp),%eax
    3732:	48 8d 14 85 00 00 00 	lea    0x0(,%rax,4),%rdx
    3739:	00 
    373a:	48 8d 05 0b 3a 00 00 	lea    0x3a0b(%rip),%rax        # 714c <_fini+0xe50>
    3741:	8b 04 02             	mov    (%rdx,%rax,1),%eax
    3744:	48 98                	cltq   
    3746:	48 8d 15 ff 39 00 00 	lea    0x39ff(%rip),%rdx        # 714c <_fini+0xe50>
    374d:	48 01 d0             	add    %rdx,%rax
    3750:	3e ff e0             	notrack jmp *%rax
    3753:	48 8b 45 90          	mov    -0x70(%rbp),%rax
    3757:	48 83 c0 0a          	add    $0xa,%rax
    375b:	0f b6 00             	movzbl (%rax),%eax
    375e:	0f b6 c0             	movzbl %al,%eax
    3761:	c1 e0 18             	shl    $0x18,%eax
    3764:	01 85 2c ff ff ff    	add    %eax,-0xd4(%rbp)
    376a:	48 8b 45 90          	mov    -0x70(%rbp),%rax
    376e:	48 83 c0 09          	add    $0x9,%rax
    3772:	0f b6 00             	movzbl (%rax),%eax
    3775:	0f b6 c0             	movzbl %al,%eax
    3778:	c1 e0 10             	shl    $0x10,%eax
    377b:	01 85 2c ff ff ff    	add    %eax,-0xd4(%rbp)
    3781:	48 8b 45 90          	mov    -0x70(%rbp),%rax
    3785:	48 83 c0 08          	add    $0x8,%rax
    3789:	0f b6 00             	movzbl (%rax),%eax
    378c:	0f b6 c0             	movzbl %al,%eax
    378f:	c1 e0 08             	shl    $0x8,%eax
    3792:	01 85 2c ff ff ff    	add    %eax,-0xd4(%rbp)
    3798:	48 8b 45 90          	mov    -0x70(%rbp),%rax
    379c:	48 83 c0 07          	add    $0x7,%rax
    37a0:	0f b6 00             	movzbl (%rax),%eax
    37a3:	0f b6 c0             	movzbl %al,%eax
    37a6:	c1 e0 18             	shl    $0x18,%eax
    37a9:	01 85 34 ff ff ff    	add    %eax,-0xcc(%rbp)
    37af:	48 8b 45 90          	mov    -0x70(%rbp),%rax
    37b3:	48 83 c0 06          	add    $0x6,%rax
    37b7:	0f b6 00             	movzbl (%rax),%eax
    37ba:	0f b6 c0             	movzbl %al,%eax
    37bd:	c1 e0 10             	shl    $0x10,%eax
    37c0:	01 85 34 ff ff ff    	add    %eax,-0xcc(%rbp)
    37c6:	48 8b 45 90          	mov    -0x70(%rbp),%rax
    37ca:	48 83 c0 05          	add    $0x5,%rax
    37ce:	0f b6 00             	movzbl (%rax),%eax
    37d1:	0f b6 c0             	movzbl %al,%eax
    37d4:	c1 e0 08             	shl    $0x8,%eax
    37d7:	01 85 34 ff ff ff    	add    %eax,-0xcc(%rbp)
    37dd:	48 8b 45 90          	mov    -0x70(%rbp),%rax
    37e1:	48 83 c0 04          	add    $0x4,%rax
    37e5:	0f b6 00             	movzbl (%rax),%eax
    37e8:	0f b6 c0             	movzbl %al,%eax
    37eb:	01 85 34 ff ff ff    	add    %eax,-0xcc(%rbp)
    37f1:	48 8b 45 90          	mov    -0x70(%rbp),%rax
    37f5:	48 83 c0 03          	add    $0x3,%rax
    37f9:	0f b6 00             	movzbl (%rax),%eax
    37fc:	0f b6 c0             	movzbl %al,%eax
    37ff:	c1 e0 18             	shl    $0x18,%eax
    3802:	01 85 30 ff ff ff    	add    %eax,-0xd0(%rbp)
    3808:	48 8b 45 90          	mov    -0x70(%rbp),%rax
    380c:	48 83 c0 02          	add    $0x2,%rax
    3810:	0f b6 00             	movzbl (%rax),%eax
    3813:	0f b6 c0             	movzbl %al,%eax
    3816:	c1 e0 10             	shl    $0x10,%eax
    3819:	01 85 30 ff ff ff    	add    %eax,-0xd0(%rbp)
    381f:	48 8b 45 90          	mov    -0x70(%rbp),%rax
    3823:	48 83 c0 01          	add    $0x1,%rax
    3827:	0f b6 00             	movzbl (%rax),%eax
    382a:	0f b6 c0             	movzbl %al,%eax
    382d:	c1 e0 08             	shl    $0x8,%eax
    3830:	01 85 30 ff ff ff    	add    %eax,-0xd0(%rbp)
    3836:	48 8b 45 90          	mov    -0x70(%rbp),%rax
    383a:	0f b6 00             	movzbl (%rax),%eax
    383d:	0f b6 c0             	movzbl %al,%eax
    3840:	01 85 30 ff ff ff    	add    %eax,-0xd0(%rbp)
    3846:	8b 85 34 ff ff ff    	mov    -0xcc(%rbp),%eax
    384c:	29 85 30 ff ff ff    	sub    %eax,-0xd0(%rbp)
    3852:	8b 85 2c ff ff ff    	mov    -0xd4(%rbp),%eax
    3858:	29 85 30 ff ff ff    	sub    %eax,-0xd0(%rbp)
    385e:	8b 85 2c ff ff ff    	mov    -0xd4(%rbp),%eax
    3864:	c1 e8 0d             	shr    $0xd,%eax
    3867:	31 85 30 ff ff ff    	xor    %eax,-0xd0(%rbp)
    386d:	8b 85 2c ff ff ff    	mov    -0xd4(%rbp),%eax
    3873:	29 85 34 ff ff ff    	sub    %eax,-0xcc(%rbp)
    3879:	8b 85 30 ff ff ff    	mov    -0xd0(%rbp),%eax
    387f:	29 85 34 ff ff ff    	sub    %eax,-0xcc(%rbp)
    3885:	8b 85 30 ff ff ff    	mov    -0xd0(%rbp),%eax
    388b:	c1 e0 08             	shl    $0x8,%eax
    388e:	31 85 34 ff ff ff    	xor    %eax,-0xcc(%rbp)
    3894:	8b 85 30 ff ff ff    	mov    -0xd0(%rbp),%eax
    389a:	29 85 2c ff ff ff    	sub    %eax,-0xd4(%rbp)
    38a0:	8b 85 34 ff ff ff    	mov    -0xcc(%rbp),%eax
    38a6:	29 85 2c ff ff ff    	sub    %eax,-0xd4(%rbp)
    38ac:	8b 85 34 ff ff ff    	mov    -0xcc(%rbp),%eax
    38b2:	c1 e8 0d             	shr    $0xd,%eax
    38b5:	31 85 2c ff ff ff    	xor    %eax,-0xd4(%rbp)
    38bb:	8b 85 34 ff ff ff    	mov    -0xcc(%rbp),%eax
    38c1:	29 85 30 ff ff ff    	sub    %eax,-0xd0(%rbp)
    38c7:	8b 85 2c ff ff ff    	mov    -0xd4(%rbp),%eax
    38cd:	29 85 30 ff ff ff    	sub    %eax,-0xd0(%rbp)
    38d3:	8b 85 2c ff ff ff    	mov    -0xd4(%rbp),%eax
    38d9:	c1 e8 0c             	shr    $0xc,%eax
    38dc:	31 85 30 ff ff ff    	xor    %eax,-0xd0(%rbp)
    38e2:	8b 85 2c ff ff ff    	mov    -0xd4(%rbp),%eax
    38e8:	29 85 34 ff ff ff    	sub    %eax,-0xcc(%rbp)
    38ee:	8b 85 30 ff ff ff    	mov    -0xd0(%rbp),%eax
    38f4:	29 85 34 ff ff ff    	sub    %eax,-0xcc(%rbp)
    38fa:	8b 85 30 ff ff ff    	mov    -0xd0(%rbp),%eax
    3900:	c1 e0 10             	shl    $0x10,%eax
    3903:	31 85 34 ff ff ff    	xor    %eax,-0xcc(%rbp)
    3909:	8b 85 30 ff ff ff    	mov    -0xd0(%rbp),%eax
    390f:	29 85 2c ff ff ff    	sub    %eax,-0xd4(%rbp)
    3915:	8b 85 34 ff ff ff    	mov    -0xcc(%rbp),%eax
    391b:	29 85 2c ff ff ff    	sub    %eax,-0xd4(%rbp)
    3921:	8b 85 34 ff ff ff    	mov    -0xcc(%rbp),%eax
    3927:	c1 e8 05             	shr    $0x5,%eax
    392a:	31 85 2c ff ff ff    	xor    %eax,-0xd4(%rbp)
    3930:	8b 85 34 ff ff ff    	mov    -0xcc(%rbp),%eax
    3936:	29 85 30 ff ff ff    	sub    %eax,-0xd0(%rbp)
    393c:	8b 85 2c ff ff ff    	mov    -0xd4(%rbp),%eax
    3942:	29 85 30 ff ff ff    	sub    %eax,-0xd0(%rbp)
    3948:	8b 85 2c ff ff ff    	mov    -0xd4(%rbp),%eax
    394e:	c1 e8 03             	shr    $0x3,%eax
    3951:	31 85 30 ff ff ff    	xor    %eax,-0xd0(%rbp)
    3957:	8b 85 2c ff ff ff    	mov    -0xd4(%rbp),%eax
    395d:	29 85 34 ff ff ff    	sub    %eax,-0xcc(%rbp)
    3963:	8b 85 30 ff ff ff    	mov    -0xd0(%rbp),%eax
    3969:	29 85 34 ff ff ff    	sub    %eax,-0xcc(%rbp)
    396f:	8b 85 30 ff ff ff    	mov    -0xd0(%rbp),%eax
    3975:	c1 e0 0a             	shl    $0xa,%eax
    3978:	31 85 34 ff ff ff    	xor    %eax,-0xcc(%rbp)
    397e:	8b 85 30 ff ff ff    	mov    -0xd0(%rbp),%eax
    3984:	29 85 2c ff ff ff    	sub    %eax,-0xd4(%rbp)
    398a:	8b 85 34 ff ff ff    	mov    -0xcc(%rbp),%eax
    3990:	29 85 2c ff ff ff    	sub    %eax,-0xd4(%rbp)
    3996:	8b 85 34 ff ff ff    	mov    -0xcc(%rbp),%eax
    399c:	c1 e8 0f             	shr    $0xf,%eax
    399f:	31 85 2c ff ff ff    	xor    %eax,-0xd4(%rbp)
    39a5:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
    39ac:	8b 95 2c ff ff ff    	mov    -0xd4(%rbp),%edx
    39b2:	89 50 44             	mov    %edx,0x44(%rax)
    39b5:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
    39bc:	48 8b 10             	mov    (%rax),%rdx
    39bf:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
    39c6:	48 89 50 38          	mov    %rdx,0x38(%rax)
    39ca:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
    39d1:	48 8b 00             	mov    (%rax),%rax
    39d4:	48 89 c7             	mov    %rax,%rdi
    39d7:	e8 44 ea ff ff       	call   2420 <strlen@plt>
    39dc:	89 c2                	mov    %eax,%edx
    39de:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
    39e5:	89 50 40             	mov    %edx,0x40(%rax)
    39e8:	48 83 bd 70 ff ff ff 	cmpq   $0x0,-0x90(%rbp)
    39ef:	00 
    39f0:	0f 85 38 01 00 00    	jne    3b2e <buffer_state+0xec3>
    39f6:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
    39fd:	48 c7 40 20 00 00 00 	movq   $0x0,0x20(%rax)
    3a04:	00 
    3a05:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
    3a0c:	48 c7 40 18 00 00 00 	movq   $0x0,0x18(%rax)
    3a13:	00 
    3a14:	bf 40 00 00 00       	mov    $0x40,%edi
    3a19:	e8 f2 ea ff ff       	call   2510 <malloc@plt>
    3a1e:	48 89 c2             	mov    %rax,%rdx
    3a21:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
    3a28:	48 89 50 10          	mov    %rdx,0x10(%rax)
    3a2c:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
    3a33:	48 8b 40 10          	mov    0x10(%rax),%rax
    3a37:	48 85 c0             	test   %rax,%rax
    3a3a:	75 0a                	jne    3a46 <buffer_state+0xddb>
    3a3c:	bf ff ff ff ff       	mov    $0xffffffff,%edi
    3a41:	e8 3a eb ff ff       	call   2580 <exit@plt>
    3a46:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
    3a4d:	48 8b 40 10          	mov    0x10(%rax),%rax
    3a51:	ba 40 00 00 00       	mov    $0x40,%edx
    3a56:	be 00 00 00 00       	mov    $0x0,%esi
    3a5b:	48 89 c7             	mov    %rax,%rdi
    3a5e:	e8 fd e9 ff ff       	call   2460 <memset@plt>
    3a63:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
    3a6a:	48 8b 40 10          	mov    0x10(%rax),%rax
    3a6e:	48 8b 95 78 ff ff ff 	mov    -0x88(%rbp),%rdx
    3a75:	48 83 c2 10          	add    $0x10,%rdx
    3a79:	48 89 50 18          	mov    %rdx,0x18(%rax)
    3a7d:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
    3a84:	48 8b 40 10          	mov    0x10(%rax),%rax
    3a88:	c7 40 08 20 00 00 00 	movl   $0x20,0x8(%rax)
    3a8f:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
    3a96:	48 8b 40 10          	mov    0x10(%rax),%rax
    3a9a:	c7 40 0c 05 00 00 00 	movl   $0x5,0xc(%rax)
    3aa1:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
    3aa8:	48 8b 40 10          	mov    0x10(%rax),%rax
    3aac:	48 c7 40 20 10 00 00 	movq   $0x10,0x20(%rax)
    3ab3:	00 
    3ab4:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
    3abb:	48 8b 58 10          	mov    0x10(%rax),%rbx
    3abf:	bf 00 02 00 00       	mov    $0x200,%edi
    3ac4:	e8 47 ea ff ff       	call   2510 <malloc@plt>
    3ac9:	48 89 03             	mov    %rax,(%rbx)
    3acc:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
    3ad3:	48 8b 40 10          	mov    0x10(%rax),%rax
    3ad7:	c7 40 38 e1 1f 11 a0 	movl   $0xa0111fe1,0x38(%rax)
    3ade:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
    3ae5:	48 8b 40 10          	mov    0x10(%rax),%rax
    3ae9:	48 8b 00             	mov    (%rax),%rax
    3aec:	48 85 c0             	test   %rax,%rax
    3aef:	75 0a                	jne    3afb <buffer_state+0xe90>
    3af1:	bf ff ff ff ff       	mov    $0xffffffff,%edi
    3af6:	e8 85 ea ff ff       	call   2580 <exit@plt>
    3afb:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
    3b02:	48 8b 40 10          	mov    0x10(%rax),%rax
    3b06:	48 8b 00             	mov    (%rax),%rax
    3b09:	ba 00 02 00 00       	mov    $0x200,%edx
    3b0e:	be 00 00 00 00       	mov    $0x0,%esi
    3b13:	48 89 c7             	mov    %rax,%rdi
    3b16:	e8 45 e9 ff ff       	call   2460 <memset@plt>
    3b1b:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
    3b22:	48 89 85 70 ff ff ff 	mov    %rax,-0x90(%rbp)
    3b29:	e9 88 00 00 00       	jmp    3bb6 <buffer_state+0xf4b>
    3b2e:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
    3b35:	48 8b 50 10          	mov    0x10(%rax),%rdx
    3b39:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
    3b40:	48 89 50 10          	mov    %rdx,0x10(%rax)
    3b44:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
    3b4b:	48 c7 40 20 00 00 00 	movq   $0x0,0x20(%rax)
    3b52:	00 
    3b53:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
    3b5a:	48 8b 40 10          	mov    0x10(%rax),%rax
    3b5e:	48 8b 50 18          	mov    0x18(%rax),%rdx
    3b62:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
    3b69:	48 8b 40 10          	mov    0x10(%rax),%rax
    3b6d:	48 8b 40 20          	mov    0x20(%rax),%rax
    3b71:	48 f7 d8             	neg    %rax
    3b74:	48 01 c2             	add    %rax,%rdx
    3b77:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
    3b7e:	48 89 50 18          	mov    %rdx,0x18(%rax)
    3b82:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
    3b89:	48 8b 40 10          	mov    0x10(%rax),%rax
    3b8d:	48 8b 40 18          	mov    0x18(%rax),%rax
    3b91:	48 8b 95 78 ff ff ff 	mov    -0x88(%rbp),%rdx
    3b98:	48 89 50 10          	mov    %rdx,0x10(%rax)
    3b9c:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
    3ba3:	48 8b 40 10          	mov    0x10(%rax),%rax
    3ba7:	48 8b 95 78 ff ff ff 	mov    -0x88(%rbp),%rdx
    3bae:	48 83 c2 10          	add    $0x10,%rdx
    3bb2:	48 89 50 18          	mov    %rdx,0x18(%rax)
    3bb6:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
    3bbd:	48 8b 40 10          	mov    0x10(%rax),%rax
    3bc1:	8b 50 10             	mov    0x10(%rax),%edx
    3bc4:	83 c2 01             	add    $0x1,%edx
    3bc7:	89 50 10             	mov    %edx,0x10(%rax)
    3bca:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
    3bd1:	48 8b 40 10          	mov    0x10(%rax),%rax
    3bd5:	8b 40 08             	mov    0x8(%rax),%eax
    3bd8:	83 e8 01             	sub    $0x1,%eax
    3bdb:	23 85 2c ff ff ff    	and    -0xd4(%rbp),%eax
    3be1:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%rbp)
    3be7:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
    3bee:	48 8b 40 10          	mov    0x10(%rax),%rax
    3bf2:	48 8b 10             	mov    (%rax),%rdx
    3bf5:	8b 85 58 ff ff ff    	mov    -0xa8(%rbp),%eax
    3bfb:	48 c1 e0 04          	shl    $0x4,%rax
    3bff:	48 01 d0             	add    %rdx,%rax
    3c02:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
    3c06:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    3c0a:	8b 40 08             	mov    0x8(%rax),%eax
    3c0d:	8d 50 01             	lea    0x1(%rax),%edx
    3c10:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    3c14:	89 50 08             	mov    %edx,0x8(%rax)
    3c17:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    3c1b:	48 8b 10             	mov    (%rax),%rdx
    3c1e:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
    3c25:	48 89 50 30          	mov    %rdx,0x30(%rax)
    3c29:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
    3c30:	48 c7 40 28 00 00 00 	movq   $0x0,0x28(%rax)
    3c37:	00 
    3c38:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    3c3c:	48 8b 00             	mov    (%rax),%rax
    3c3f:	48 85 c0             	test   %rax,%rax
    3c42:	74 16                	je     3c5a <buffer_state+0xfef>
    3c44:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    3c48:	48 8b 00             	mov    (%rax),%rax
    3c4b:	48 8b 95 78 ff ff ff 	mov    -0x88(%rbp),%rdx
    3c52:	48 83 c2 10          	add    $0x10,%rdx
    3c56:	48 89 50 18          	mov    %rdx,0x18(%rax)
    3c5a:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
    3c61:	48 8d 50 10          	lea    0x10(%rax),%rdx
    3c65:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    3c69:	48 89 10             	mov    %rdx,(%rax)
    3c6c:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    3c70:	8b 50 08             	mov    0x8(%rax),%edx
    3c73:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    3c77:	8b 40 0c             	mov    0xc(%rax),%eax
    3c7a:	8d 48 01             	lea    0x1(%rax),%ecx
    3c7d:	89 c8                	mov    %ecx,%eax
    3c7f:	c1 e0 02             	shl    $0x2,%eax
    3c82:	01 c8                	add    %ecx,%eax
    3c84:	01 c0                	add    %eax,%eax
    3c86:	39 c2                	cmp    %eax,%edx
    3c88:	0f 82 1f 03 00 00    	jb     3fad <buffer_state+0x1342>
    3c8e:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
    3c95:	48 8b 40 10          	mov    0x10(%rax),%rax
    3c99:	8b 40 34             	mov    0x34(%rax),%eax
    3c9c:	85 c0                	test   %eax,%eax
    3c9e:	0f 85 09 03 00 00    	jne    3fad <buffer_state+0x1342>
    3ca4:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
    3cab:	48 8b 40 10          	mov    0x10(%rax),%rax
    3caf:	8b 40 08             	mov    0x8(%rax),%eax
    3cb2:	89 c0                	mov    %eax,%eax
    3cb4:	48 c1 e0 05          	shl    $0x5,%rax
    3cb8:	48 89 c7             	mov    %rax,%rdi
    3cbb:	e8 50 e8 ff ff       	call   2510 <malloc@plt>
    3cc0:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    3cc4:	48 83 7d d0 00       	cmpq   $0x0,-0x30(%rbp)
    3cc9:	75 0a                	jne    3cd5 <buffer_state+0x106a>
    3ccb:	bf ff ff ff ff       	mov    $0xffffffff,%edi
    3cd0:	e8 ab e8 ff ff       	call   2580 <exit@plt>
    3cd5:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
    3cdc:	48 8b 40 10          	mov    0x10(%rax),%rax
    3ce0:	8b 40 08             	mov    0x8(%rax),%eax
    3ce3:	89 c0                	mov    %eax,%eax
    3ce5:	48 c1 e0 05          	shl    $0x5,%rax
    3ce9:	48 89 c2             	mov    %rax,%rdx
    3cec:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    3cf0:	be 00 00 00 00       	mov    $0x0,%esi
    3cf5:	48 89 c7             	mov    %rax,%rdi
    3cf8:	e8 63 e7 ff ff       	call   2460 <memset@plt>
    3cfd:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
    3d04:	48 8b 40 10          	mov    0x10(%rax),%rax
    3d08:	8b 50 10             	mov    0x10(%rax),%edx
    3d0b:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
    3d12:	48 8b 40 10          	mov    0x10(%rax),%rax
    3d16:	8b 40 0c             	mov    0xc(%rax),%eax
    3d19:	83 c0 01             	add    $0x1,%eax
    3d1c:	89 c1                	mov    %eax,%ecx
    3d1e:	d3 ea                	shr    %cl,%edx
    3d20:	89 d1                	mov    %edx,%ecx
    3d22:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
    3d29:	48 8b 40 10          	mov    0x10(%rax),%rax
    3d2d:	8b 50 10             	mov    0x10(%rax),%edx
    3d30:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
    3d37:	48 8b 40 10          	mov    0x10(%rax),%rax
    3d3b:	8b 40 08             	mov    0x8(%rax),%eax
    3d3e:	01 c0                	add    %eax,%eax
    3d40:	83 e8 01             	sub    $0x1,%eax
    3d43:	21 d0                	and    %edx,%eax
    3d45:	85 c0                	test   %eax,%eax
    3d47:	74 07                	je     3d50 <buffer_state+0x10e5>
    3d49:	ba 01 00 00 00       	mov    $0x1,%edx
    3d4e:	eb 05                	jmp    3d55 <buffer_state+0x10ea>
    3d50:	ba 00 00 00 00       	mov    $0x0,%edx
    3d55:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
    3d5c:	48 8b 40 10          	mov    0x10(%rax),%rax
    3d60:	01 ca                	add    %ecx,%edx
    3d62:	89 50 28             	mov    %edx,0x28(%rax)
    3d65:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
    3d6c:	48 8b 40 10          	mov    0x10(%rax),%rax
    3d70:	c7 40 2c 00 00 00 00 	movl   $0x0,0x2c(%rax)
    3d77:	c7 85 3c ff ff ff 00 	movl   $0x0,-0xc4(%rbp)
    3d7e:	00 00 00 
    3d81:	e9 3a 01 00 00       	jmp    3ec0 <buffer_state+0x1255>
    3d86:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
    3d8d:	48 8b 40 10          	mov    0x10(%rax),%rax
    3d91:	48 8b 10             	mov    (%rax),%rdx
    3d94:	8b 85 3c ff ff ff    	mov    -0xc4(%rbp),%eax
    3d9a:	48 c1 e0 04          	shl    $0x4,%rax
    3d9e:	48 01 d0             	add    %rdx,%rax
    3da1:	48 8b 00             	mov    (%rax),%rax
    3da4:	48 89 45 98          	mov    %rax,-0x68(%rbp)
    3da8:	e9 01 01 00 00       	jmp    3eae <buffer_state+0x1243>
    3dad:	48 8b 45 98          	mov    -0x68(%rbp),%rax
    3db1:	48 8b 40 20          	mov    0x20(%rax),%rax
    3db5:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
    3db9:	48 8b 45 98          	mov    -0x68(%rbp),%rax
    3dbd:	8b 50 34             	mov    0x34(%rax),%edx
    3dc0:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
    3dc7:	48 8b 40 10          	mov    0x10(%rax),%rax
    3dcb:	8b 40 08             	mov    0x8(%rax),%eax
    3dce:	01 c0                	add    %eax,%eax
    3dd0:	83 e8 01             	sub    $0x1,%eax
    3dd3:	21 d0                	and    %edx,%eax
    3dd5:	89 85 5c ff ff ff    	mov    %eax,-0xa4(%rbp)
    3ddb:	8b 85 5c ff ff ff    	mov    -0xa4(%rbp),%eax
    3de1:	48 c1 e0 04          	shl    $0x4,%rax
    3de5:	48 89 c2             	mov    %rax,%rdx
    3de8:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    3dec:	48 01 d0             	add    %rdx,%rax
    3def:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    3df3:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    3df7:	8b 40 08             	mov    0x8(%rax),%eax
    3dfa:	8d 50 01             	lea    0x1(%rax),%edx
    3dfd:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    3e01:	89 50 08             	mov    %edx,0x8(%rax)
    3e04:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    3e08:	8b 50 08             	mov    0x8(%rax),%edx
    3e0b:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
    3e12:	48 8b 40 10          	mov    0x10(%rax),%rax
    3e16:	8b 40 28             	mov    0x28(%rax),%eax
    3e19:	39 c2                	cmp    %eax,%edx
    3e1b:	76 48                	jbe    3e65 <buffer_state+0x11fa>
    3e1d:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
    3e24:	48 8b 40 10          	mov    0x10(%rax),%rax
    3e28:	8b 50 2c             	mov    0x2c(%rax),%edx
    3e2b:	83 c2 01             	add    $0x1,%edx
    3e2e:	89 50 2c             	mov    %edx,0x2c(%rax)
    3e31:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    3e35:	8b 50 08             	mov    0x8(%rax),%edx
    3e38:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    3e3c:	8b 48 0c             	mov    0xc(%rax),%ecx
    3e3f:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
    3e46:	48 8b 40 10          	mov    0x10(%rax),%rax
    3e4a:	8b 40 28             	mov    0x28(%rax),%eax
    3e4d:	0f af c1             	imul   %ecx,%eax
    3e50:	39 c2                	cmp    %eax,%edx
    3e52:	76 11                	jbe    3e65 <buffer_state+0x11fa>
    3e54:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    3e58:	8b 40 0c             	mov    0xc(%rax),%eax
    3e5b:	8d 50 01             	lea    0x1(%rax),%edx
    3e5e:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    3e62:	89 50 0c             	mov    %edx,0xc(%rax)
    3e65:	48 8b 45 98          	mov    -0x68(%rbp),%rax
    3e69:	48 c7 40 18 00 00 00 	movq   $0x0,0x18(%rax)
    3e70:	00 
    3e71:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    3e75:	48 8b 10             	mov    (%rax),%rdx
    3e78:	48 8b 45 98          	mov    -0x68(%rbp),%rax
    3e7c:	48 89 50 20          	mov    %rdx,0x20(%rax)
    3e80:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    3e84:	48 8b 00             	mov    (%rax),%rax
    3e87:	48 85 c0             	test   %rax,%rax
    3e8a:	74 0f                	je     3e9b <buffer_state+0x1230>
    3e8c:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    3e90:	48 8b 00             	mov    (%rax),%rax
    3e93:	48 8b 55 98          	mov    -0x68(%rbp),%rdx
    3e97:	48 89 50 18          	mov    %rdx,0x18(%rax)
    3e9b:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    3e9f:	48 8b 55 98          	mov    -0x68(%rbp),%rdx
    3ea3:	48 89 10             	mov    %rdx,(%rax)
    3ea6:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    3eaa:	48 89 45 98          	mov    %rax,-0x68(%rbp)
    3eae:	48 83 7d 98 00       	cmpq   $0x0,-0x68(%rbp)
    3eb3:	0f 85 f4 fe ff ff    	jne    3dad <buffer_state+0x1142>
    3eb9:	83 85 3c ff ff ff 01 	addl   $0x1,-0xc4(%rbp)
    3ec0:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
    3ec7:	48 8b 40 10          	mov    0x10(%rax),%rax
    3ecb:	8b 40 08             	mov    0x8(%rax),%eax
    3ece:	39 85 3c ff ff ff    	cmp    %eax,-0xc4(%rbp)
    3ed4:	0f 82 ac fe ff ff    	jb     3d86 <buffer_state+0x111b>
    3eda:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
    3ee1:	48 8b 40 10          	mov    0x10(%rax),%rax
    3ee5:	48 8b 00             	mov    (%rax),%rax
    3ee8:	48 89 c7             	mov    %rax,%rdi
    3eeb:	e8 50 e4 ff ff       	call   2340 <free@plt>
    3ef0:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
    3ef7:	48 8b 40 10          	mov    0x10(%rax),%rax
    3efb:	8b 50 08             	mov    0x8(%rax),%edx
    3efe:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
    3f05:	48 8b 40 10          	mov    0x10(%rax),%rax
    3f09:	01 d2                	add    %edx,%edx
    3f0b:	89 50 08             	mov    %edx,0x8(%rax)
    3f0e:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
    3f15:	48 8b 40 10          	mov    0x10(%rax),%rax
    3f19:	8b 50 0c             	mov    0xc(%rax),%edx
    3f1c:	83 c2 01             	add    $0x1,%edx
    3f1f:	89 50 0c             	mov    %edx,0xc(%rax)
    3f22:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
    3f29:	48 8b 40 10          	mov    0x10(%rax),%rax
    3f2d:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
    3f31:	48 89 10             	mov    %rdx,(%rax)
    3f34:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
    3f3b:	48 8b 40 10          	mov    0x10(%rax),%rax
    3f3f:	8b 50 2c             	mov    0x2c(%rax),%edx
    3f42:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
    3f49:	48 8b 40 10          	mov    0x10(%rax),%rax
    3f4d:	8b 40 10             	mov    0x10(%rax),%eax
    3f50:	d1 e8                	shr    %eax
    3f52:	39 c2                	cmp    %eax,%edx
    3f54:	76 13                	jbe    3f69 <buffer_state+0x12fe>
    3f56:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
    3f5d:	48 8b 40 10          	mov    0x10(%rax),%rax
    3f61:	8b 40 30             	mov    0x30(%rax),%eax
    3f64:	8d 50 01             	lea    0x1(%rax),%edx
    3f67:	eb 05                	jmp    3f6e <buffer_state+0x1303>
    3f69:	ba 00 00 00 00       	mov    $0x0,%edx
    3f6e:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
    3f75:	48 8b 40 10          	mov    0x10(%rax),%rax
    3f79:	89 50 30             	mov    %edx,0x30(%rax)
    3f7c:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
    3f83:	48 8b 40 10          	mov    0x10(%rax),%rax
    3f87:	8b 40 30             	mov    0x30(%rax),%eax
    3f8a:	83 f8 01             	cmp    $0x1,%eax
    3f8d:	76 1e                	jbe    3fad <buffer_state+0x1342>
    3f8f:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
    3f96:	48 8b 40 10          	mov    0x10(%rax),%rax
    3f9a:	c7 40 34 01 00 00 00 	movl   $0x1,0x34(%rax)
    3fa1:	eb 0a                	jmp    3fad <buffer_state+0x1342>
      continue;
    3fa3:	90                   	nop
    3fa4:	eb 07                	jmp    3fad <buffer_state+0x1342>
      continue;
    3fa6:	90                   	nop
    3fa7:	eb 04                	jmp    3fad <buffer_state+0x1342>
      continue;
    3fa9:	90                   	nop
    3faa:	eb 01                	jmp    3fad <buffer_state+0x1342>
      continue;
    3fac:	90                   	nop
  for (i = 0; i < NBuffers; i++) {
    3fad:	83 85 18 ff ff ff 01 	addl   $0x1,-0xe8(%rbp)
    3fb4:	48 8b 05 1d 60 00 00 	mov    0x601d(%rip),%rax        # 9fd8 <NBuffers@Base>
    3fbb:	8b 00                	mov    (%rax),%eax
    3fbd:	39 85 18 ff ff ff    	cmp    %eax,-0xe8(%rbp)
    3fc3:	0f 8c ee ec ff ff    	jl     2cb7 <buffer_state+0x4c>
    }
  }

  // The hash table aggregation is done. Next, construct a JSON string.
  stream = open_memstream(&buf, &json_size);
    3fc9:	48 8d 95 68 ff ff ff 	lea    -0x98(%rbp),%rdx
    3fd0:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
    3fd7:	48 89 d6             	mov    %rdx,%rsi
    3fda:	48 89 c7             	mov    %rax,%rdi
    3fdd:	e8 7e e3 ff ff       	call   2360 <open_memstream@plt>
    3fe2:	48 89 45 a0          	mov    %rax,-0x60(%rbp)

  fprintf(stream, "{   "); // extra space here in case there is nothing in cache
    3fe6:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
    3fea:	48 8d 15 18 31 00 00 	lea    0x3118(%rip),%rdx        # 7109 <_fini+0xe0d>
    3ff1:	48 89 d6             	mov    %rdx,%rsi
    3ff4:	48 89 c7             	mov    %rax,%rdi
    3ff7:	b8 00 00 00 00       	mov    $0x0,%eax
    3ffc:	e8 8f e3 ff ff       	call   2390 <pg_fprintf@plt>
  HASH_ITER(hh, map, query, tmp) {
    4001:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
    4008:	48 89 85 78 ff ff ff 	mov    %rax,-0x88(%rbp)
    400f:	48 83 bd 70 ff ff ff 	cmpq   $0x0,-0x90(%rbp)
    4016:	00 
    4017:	74 0d                	je     4026 <buffer_state+0x13bb>
    4019:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
    4020:	48 8b 40 20          	mov    0x20(%rax),%rax
    4024:	eb 05                	jmp    402b <buffer_state+0x13c0>
    4026:	b8 00 00 00 00       	mov    $0x0,%eax
    402b:	48 89 45 80          	mov    %rax,-0x80(%rbp)
    402f:	e9 2d 02 00 00       	jmp    4261 <buffer_state+0x15f6>
    HASH_DEL(map, query);
    4034:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
    403b:	48 83 c0 10          	add    $0x10,%rax
    403f:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
    4043:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
    4047:	48 8b 40 08          	mov    0x8(%rax),%rax
    404b:	48 85 c0             	test   %rax,%rax
    404e:	75 46                	jne    4096 <buffer_state+0x142b>
    4050:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
    4054:	48 8b 40 10          	mov    0x10(%rax),%rax
    4058:	48 85 c0             	test   %rax,%rax
    405b:	75 39                	jne    4096 <buffer_state+0x142b>
    405d:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
    4064:	48 8b 40 10          	mov    0x10(%rax),%rax
    4068:	48 8b 00             	mov    (%rax),%rax
    406b:	48 89 c7             	mov    %rax,%rdi
    406e:	e8 cd e2 ff ff       	call   2340 <free@plt>
    4073:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
    407a:	48 8b 40 10          	mov    0x10(%rax),%rax
    407e:	48 89 c7             	mov    %rax,%rdi
    4081:	e8 ba e2 ff ff       	call   2340 <free@plt>
    4086:	48 c7 85 70 ff ff ff 	movq   $0x0,-0x90(%rbp)
    408d:	00 00 00 00 
    4091:	e9 7a 01 00 00       	jmp    4210 <buffer_state+0x15a5>
    4096:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
    409d:	48 8b 40 10          	mov    0x10(%rax),%rax
    40a1:	48 8b 40 18          	mov    0x18(%rax),%rax
    40a5:	48 39 45 a8          	cmp    %rax,-0x58(%rbp)
    40a9:	75 2c                	jne    40d7 <buffer_state+0x146c>
    40ab:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
    40af:	48 8b 50 08          	mov    0x8(%rax),%rdx
    40b3:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
    40ba:	48 8b 40 10          	mov    0x10(%rax),%rax
    40be:	48 8b 40 20          	mov    0x20(%rax),%rax
    40c2:	48 89 c1             	mov    %rax,%rcx
    40c5:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
    40cc:	48 8b 40 10          	mov    0x10(%rax),%rax
    40d0:	48 01 ca             	add    %rcx,%rdx
    40d3:	48 89 50 18          	mov    %rdx,0x18(%rax)
    40d7:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
    40db:	48 8b 40 08          	mov    0x8(%rax),%rax
    40df:	48 85 c0             	test   %rax,%rax
    40e2:	74 28                	je     410c <buffer_state+0x14a1>
    40e4:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
    40e8:	48 8b 50 08          	mov    0x8(%rax),%rdx
    40ec:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
    40f3:	48 8b 40 10          	mov    0x10(%rax),%rax
    40f7:	48 8b 40 20          	mov    0x20(%rax),%rax
    40fb:	48 01 c2             	add    %rax,%rdx
    40fe:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
    4102:	48 8b 40 10          	mov    0x10(%rax),%rax
    4106:	48 89 42 10          	mov    %rax,0x10(%rdx)
    410a:	eb 0f                	jmp    411b <buffer_state+0x14b0>
    410c:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
    4110:	48 8b 40 10          	mov    0x10(%rax),%rax
    4114:	48 89 85 70 ff ff ff 	mov    %rax,-0x90(%rbp)
    411b:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
    411f:	48 8b 40 10          	mov    0x10(%rax),%rax
    4123:	48 85 c0             	test   %rax,%rax
    4126:	74 26                	je     414e <buffer_state+0x14e3>
    4128:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
    412c:	48 8b 50 10          	mov    0x10(%rax),%rdx
    4130:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
    4137:	48 8b 40 10          	mov    0x10(%rax),%rax
    413b:	48 8b 40 20          	mov    0x20(%rax),%rax
    413f:	48 01 c2             	add    %rax,%rdx
    4142:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
    4146:	48 8b 40 08          	mov    0x8(%rax),%rax
    414a:	48 89 42 08          	mov    %rax,0x8(%rdx)
    414e:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
    4152:	8b 50 34             	mov    0x34(%rax),%edx
    4155:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
    415c:	48 8b 40 10          	mov    0x10(%rax),%rax
    4160:	8b 40 08             	mov    0x8(%rax),%eax
    4163:	83 e8 01             	sub    $0x1,%eax
    4166:	21 d0                	and    %edx,%eax
    4168:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%rbp)
    416e:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
    4175:	48 8b 40 10          	mov    0x10(%rax),%rax
    4179:	48 8b 10             	mov    (%rax),%rdx
    417c:	8b 85 40 ff ff ff    	mov    -0xc0(%rbp),%eax
    4182:	48 c1 e0 04          	shl    $0x4,%rax
    4186:	48 01 d0             	add    %rdx,%rax
    4189:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
    418d:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
    4191:	8b 40 08             	mov    0x8(%rax),%eax
    4194:	8d 50 ff             	lea    -0x1(%rax),%edx
    4197:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
    419b:	89 50 08             	mov    %edx,0x8(%rax)
    419e:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
    41a2:	48 8b 00             	mov    (%rax),%rax
    41a5:	48 39 45 a8          	cmp    %rax,-0x58(%rbp)
    41a9:	75 0f                	jne    41ba <buffer_state+0x154f>
    41ab:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
    41af:	48 8b 50 20          	mov    0x20(%rax),%rdx
    41b3:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
    41b7:	48 89 10             	mov    %rdx,(%rax)
    41ba:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
    41be:	48 8b 40 18          	mov    0x18(%rax),%rax
    41c2:	48 85 c0             	test   %rax,%rax
    41c5:	74 14                	je     41db <buffer_state+0x1570>
    41c7:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
    41cb:	48 8b 40 18          	mov    0x18(%rax),%rax
    41cf:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
    41d3:	48 8b 52 20          	mov    0x20(%rdx),%rdx
    41d7:	48 89 50 20          	mov    %rdx,0x20(%rax)
    41db:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
    41df:	48 8b 40 20          	mov    0x20(%rax),%rax
    41e3:	48 85 c0             	test   %rax,%rax
    41e6:	74 14                	je     41fc <buffer_state+0x1591>
    41e8:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
    41ec:	48 8b 40 20          	mov    0x20(%rax),%rax
    41f0:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
    41f4:	48 8b 52 18          	mov    0x18(%rdx),%rdx
    41f8:	48 89 50 18          	mov    %rdx,0x18(%rax)
    41fc:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
    4203:	48 8b 40 10          	mov    0x10(%rax),%rax
    4207:	8b 50 10             	mov    0x10(%rax),%edx
    420a:	83 ea 01             	sub    $0x1,%edx
    420d:	89 50 10             	mov    %edx,0x10(%rax)
    fprintf(stream, "\"%s\": %d,", query->key, query->count);
    4210:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
    4217:	8b 48 08             	mov    0x8(%rax),%ecx
    421a:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
    4221:	48 8b 10             	mov    (%rax),%rdx
    4224:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
    4228:	48 8d 35 df 2e 00 00 	lea    0x2edf(%rip),%rsi        # 710e <_fini+0xe12>
    422f:	48 89 c7             	mov    %rax,%rdi
    4232:	b8 00 00 00 00       	mov    $0x0,%eax
    4237:	e8 54 e1 ff ff       	call   2390 <pg_fprintf@plt>
  HASH_ITER(hh, map, query, tmp) {
    423c:	48 8b 45 80          	mov    -0x80(%rbp),%rax
    4240:	48 89 85 78 ff ff ff 	mov    %rax,-0x88(%rbp)
    4247:	48 83 7d 80 00       	cmpq   $0x0,-0x80(%rbp)
    424c:	74 0a                	je     4258 <buffer_state+0x15ed>
    424e:	48 8b 45 80          	mov    -0x80(%rbp),%rax
    4252:	48 8b 40 20          	mov    0x20(%rax),%rax
    4256:	eb 05                	jmp    425d <buffer_state+0x15f2>
    4258:	b8 00 00 00 00       	mov    $0x0,%eax
    425d:	48 89 45 80          	mov    %rax,-0x80(%rbp)
    4261:	48 83 bd 78 ff ff ff 	cmpq   $0x0,-0x88(%rbp)
    4268:	00 
    4269:	0f 85 c5 fd ff ff    	jne    4034 <buffer_state+0x13c9>
  }
  fprintf(stream, "}\n");
    426f:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
    4273:	48 8d 15 9e 2e 00 00 	lea    0x2e9e(%rip),%rdx        # 7118 <_fini+0xe1c>
    427a:	48 89 d6             	mov    %rdx,%rsi
    427d:	48 89 c7             	mov    %rax,%rdi
    4280:	b8 00 00 00 00       	mov    $0x0,%eax
    4285:	e8 06 e1 ff ff       	call   2390 <pg_fprintf@plt>
  fclose(stream);
    428a:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
    428e:	48 89 c7             	mov    %rax,%rdi
    4291:	e8 6a e1 ff ff       	call   2400 <fclose@plt>

  // Replace the last trailing comma with a space.
  buf[json_size-3] = ' ';
    4296:	48 8b 95 60 ff ff ff 	mov    -0xa0(%rbp),%rdx
    429d:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
    42a4:	48 83 e8 03          	sub    $0x3,%rax
    42a8:	48 01 d0             	add    %rdx,%rax
    42ab:	c6 00 20             	movb   $0x20,(%rax)
  return buf;
    42ae:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax

}
    42b5:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    42b9:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
    42c0:	00 00 
    42c2:	74 05                	je     42c9 <buffer_state+0x165e>
    42c4:	e8 67 e1 ff ff       	call   2430 <__stack_chk_fail@plt>
    42c9:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
    42cd:	c9                   	leave  
    42ce:	c3                   	ret    

00000000000042cf <set_arm_options>:


// Set the planner hint options to the correct one for the passed-in arm
// index. Should be called with the `save_arm_options` macro so we don't
// blast-away the user's config.
static void set_arm_options(int arm) {
    42cf:	f3 0f 1e fa          	endbr64 
    42d3:	55                   	push   %rbp
    42d4:	48 89 e5             	mov    %rsp,%rbp
    42d7:	48 83 ec 10          	sub    $0x10,%rsp
    42db:	89 7d fc             	mov    %edi,-0x4(%rbp)
  enable_hashjoin = false;
    42de:	48 8b 05 eb 5c 00 00 	mov    0x5ceb(%rip),%rax        # 9fd0 <enable_hashjoin@Base>
    42e5:	c6 00 00             	movb   $0x0,(%rax)
  enable_mergejoin = false;
    42e8:	48 8b 05 b9 5c 00 00 	mov    0x5cb9(%rip),%rax        # 9fa8 <enable_mergejoin@Base>
    42ef:	c6 00 00             	movb   $0x0,(%rax)
  enable_nestloop = false;
    42f2:	48 8b 05 f7 5c 00 00 	mov    0x5cf7(%rip),%rax        # 9ff0 <enable_nestloop@Base>
    42f9:	c6 00 00             	movb   $0x0,(%rax)
  enable_indexscan = false;
    42fc:	48 8b 05 ad 5c 00 00 	mov    0x5cad(%rip),%rax        # 9fb0 <enable_indexscan@Base>
    4303:	c6 00 00             	movb   $0x0,(%rax)
  enable_seqscan = false;
    4306:	48 8b 05 63 5c 00 00 	mov    0x5c63(%rip),%rax        # 9f70 <enable_seqscan@Base>
    430d:	c6 00 00             	movb   $0x0,(%rax)
  enable_indexonlyscan = false;
    4310:	48 8b 05 71 5c 00 00 	mov    0x5c71(%rip),%rax        # 9f88 <enable_indexonlyscan@Base>
    4317:	c6 00 00             	movb   $0x0,(%rax)
  
  switch (arm) {
    431a:	83 7d fc 19          	cmpl   $0x19,-0x4(%rbp)
    431e:	0f 87 6a 04 00 00    	ja     478e <set_arm_options+0x4bf>
    4324:	8b 45 fc             	mov    -0x4(%rbp),%eax
    4327:	48 8d 14 85 00 00 00 	lea    0x0(,%rax,4),%rdx
    432e:	00 
    432f:	48 8d 05 7a 2e 00 00 	lea    0x2e7a(%rip),%rax        # 71b0 <_fini+0xeb4>
    4336:	8b 04 02             	mov    (%rdx,%rax,1),%eax
    4339:	48 98                	cltq   
    433b:	48 8d 15 6e 2e 00 00 	lea    0x2e6e(%rip),%rdx        # 71b0 <_fini+0xeb4>
    4342:	48 01 d0             	add    %rdx,%rax
    4345:	3e ff e0             	notrack jmp *%rax
  case 0:
    enable_hashjoin = true;
    4348:	48 8b 05 81 5c 00 00 	mov    0x5c81(%rip),%rax        # 9fd0 <enable_hashjoin@Base>
    434f:	c6 00 01             	movb   $0x1,(%rax)
    enable_indexscan = true;
    4352:	48 8b 05 57 5c 00 00 	mov    0x5c57(%rip),%rax        # 9fb0 <enable_indexscan@Base>
    4359:	c6 00 01             	movb   $0x1,(%rax)
    enable_mergejoin = true;
    435c:	48 8b 05 45 5c 00 00 	mov    0x5c45(%rip),%rax        # 9fa8 <enable_mergejoin@Base>
    4363:	c6 00 01             	movb   $0x1,(%rax)
    enable_nestloop = true;
    4366:	48 8b 05 83 5c 00 00 	mov    0x5c83(%rip),%rax        # 9ff0 <enable_nestloop@Base>
    436d:	c6 00 01             	movb   $0x1,(%rax)
    enable_seqscan = true;
    4370:	48 8b 05 f9 5b 00 00 	mov    0x5bf9(%rip),%rax        # 9f70 <enable_seqscan@Base>
    4377:	c6 00 01             	movb   $0x1,(%rax)
    enable_indexonlyscan = true;
    437a:	48 8b 05 07 5c 00 00 	mov    0x5c07(%rip),%rax        # 9f88 <enable_indexonlyscan@Base>
    4381:	c6 00 01             	movb   $0x1,(%rax)
    break;
    4384:	e9 54 04 00 00       	jmp    47dd <set_arm_options+0x50e>
    
  case 1: 
    enable_hashjoin = true; 
    4389:	48 8b 05 40 5c 00 00 	mov    0x5c40(%rip),%rax        # 9fd0 <enable_hashjoin@Base>
    4390:	c6 00 01             	movb   $0x1,(%rax)
    enable_indexonlyscan = true; 
    4393:	48 8b 05 ee 5b 00 00 	mov    0x5bee(%rip),%rax        # 9f88 <enable_indexonlyscan@Base>
    439a:	c6 00 01             	movb   $0x1,(%rax)
    enable_indexscan = true; 
    439d:	48 8b 05 0c 5c 00 00 	mov    0x5c0c(%rip),%rax        # 9fb0 <enable_indexscan@Base>
    43a4:	c6 00 01             	movb   $0x1,(%rax)
    enable_mergejoin = true; 
    43a7:	48 8b 05 fa 5b 00 00 	mov    0x5bfa(%rip),%rax        # 9fa8 <enable_mergejoin@Base>
    43ae:	c6 00 01             	movb   $0x1,(%rax)
    enable_seqscan = true; 
    43b1:	48 8b 05 b8 5b 00 00 	mov    0x5bb8(%rip),%rax        # 9f70 <enable_seqscan@Base>
    43b8:	c6 00 01             	movb   $0x1,(%rax)
    break;
    43bb:	e9 1d 04 00 00       	jmp    47dd <set_arm_options+0x50e>
  case 2: 
    enable_hashjoin = true; 
    43c0:	48 8b 05 09 5c 00 00 	mov    0x5c09(%rip),%rax        # 9fd0 <enable_hashjoin@Base>
    43c7:	c6 00 01             	movb   $0x1,(%rax)
    enable_indexonlyscan = true; 
    43ca:	48 8b 05 b7 5b 00 00 	mov    0x5bb7(%rip),%rax        # 9f88 <enable_indexonlyscan@Base>
    43d1:	c6 00 01             	movb   $0x1,(%rax)
    enable_nestloop = true; 
    43d4:	48 8b 05 15 5c 00 00 	mov    0x5c15(%rip),%rax        # 9ff0 <enable_nestloop@Base>
    43db:	c6 00 01             	movb   $0x1,(%rax)
    enable_seqscan = true; 
    43de:	48 8b 05 8b 5b 00 00 	mov    0x5b8b(%rip),%rax        # 9f70 <enable_seqscan@Base>
    43e5:	c6 00 01             	movb   $0x1,(%rax)
    break;
    43e8:	e9 f0 03 00 00       	jmp    47dd <set_arm_options+0x50e>
  case 3: 
    enable_hashjoin = true; 
    43ed:	48 8b 05 dc 5b 00 00 	mov    0x5bdc(%rip),%rax        # 9fd0 <enable_hashjoin@Base>
    43f4:	c6 00 01             	movb   $0x1,(%rax)
    enable_indexonlyscan = true; 
    43f7:	48 8b 05 8a 5b 00 00 	mov    0x5b8a(%rip),%rax        # 9f88 <enable_indexonlyscan@Base>
    43fe:	c6 00 01             	movb   $0x1,(%rax)
    enable_seqscan = true; 
    4401:	48 8b 05 68 5b 00 00 	mov    0x5b68(%rip),%rax        # 9f70 <enable_seqscan@Base>
    4408:	c6 00 01             	movb   $0x1,(%rax)
    break;
    440b:	e9 cd 03 00 00       	jmp    47dd <set_arm_options+0x50e>
  case 4: 
    enable_hashjoin = true; 
    4410:	48 8b 05 b9 5b 00 00 	mov    0x5bb9(%rip),%rax        # 9fd0 <enable_hashjoin@Base>
    4417:	c6 00 01             	movb   $0x1,(%rax)
    enable_indexonlyscan = true; 
    441a:	48 8b 05 67 5b 00 00 	mov    0x5b67(%rip),%rax        # 9f88 <enable_indexonlyscan@Base>
    4421:	c6 00 01             	movb   $0x1,(%rax)
    enable_indexscan = true; 
    4424:	48 8b 05 85 5b 00 00 	mov    0x5b85(%rip),%rax        # 9fb0 <enable_indexscan@Base>
    442b:	c6 00 01             	movb   $0x1,(%rax)
    enable_nestloop = true; 
    442e:	48 8b 05 bb 5b 00 00 	mov    0x5bbb(%rip),%rax        # 9ff0 <enable_nestloop@Base>
    4435:	c6 00 01             	movb   $0x1,(%rax)
    enable_seqscan = true; 
    4438:	48 8b 05 31 5b 00 00 	mov    0x5b31(%rip),%rax        # 9f70 <enable_seqscan@Base>
    443f:	c6 00 01             	movb   $0x1,(%rax)
    break;
    4442:	e9 96 03 00 00       	jmp    47dd <set_arm_options+0x50e>
  case 5: 
    enable_hashjoin = true; 
    4447:	48 8b 05 82 5b 00 00 	mov    0x5b82(%rip),%rax        # 9fd0 <enable_hashjoin@Base>
    444e:	c6 00 01             	movb   $0x1,(%rax)
    enable_indexonlyscan = true; 
    4451:	48 8b 05 30 5b 00 00 	mov    0x5b30(%rip),%rax        # 9f88 <enable_indexonlyscan@Base>
    4458:	c6 00 01             	movb   $0x1,(%rax)
    enable_mergejoin = true; 
    445b:	48 8b 05 46 5b 00 00 	mov    0x5b46(%rip),%rax        # 9fa8 <enable_mergejoin@Base>
    4462:	c6 00 01             	movb   $0x1,(%rax)
    enable_nestloop = true; 
    4465:	48 8b 05 84 5b 00 00 	mov    0x5b84(%rip),%rax        # 9ff0 <enable_nestloop@Base>
    446c:	c6 00 01             	movb   $0x1,(%rax)
    break;
    446f:	e9 69 03 00 00       	jmp    47dd <set_arm_options+0x50e>
  case 6:
    enable_hashjoin = true; 
    4474:	48 8b 05 55 5b 00 00 	mov    0x5b55(%rip),%rax        # 9fd0 <enable_hashjoin@Base>
    447b:	c6 00 01             	movb   $0x1,(%rax)
    enable_indexscan = true; 
    447e:	48 8b 05 2b 5b 00 00 	mov    0x5b2b(%rip),%rax        # 9fb0 <enable_indexscan@Base>
    4485:	c6 00 01             	movb   $0x1,(%rax)
    enable_mergejoin = true; 
    4488:	48 8b 05 19 5b 00 00 	mov    0x5b19(%rip),%rax        # 9fa8 <enable_mergejoin@Base>
    448f:	c6 00 01             	movb   $0x1,(%rax)
    enable_nestloop = true; 
    4492:	48 8b 05 57 5b 00 00 	mov    0x5b57(%rip),%rax        # 9ff0 <enable_nestloop@Base>
    4499:	c6 00 01             	movb   $0x1,(%rax)
    break;
    449c:	e9 3c 03 00 00       	jmp    47dd <set_arm_options+0x50e>
  case 7: 
    enable_indexonlyscan = true; 
    44a1:	48 8b 05 e0 5a 00 00 	mov    0x5ae0(%rip),%rax        # 9f88 <enable_indexonlyscan@Base>
    44a8:	c6 00 01             	movb   $0x1,(%rax)
    enable_mergejoin = true; 
    44ab:	48 8b 05 f6 5a 00 00 	mov    0x5af6(%rip),%rax        # 9fa8 <enable_mergejoin@Base>
    44b2:	c6 00 01             	movb   $0x1,(%rax)
    enable_nestloop = true; 
    44b5:	48 8b 05 34 5b 00 00 	mov    0x5b34(%rip),%rax        # 9ff0 <enable_nestloop@Base>
    44bc:	c6 00 01             	movb   $0x1,(%rax)
    break;
    44bf:	e9 19 03 00 00       	jmp    47dd <set_arm_options+0x50e>
  case 8: 
    enable_hashjoin = true; 
    44c4:	48 8b 05 05 5b 00 00 	mov    0x5b05(%rip),%rax        # 9fd0 <enable_hashjoin@Base>
    44cb:	c6 00 01             	movb   $0x1,(%rax)
    enable_indexonlyscan = true; 
    44ce:	48 8b 05 b3 5a 00 00 	mov    0x5ab3(%rip),%rax        # 9f88 <enable_indexonlyscan@Base>
    44d5:	c6 00 01             	movb   $0x1,(%rax)
    break;
    44d8:	e9 00 03 00 00       	jmp    47dd <set_arm_options+0x50e>
  case 9: 
    enable_hashjoin = true; 
    44dd:	48 8b 05 ec 5a 00 00 	mov    0x5aec(%rip),%rax        # 9fd0 <enable_hashjoin@Base>
    44e4:	c6 00 01             	movb   $0x1,(%rax)
    enable_indexonlyscan = true; 
    44e7:	48 8b 05 9a 5a 00 00 	mov    0x5a9a(%rip),%rax        # 9f88 <enable_indexonlyscan@Base>
    44ee:	c6 00 01             	movb   $0x1,(%rax)
    enable_indexscan = true; 
    44f1:	48 8b 05 b8 5a 00 00 	mov    0x5ab8(%rip),%rax        # 9fb0 <enable_indexscan@Base>
    44f8:	c6 00 01             	movb   $0x1,(%rax)
    enable_nestloop = true; 
    44fb:	48 8b 05 ee 5a 00 00 	mov    0x5aee(%rip),%rax        # 9ff0 <enable_nestloop@Base>
    4502:	c6 00 01             	movb   $0x1,(%rax)
    break;
    4505:	e9 d3 02 00 00       	jmp    47dd <set_arm_options+0x50e>
  case 10:
    enable_hashjoin = true; 
    450a:	48 8b 05 bf 5a 00 00 	mov    0x5abf(%rip),%rax        # 9fd0 <enable_hashjoin@Base>
    4511:	c6 00 01             	movb   $0x1,(%rax)
    enable_indexonlyscan = true; 
    4514:	48 8b 05 6d 5a 00 00 	mov    0x5a6d(%rip),%rax        # 9f88 <enable_indexonlyscan@Base>
    451b:	c6 00 01             	movb   $0x1,(%rax)
    enable_indexscan = true; 
    451e:	48 8b 05 8b 5a 00 00 	mov    0x5a8b(%rip),%rax        # 9fb0 <enable_indexscan@Base>
    4525:	c6 00 01             	movb   $0x1,(%rax)
    enable_seqscan = true; 
    4528:	48 8b 05 41 5a 00 00 	mov    0x5a41(%rip),%rax        # 9f70 <enable_seqscan@Base>
    452f:	c6 00 01             	movb   $0x1,(%rax)
    break;
    4532:	e9 a6 02 00 00       	jmp    47dd <set_arm_options+0x50e>
  case 11: 
    enable_hashjoin = true; 
    4537:	48 8b 05 92 5a 00 00 	mov    0x5a92(%rip),%rax        # 9fd0 <enable_hashjoin@Base>
    453e:	c6 00 01             	movb   $0x1,(%rax)
    enable_indexonlyscan = true; 
    4541:	48 8b 05 40 5a 00 00 	mov    0x5a40(%rip),%rax        # 9f88 <enable_indexonlyscan@Base>
    4548:	c6 00 01             	movb   $0x1,(%rax)
    enable_mergejoin = true; 
    454b:	48 8b 05 56 5a 00 00 	mov    0x5a56(%rip),%rax        # 9fa8 <enable_mergejoin@Base>
    4552:	c6 00 01             	movb   $0x1,(%rax)
    enable_nestloop = true; 
    4555:	48 8b 05 94 5a 00 00 	mov    0x5a94(%rip),%rax        # 9ff0 <enable_nestloop@Base>
    455c:	c6 00 01             	movb   $0x1,(%rax)
    enable_seqscan = true; 
    455f:	48 8b 05 0a 5a 00 00 	mov    0x5a0a(%rip),%rax        # 9f70 <enable_seqscan@Base>
    4566:	c6 00 01             	movb   $0x1,(%rax)
    break;
    4569:	e9 6f 02 00 00       	jmp    47dd <set_arm_options+0x50e>
  case 12: 
    enable_hashjoin = true; 
    456e:	48 8b 05 5b 5a 00 00 	mov    0x5a5b(%rip),%rax        # 9fd0 <enable_hashjoin@Base>
    4575:	c6 00 01             	movb   $0x1,(%rax)
    enable_indexonlyscan = true; 
    4578:	48 8b 05 09 5a 00 00 	mov    0x5a09(%rip),%rax        # 9f88 <enable_indexonlyscan@Base>
    457f:	c6 00 01             	movb   $0x1,(%rax)
    enable_mergejoin = true; 
    4582:	48 8b 05 1f 5a 00 00 	mov    0x5a1f(%rip),%rax        # 9fa8 <enable_mergejoin@Base>
    4589:	c6 00 01             	movb   $0x1,(%rax)
    enable_seqscan = true; 
    458c:	48 8b 05 dd 59 00 00 	mov    0x59dd(%rip),%rax        # 9f70 <enable_seqscan@Base>
    4593:	c6 00 01             	movb   $0x1,(%rax)
    break;
    4596:	e9 42 02 00 00       	jmp    47dd <set_arm_options+0x50e>
  case 13: 
    enable_hashjoin = true; 
    459b:	48 8b 05 2e 5a 00 00 	mov    0x5a2e(%rip),%rax        # 9fd0 <enable_hashjoin@Base>
    45a2:	c6 00 01             	movb   $0x1,(%rax)
    enable_indexscan = true; 
    45a5:	48 8b 05 04 5a 00 00 	mov    0x5a04(%rip),%rax        # 9fb0 <enable_indexscan@Base>
    45ac:	c6 00 01             	movb   $0x1,(%rax)
    enable_nestloop = true; 
    45af:	48 8b 05 3a 5a 00 00 	mov    0x5a3a(%rip),%rax        # 9ff0 <enable_nestloop@Base>
    45b6:	c6 00 01             	movb   $0x1,(%rax)
    break;
    45b9:	e9 1f 02 00 00       	jmp    47dd <set_arm_options+0x50e>
  case 14: 
    enable_indexscan = true; 
    45be:	48 8b 05 eb 59 00 00 	mov    0x59eb(%rip),%rax        # 9fb0 <enable_indexscan@Base>
    45c5:	c6 00 01             	movb   $0x1,(%rax)
    enable_nestloop = true; 
    45c8:	48 8b 05 21 5a 00 00 	mov    0x5a21(%rip),%rax        # 9ff0 <enable_nestloop@Base>
    45cf:	c6 00 01             	movb   $0x1,(%rax)
    break;
    45d2:	e9 06 02 00 00       	jmp    47dd <set_arm_options+0x50e>
  case 15: 
    enable_indexscan = true; 
    45d7:	48 8b 05 d2 59 00 00 	mov    0x59d2(%rip),%rax        # 9fb0 <enable_indexscan@Base>
    45de:	c6 00 01             	movb   $0x1,(%rax)
    enable_mergejoin = true; 
    45e1:	48 8b 05 c0 59 00 00 	mov    0x59c0(%rip),%rax        # 9fa8 <enable_mergejoin@Base>
    45e8:	c6 00 01             	movb   $0x1,(%rax)
    enable_nestloop = true; 
    45eb:	48 8b 05 fe 59 00 00 	mov    0x59fe(%rip),%rax        # 9ff0 <enable_nestloop@Base>
    45f2:	c6 00 01             	movb   $0x1,(%rax)
    enable_seqscan = true; 
    45f5:	48 8b 05 74 59 00 00 	mov    0x5974(%rip),%rax        # 9f70 <enable_seqscan@Base>
    45fc:	c6 00 01             	movb   $0x1,(%rax)
    break;
    45ff:	e9 d9 01 00 00       	jmp    47dd <set_arm_options+0x50e>
  case 16: 
    enable_indexonlyscan = true; 
    4604:	48 8b 05 7d 59 00 00 	mov    0x597d(%rip),%rax        # 9f88 <enable_indexonlyscan@Base>
    460b:	c6 00 01             	movb   $0x1,(%rax)
    enable_indexscan = true; 
    460e:	48 8b 05 9b 59 00 00 	mov    0x599b(%rip),%rax        # 9fb0 <enable_indexscan@Base>
    4615:	c6 00 01             	movb   $0x1,(%rax)
    enable_nestloop = true; 
    4618:	48 8b 05 d1 59 00 00 	mov    0x59d1(%rip),%rax        # 9ff0 <enable_nestloop@Base>
    461f:	c6 00 01             	movb   $0x1,(%rax)
    break;
    4622:	e9 b6 01 00 00       	jmp    47dd <set_arm_options+0x50e>
  case 17: 
    enable_hashjoin = true; 
    4627:	48 8b 05 a2 59 00 00 	mov    0x59a2(%rip),%rax        # 9fd0 <enable_hashjoin@Base>
    462e:	c6 00 01             	movb   $0x1,(%rax)
    enable_indexonlyscan = true; 
    4631:	48 8b 05 50 59 00 00 	mov    0x5950(%rip),%rax        # 9f88 <enable_indexonlyscan@Base>
    4638:	c6 00 01             	movb   $0x1,(%rax)
    enable_indexscan = true; 
    463b:	48 8b 05 6e 59 00 00 	mov    0x596e(%rip),%rax        # 9fb0 <enable_indexscan@Base>
    4642:	c6 00 01             	movb   $0x1,(%rax)
    enable_mergejoin = true; 
    4645:	48 8b 05 5c 59 00 00 	mov    0x595c(%rip),%rax        # 9fa8 <enable_mergejoin@Base>
    464c:	c6 00 01             	movb   $0x1,(%rax)
    enable_nestloop = true; 
    464f:	48 8b 05 9a 59 00 00 	mov    0x599a(%rip),%rax        # 9ff0 <enable_nestloop@Base>
    4656:	c6 00 01             	movb   $0x1,(%rax)
    break;
    4659:	e9 7f 01 00 00       	jmp    47dd <set_arm_options+0x50e>
  case 18: 
    enable_indexscan = true; 
    465e:	48 8b 05 4b 59 00 00 	mov    0x594b(%rip),%rax        # 9fb0 <enable_indexscan@Base>
    4665:	c6 00 01             	movb   $0x1,(%rax)
    enable_mergejoin = true; 
    4668:	48 8b 05 39 59 00 00 	mov    0x5939(%rip),%rax        # 9fa8 <enable_mergejoin@Base>
    466f:	c6 00 01             	movb   $0x1,(%rax)
    enable_nestloop = true; 
    4672:	48 8b 05 77 59 00 00 	mov    0x5977(%rip),%rax        # 9ff0 <enable_nestloop@Base>
    4679:	c6 00 01             	movb   $0x1,(%rax)
    break;
    467c:	e9 5c 01 00 00       	jmp    47dd <set_arm_options+0x50e>
  case 19: 
    enable_indexonlyscan = true; 
    4681:	48 8b 05 00 59 00 00 	mov    0x5900(%rip),%rax        # 9f88 <enable_indexonlyscan@Base>
    4688:	c6 00 01             	movb   $0x1,(%rax)
    enable_mergejoin = true; 
    468b:	48 8b 05 16 59 00 00 	mov    0x5916(%rip),%rax        # 9fa8 <enable_mergejoin@Base>
    4692:	c6 00 01             	movb   $0x1,(%rax)
    enable_nestloop = true; 
    4695:	48 8b 05 54 59 00 00 	mov    0x5954(%rip),%rax        # 9ff0 <enable_nestloop@Base>
    469c:	c6 00 01             	movb   $0x1,(%rax)
    enable_seqscan = true; 
    469f:	48 8b 05 ca 58 00 00 	mov    0x58ca(%rip),%rax        # 9f70 <enable_seqscan@Base>
    46a6:	c6 00 01             	movb   $0x1,(%rax)
    break;
    46a9:	e9 2f 01 00 00       	jmp    47dd <set_arm_options+0x50e>
  case 20: 
    enable_indexonlyscan = true; 
    46ae:	48 8b 05 d3 58 00 00 	mov    0x58d3(%rip),%rax        # 9f88 <enable_indexonlyscan@Base>
    46b5:	c6 00 01             	movb   $0x1,(%rax)
    enable_indexscan = true; 
    46b8:	48 8b 05 f1 58 00 00 	mov    0x58f1(%rip),%rax        # 9fb0 <enable_indexscan@Base>
    46bf:	c6 00 01             	movb   $0x1,(%rax)
    enable_nestloop = true; 
    46c2:	48 8b 05 27 59 00 00 	mov    0x5927(%rip),%rax        # 9ff0 <enable_nestloop@Base>
    46c9:	c6 00 01             	movb   $0x1,(%rax)
    enable_seqscan = true; 
    46cc:	48 8b 05 9d 58 00 00 	mov    0x589d(%rip),%rax        # 9f70 <enable_seqscan@Base>
    46d3:	c6 00 01             	movb   $0x1,(%rax)
    break;
    46d6:	e9 02 01 00 00       	jmp    47dd <set_arm_options+0x50e>
  case 21: 
    enable_hashjoin = true; 
    46db:	48 8b 05 ee 58 00 00 	mov    0x58ee(%rip),%rax        # 9fd0 <enable_hashjoin@Base>
    46e2:	c6 00 01             	movb   $0x1,(%rax)
    enable_indexonlyscan = true; 
    46e5:	48 8b 05 9c 58 00 00 	mov    0x589c(%rip),%rax        # 9f88 <enable_indexonlyscan@Base>
    46ec:	c6 00 01             	movb   $0x1,(%rax)
    enable_indexscan = true; 
    46ef:	48 8b 05 ba 58 00 00 	mov    0x58ba(%rip),%rax        # 9fb0 <enable_indexscan@Base>
    46f6:	c6 00 01             	movb   $0x1,(%rax)
    enable_mergejoin = true; 
    46f9:	48 8b 05 a8 58 00 00 	mov    0x58a8(%rip),%rax        # 9fa8 <enable_mergejoin@Base>
    4700:	c6 00 01             	movb   $0x1,(%rax)
    break;
    4703:	e9 d5 00 00 00       	jmp    47dd <set_arm_options+0x50e>
  case 22: 
    enable_hashjoin = true; 
    4708:	48 8b 05 c1 58 00 00 	mov    0x58c1(%rip),%rax        # 9fd0 <enable_hashjoin@Base>
    470f:	c6 00 01             	movb   $0x1,(%rax)
    enable_indexonlyscan = true; 
    4712:	48 8b 05 6f 58 00 00 	mov    0x586f(%rip),%rax        # 9f88 <enable_indexonlyscan@Base>
    4719:	c6 00 01             	movb   $0x1,(%rax)
    enable_mergejoin = true; 
    471c:	48 8b 05 85 58 00 00 	mov    0x5885(%rip),%rax        # 9fa8 <enable_mergejoin@Base>
    4723:	c6 00 01             	movb   $0x1,(%rax)
    break;
    4726:	e9 b2 00 00 00       	jmp    47dd <set_arm_options+0x50e>
  case 23: 
    enable_hashjoin = true; 
    472b:	48 8b 05 9e 58 00 00 	mov    0x589e(%rip),%rax        # 9fd0 <enable_hashjoin@Base>
    4732:	c6 00 01             	movb   $0x1,(%rax)
    enable_indexscan = true; 
    4735:	48 8b 05 74 58 00 00 	mov    0x5874(%rip),%rax        # 9fb0 <enable_indexscan@Base>
    473c:	c6 00 01             	movb   $0x1,(%rax)
    enable_nestloop = true; 
    473f:	48 8b 05 aa 58 00 00 	mov    0x58aa(%rip),%rax        # 9ff0 <enable_nestloop@Base>
    4746:	c6 00 01             	movb   $0x1,(%rax)
    enable_seqscan = true; 
    4749:	48 8b 05 20 58 00 00 	mov    0x5820(%rip),%rax        # 9f70 <enable_seqscan@Base>
    4750:	c6 00 01             	movb   $0x1,(%rax)
    break;
    4753:	e9 85 00 00 00       	jmp    47dd <set_arm_options+0x50e>
  case 24: 
    enable_hashjoin = true; 
    4758:	48 8b 05 71 58 00 00 	mov    0x5871(%rip),%rax        # 9fd0 <enable_hashjoin@Base>
    475f:	c6 00 01             	movb   $0x1,(%rax)
    enable_indexscan = true; 
    4762:	48 8b 05 47 58 00 00 	mov    0x5847(%rip),%rax        # 9fb0 <enable_indexscan@Base>
    4769:	c6 00 01             	movb   $0x1,(%rax)
    break;
    476c:	eb 6f                	jmp    47dd <set_arm_options+0x50e>
  case 25: 
    enable_hashjoin = true; 
    476e:	48 8b 05 5b 58 00 00 	mov    0x585b(%rip),%rax        # 9fd0 <enable_hashjoin@Base>
    4775:	c6 00 01             	movb   $0x1,(%rax)
    enable_indexonlyscan = true; 
    4778:	48 8b 05 09 58 00 00 	mov    0x5809(%rip),%rax        # 9f88 <enable_indexonlyscan@Base>
    477f:	c6 00 01             	movb   $0x1,(%rax)
    enable_nestloop = true; 
    4782:	48 8b 05 67 58 00 00 	mov    0x5867(%rip),%rax        # 9ff0 <enable_nestloop@Base>
    4789:	c6 00 01             	movb   $0x1,(%rax)
    break;
    478c:	eb 4f                	jmp    47dd <set_arm_options+0x50e>
  default:
    elog(ERROR, "Invalid arm index %d selected.", arm);
    478e:	be 00 00 00 00       	mov    $0x0,%esi
    4793:	bf 15 00 00 00       	mov    $0x15,%edi
    4798:	e8 73 de ff ff       	call   2610 <errstart_cold@plt>
    479d:	84 c0                	test   %al,%al
    479f:	74 37                	je     47d8 <set_arm_options+0x509>
    47a1:	8b 45 fc             	mov    -0x4(%rbp),%eax
    47a4:	89 c6                	mov    %eax,%esi
    47a6:	48 8d 05 d3 29 00 00 	lea    0x29d3(%rip),%rax        # 7180 <_fini+0xe84>
    47ad:	48 89 c7             	mov    %rax,%rdi
    47b0:	b8 00 00 00 00       	mov    $0x0,%eax
    47b5:	e8 96 dc ff ff       	call   2450 <errmsg_internal@plt>
    47ba:	48 8d 05 7f 33 00 00 	lea    0x337f(%rip),%rax        # 7b40 <__func__.6>
    47c1:	48 89 c2             	mov    %rax,%rdx
    47c4:	be cd 00 00 00       	mov    $0xcd,%esi
    47c9:	48 8d 05 cf 29 00 00 	lea    0x29cf(%rip),%rax        # 719f <_fini+0xea3>
    47d0:	48 89 c7             	mov    %rax,%rdi
    47d3:	e8 98 dd ff ff       	call   2570 <errfinish@plt>
    47d8:	e8 73 db ff ff       	call   2350 <abort@plt>
    break;
  }
}
    47dd:	90                   	nop
    47de:	c9                   	leave  
    47df:	c3                   	ret    

00000000000047e0 <plan_arm>:


// Get a query plan for a particular arm.
static PlannedStmt* plan_arm(int arm, Query* parse, const char *query_string,
                             int cursorOptions, ParamListInfo boundParams) {
    47e0:	f3 0f 1e fa          	endbr64 
    47e4:	55                   	push   %rbp
    47e5:	48 89 e5             	mov    %rsp,%rbp
    47e8:	48 83 ec 40          	sub    $0x40,%rsp
    47ec:	89 7d dc             	mov    %edi,-0x24(%rbp)
    47ef:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
    47f3:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
    47f7:	89 4d d8             	mov    %ecx,-0x28(%rbp)
    47fa:	4c 89 45 c0          	mov    %r8,-0x40(%rbp)

  PlannedStmt* plan = NULL;
    47fe:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
    4805:	00 
  Query* query_copy = copyObject(parse); // create a copy of the query plan
    4806:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    480a:	48 89 c7             	mov    %rax,%rdi
    480d:	e8 0e dd ff ff       	call   2520 <copyObjectImpl@plt>
    4812:	48 89 45 f8          	mov    %rax,-0x8(%rbp)

  if (arm == -1) {
    4816:	83 7d dc ff          	cmpl   $0xffffffff,-0x24(%rbp)
    481a:	75 24                	jne    4840 <plan_arm+0x60>
    // Use whatever the user has set as the current configuration.
    plan = standard_planner(query_copy, query_string, cursorOptions, boundParams);
    481c:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
    4820:	8b 55 d8             	mov    -0x28(%rbp),%edx
    4823:	48 8b 75 c8          	mov    -0x38(%rbp),%rsi
    4827:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    482b:	48 89 c7             	mov    %rax,%rdi
    482e:	e8 fd dc ff ff       	call   2530 <standard_planner@plt>
    4833:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    return plan;
    4837:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    483b:	e9 c5 00 00 00       	jmp    4905 <plan_arm+0x125>
  }
  
  // Preserving the user's options, set the config to match the arm index
  // and invoke the PG planner.
  save_arm_options({
    4840:	48 8b 05 89 57 00 00 	mov    0x5789(%rip),%rax        # 9fd0 <enable_hashjoin@Base>
    4847:	0f b6 00             	movzbl (%rax),%eax
    484a:	88 45 ea             	mov    %al,-0x16(%rbp)
    484d:	48 8b 05 54 57 00 00 	mov    0x5754(%rip),%rax        # 9fa8 <enable_mergejoin@Base>
    4854:	0f b6 00             	movzbl (%rax),%eax
    4857:	88 45 eb             	mov    %al,-0x15(%rbp)
    485a:	48 8b 05 8f 57 00 00 	mov    0x578f(%rip),%rax        # 9ff0 <enable_nestloop@Base>
    4861:	0f b6 00             	movzbl (%rax),%eax
    4864:	88 45 ec             	mov    %al,-0x14(%rbp)
    4867:	48 8b 05 42 57 00 00 	mov    0x5742(%rip),%rax        # 9fb0 <enable_indexscan@Base>
    486e:	0f b6 00             	movzbl (%rax),%eax
    4871:	88 45 ed             	mov    %al,-0x13(%rbp)
    4874:	48 8b 05 f5 56 00 00 	mov    0x56f5(%rip),%rax        # 9f70 <enable_seqscan@Base>
    487b:	0f b6 00             	movzbl (%rax),%eax
    487e:	88 45 ee             	mov    %al,-0x12(%rbp)
    4881:	48 8b 05 00 57 00 00 	mov    0x5700(%rip),%rax        # 9f88 <enable_indexonlyscan@Base>
    4888:	0f b6 00             	movzbl (%rax),%eax
    488b:	88 45 ef             	mov    %al,-0x11(%rbp)
    488e:	8b 45 dc             	mov    -0x24(%rbp),%eax
    4891:	89 c7                	mov    %eax,%edi
    4893:	e8 37 fa ff ff       	call   42cf <set_arm_options>
    4898:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
    489c:	8b 55 d8             	mov    -0x28(%rbp),%edx
    489f:	48 8b 75 c8          	mov    -0x38(%rbp),%rsi
    48a3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    48a7:	48 89 c7             	mov    %rax,%rdi
    48aa:	e8 81 dc ff ff       	call   2530 <standard_planner@plt>
    48af:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    48b3:	48 8b 05 16 57 00 00 	mov    0x5716(%rip),%rax        # 9fd0 <enable_hashjoin@Base>
    48ba:	0f b6 55 ea          	movzbl -0x16(%rbp),%edx
    48be:	88 10                	mov    %dl,(%rax)
    48c0:	48 8b 05 e1 56 00 00 	mov    0x56e1(%rip),%rax        # 9fa8 <enable_mergejoin@Base>
    48c7:	0f b6 55 eb          	movzbl -0x15(%rbp),%edx
    48cb:	88 10                	mov    %dl,(%rax)
    48cd:	48 8b 05 1c 57 00 00 	mov    0x571c(%rip),%rax        # 9ff0 <enable_nestloop@Base>
    48d4:	0f b6 55 ec          	movzbl -0x14(%rbp),%edx
    48d8:	88 10                	mov    %dl,(%rax)
    48da:	48 8b 05 cf 56 00 00 	mov    0x56cf(%rip),%rax        # 9fb0 <enable_indexscan@Base>
    48e1:	0f b6 55 ed          	movzbl -0x13(%rbp),%edx
    48e5:	88 10                	mov    %dl,(%rax)
    48e7:	48 8b 05 82 56 00 00 	mov    0x5682(%rip),%rax        # 9f70 <enable_seqscan@Base>
    48ee:	0f b6 55 ee          	movzbl -0x12(%rbp),%edx
    48f2:	88 10                	mov    %dl,(%rax)
    48f4:	48 8b 05 8d 56 00 00 	mov    0x568d(%rip),%rax        # 9f88 <enable_indexonlyscan@Base>
    48fb:	0f b6 55 ef          	movzbl -0x11(%rbp),%edx
    48ff:	88 10                	mov    %dl,(%rax)
      set_arm_options(arm);
      plan = standard_planner(query_copy, query_string, cursorOptions, boundParams);
    });

  return plan;
    4901:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
}
    4905:	c9                   	leave  
    4906:	c3                   	ret    

0000000000004907 <node_type_to_string>:
  struct BaoPlanNode* right;
} BaoPlanNode;

// Transform the operator types we care about from their PG tag to a
// string. Call other operators "Other".
static const char* node_type_to_string(NodeTag tag) {
    4907:	f3 0f 1e fa          	endbr64 
    490b:	55                   	push   %rbp
    490c:	48 89 e5             	mov    %rsp,%rbp
    490f:	89 7d fc             	mov    %edi,-0x4(%rbp)
  switch (tag) {
    4912:	8b 45 fc             	mov    -0x4(%rbp),%eax
    4915:	2d 3e 01 00 00       	sub    $0x13e,%eax
    491a:	83 f8 14             	cmp    $0x14,%eax
    491d:	77 62                	ja     4981 <node_type_to_string+0x7a>
    491f:	89 c0                	mov    %eax,%eax
    4921:	48 8d 14 85 00 00 00 	lea    0x0(,%rax,4),%rdx
    4928:	00 
    4929:	48 8d 05 48 29 00 00 	lea    0x2948(%rip),%rax        # 7278 <_fini+0xf7c>
    4930:	8b 04 02             	mov    (%rdx,%rax,1),%eax
    4933:	48 98                	cltq   
    4935:	48 8d 15 3c 29 00 00 	lea    0x293c(%rip),%rdx        # 7278 <_fini+0xf7c>
    493c:	48 01 d0             	add    %rdx,%rax
    493f:	3e ff e0             	notrack jmp *%rax
  case T_SeqScan:
    return "Seq Scan";
    4942:	48 8d 05 cf 28 00 00 	lea    0x28cf(%rip),%rax        # 7218 <_fini+0xf1c>
    4949:	eb 3d                	jmp    4988 <node_type_to_string+0x81>
  case T_IndexScan:
    return "Index Scan";
    494b:	48 8d 05 cf 28 00 00 	lea    0x28cf(%rip),%rax        # 7221 <_fini+0xf25>
    4952:	eb 34                	jmp    4988 <node_type_to_string+0x81>
  case T_IndexOnlyScan:
    return "Index Only Scan";
    4954:	48 8d 05 d1 28 00 00 	lea    0x28d1(%rip),%rax        # 722c <_fini+0xf30>
    495b:	eb 2b                	jmp    4988 <node_type_to_string+0x81>
  case T_BitmapIndexScan:
    return "Bitmap Index Scan";
    495d:	48 8d 05 d8 28 00 00 	lea    0x28d8(%rip),%rax        # 723c <_fini+0xf40>
    4964:	eb 22                	jmp    4988 <node_type_to_string+0x81>
  case T_NestLoop:
    return "Nested Loop";
    4966:	48 8d 05 e1 28 00 00 	lea    0x28e1(%rip),%rax        # 724e <_fini+0xf52>
    496d:	eb 19                	jmp    4988 <node_type_to_string+0x81>
  case T_MergeJoin:
    return "Merge Join";
    496f:	48 8d 05 e4 28 00 00 	lea    0x28e4(%rip),%rax        # 725a <_fini+0xf5e>
    4976:	eb 10                	jmp    4988 <node_type_to_string+0x81>
  case T_HashJoin:
    return "Hash Join";
    4978:	48 8d 05 e6 28 00 00 	lea    0x28e6(%rip),%rax        # 7265 <_fini+0xf69>
    497f:	eb 07                	jmp    4988 <node_type_to_string+0x81>
  default:
    return "Other";
    4981:	48 8d 05 e7 28 00 00 	lea    0x28e7(%rip),%rax        # 726f <_fini+0xf73>
  }
}
    4988:	5d                   	pop    %rbp
    4989:	c3                   	ret    

000000000000498a <new_bao_plan>:

// Allocate an empty BaoPlanNode.
static BaoPlanNode* new_bao_plan() {
    498a:	f3 0f 1e fa          	endbr64 
    498e:	55                   	push   %rbp
    498f:	48 89 e5             	mov    %rsp,%rbp
  return (BaoPlanNode*) malloc(sizeof(BaoPlanNode));
    4992:	bf 30 00 00 00       	mov    $0x30,%edi
    4997:	e8 74 db ff ff       	call   2510 <malloc@plt>
}
    499c:	5d                   	pop    %rbp
    499d:	c3                   	ret    

000000000000499e <free_bao_plan_node>:

// Free (recursively) an entire BaoPlanNode. Frees children as well.
static void free_bao_plan_node(BaoPlanNode* node) {
    499e:	f3 0f 1e fa          	endbr64 
    49a2:	55                   	push   %rbp
    49a3:	48 89 e5             	mov    %rsp,%rbp
    49a6:	48 83 ec 10          	sub    $0x10,%rsp
    49aa:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  if (node->left) free_bao_plan_node(node->left);
    49ae:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    49b2:	48 8b 40 20          	mov    0x20(%rax),%rax
    49b6:	48 85 c0             	test   %rax,%rax
    49b9:	74 10                	je     49cb <free_bao_plan_node+0x2d>
    49bb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    49bf:	48 8b 40 20          	mov    0x20(%rax),%rax
    49c3:	48 89 c7             	mov    %rax,%rdi
    49c6:	e8 d3 ff ff ff       	call   499e <free_bao_plan_node>
  if (node->right) free_bao_plan_node(node->right);
    49cb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    49cf:	48 8b 40 28          	mov    0x28(%rax),%rax
    49d3:	48 85 c0             	test   %rax,%rax
    49d6:	74 10                	je     49e8 <free_bao_plan_node+0x4a>
    49d8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    49dc:	48 8b 40 28          	mov    0x28(%rax),%rax
    49e0:	48 89 c7             	mov    %rax,%rdi
    49e3:	e8 b6 ff ff ff       	call   499e <free_bao_plan_node>
  free(node);
    49e8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    49ec:	48 89 c7             	mov    %rax,%rdi
    49ef:	e8 4c d9 ff ff       	call   2340 <free@plt>
}
    49f4:	90                   	nop
    49f5:	c9                   	leave  
    49f6:	c3                   	ret    

00000000000049f7 <emit_json>:

// Emit a JSON representation of the given BaoPlanNode to the stream given.
// Recursive function, the entry point is `plan_to_json`.
static void emit_json(BaoPlanNode* node, FILE* stream) {
    49f7:	f3 0f 1e fa          	endbr64 
    49fb:	55                   	push   %rbp
    49fc:	48 89 e5             	mov    %rsp,%rbp
    49ff:	48 83 ec 10          	sub    $0x10,%rsp
    4a03:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    4a07:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  fprintf(stream, "{\"Node Type\": \"%s\",", node_type_to_string(node->node_type));
    4a0b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    4a0f:	8b 00                	mov    (%rax),%eax
    4a11:	89 c7                	mov    %eax,%edi
    4a13:	e8 ef fe ff ff       	call   4907 <node_type_to_string>
    4a18:	48 89 c2             	mov    %rax,%rdx
    4a1b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    4a1f:	48 8d 0d a6 28 00 00 	lea    0x28a6(%rip),%rcx        # 72cc <_fini+0xfd0>
    4a26:	48 89 ce             	mov    %rcx,%rsi
    4a29:	48 89 c7             	mov    %rax,%rdi
    4a2c:	b8 00 00 00 00       	mov    $0x0,%eax
    4a31:	e8 5a d9 ff ff       	call   2390 <pg_fprintf@plt>
  fprintf(stream, "\"Node Type ID\": \"%d\",", node->node_type);
    4a36:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    4a3a:	8b 10                	mov    (%rax),%edx
    4a3c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    4a40:	48 8d 0d 99 28 00 00 	lea    0x2899(%rip),%rcx        # 72e0 <_fini+0xfe4>
    4a47:	48 89 ce             	mov    %rcx,%rsi
    4a4a:	48 89 c7             	mov    %rax,%rdi
    4a4d:	b8 00 00 00 00       	mov    $0x0,%eax
    4a52:	e8 39 d9 ff ff       	call   2390 <pg_fprintf@plt>
  if (node->relation_name)
    4a57:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    4a5b:	48 8b 40 18          	mov    0x18(%rax),%rax
    4a5f:	48 85 c0             	test   %rax,%rax
    4a62:	74 23                	je     4a87 <emit_json+0x90>
    // TODO need to escape the relation name for JSON...
    fprintf(stream, "\"Relation Name\": \"%s\",", node->relation_name);
    4a64:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    4a68:	48 8b 50 18          	mov    0x18(%rax),%rdx
    4a6c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    4a70:	48 8d 0d 7f 28 00 00 	lea    0x287f(%rip),%rcx        # 72f6 <_fini+0xffa>
    4a77:	48 89 ce             	mov    %rcx,%rsi
    4a7a:	48 89 c7             	mov    %rax,%rdi
    4a7d:	b8 00 00 00 00       	mov    $0x0,%eax
    4a82:	e8 09 d9 ff ff       	call   2390 <pg_fprintf@plt>
  fprintf(stream, "\"Total Cost\": %f,", node->optimizer_cost);
    4a87:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    4a8b:	48 8b 50 08          	mov    0x8(%rax),%rdx
    4a8f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    4a93:	66 48 0f 6e c2       	movq   %rdx,%xmm0
    4a98:	48 8d 15 6e 28 00 00 	lea    0x286e(%rip),%rdx        # 730d <_fini+0x1011>
    4a9f:	48 89 d6             	mov    %rdx,%rsi
    4aa2:	48 89 c7             	mov    %rax,%rdi
    4aa5:	b8 01 00 00 00       	mov    $0x1,%eax
    4aaa:	e8 e1 d8 ff ff       	call   2390 <pg_fprintf@plt>
  fprintf(stream, "\"Plan Rows\": %f", node->cardinality_estimate);
    4aaf:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    4ab3:	48 8b 50 10          	mov    0x10(%rax),%rdx
    4ab7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    4abb:	66 48 0f 6e c2       	movq   %rdx,%xmm0
    4ac0:	48 8d 15 58 28 00 00 	lea    0x2858(%rip),%rdx        # 731f <_fini+0x1023>
    4ac7:	48 89 d6             	mov    %rdx,%rsi
    4aca:	48 89 c7             	mov    %rax,%rdi
    4acd:	b8 01 00 00 00       	mov    $0x1,%eax
    4ad2:	e8 b9 d8 ff ff       	call   2390 <pg_fprintf@plt>
  if (!node->left && !node->right) {
    4ad7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    4adb:	48 8b 40 20          	mov    0x20(%rax),%rax
    4adf:	48 85 c0             	test   %rax,%rax
    4ae2:	75 2d                	jne    4b11 <emit_json+0x11a>
    4ae4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    4ae8:	48 8b 40 28          	mov    0x28(%rax),%rax
    4aec:	48 85 c0             	test   %rax,%rax
    4aef:	75 20                	jne    4b11 <emit_json+0x11a>
    fprintf(stream, "}");
    4af1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    4af5:	48 8d 15 33 28 00 00 	lea    0x2833(%rip),%rdx        # 732f <_fini+0x1033>
    4afc:	48 89 d6             	mov    %rdx,%rsi
    4aff:	48 89 c7             	mov    %rax,%rdi
    4b02:	b8 00 00 00 00       	mov    $0x0,%eax
    4b07:	e8 84 d8 ff ff       	call   2390 <pg_fprintf@plt>
    return;
    4b0c:	e9 99 00 00 00       	jmp    4baa <emit_json+0x1b3>
  }

  fprintf(stream, ", \"Plans\": [");
    4b11:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    4b15:	48 8d 15 15 28 00 00 	lea    0x2815(%rip),%rdx        # 7331 <_fini+0x1035>
    4b1c:	48 89 d6             	mov    %rdx,%rsi
    4b1f:	48 89 c7             	mov    %rax,%rdi
    4b22:	b8 00 00 00 00       	mov    $0x0,%eax
    4b27:	e8 64 d8 ff ff       	call   2390 <pg_fprintf@plt>
  if (node->left) emit_json(node->left, stream);
    4b2c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    4b30:	48 8b 40 20          	mov    0x20(%rax),%rax
    4b34:	48 85 c0             	test   %rax,%rax
    4b37:	74 17                	je     4b50 <emit_json+0x159>
    4b39:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    4b3d:	48 8b 40 20          	mov    0x20(%rax),%rax
    4b41:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    4b45:	48 89 d6             	mov    %rdx,%rsi
    4b48:	48 89 c7             	mov    %rax,%rdi
    4b4b:	e8 a7 fe ff ff       	call   49f7 <emit_json>
  if (node->right) {
    4b50:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    4b54:	48 8b 40 28          	mov    0x28(%rax),%rax
    4b58:	48 85 c0             	test   %rax,%rax
    4b5b:	74 32                	je     4b8f <emit_json+0x198>
    fprintf(stream, ", ");
    4b5d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    4b61:	48 8d 15 d6 27 00 00 	lea    0x27d6(%rip),%rdx        # 733e <_fini+0x1042>
    4b68:	48 89 d6             	mov    %rdx,%rsi
    4b6b:	48 89 c7             	mov    %rax,%rdi
    4b6e:	b8 00 00 00 00       	mov    $0x0,%eax
    4b73:	e8 18 d8 ff ff       	call   2390 <pg_fprintf@plt>
    emit_json(node->right, stream);
    4b78:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    4b7c:	48 8b 40 28          	mov    0x28(%rax),%rax
    4b80:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    4b84:	48 89 d6             	mov    %rdx,%rsi
    4b87:	48 89 c7             	mov    %rax,%rdi
    4b8a:	e8 68 fe ff ff       	call   49f7 <emit_json>
  }
  fprintf(stream, "]}");
    4b8f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    4b93:	48 8d 15 a7 27 00 00 	lea    0x27a7(%rip),%rdx        # 7341 <_fini+0x1045>
    4b9a:	48 89 d6             	mov    %rdx,%rsi
    4b9d:	48 89 c7             	mov    %rax,%rdi
    4ba0:	b8 00 00 00 00       	mov    $0x0,%eax
    4ba5:	e8 e6 d7 ff ff       	call   2390 <pg_fprintf@plt>
}
    4baa:	c9                   	leave  
    4bab:	c3                   	ret    

0000000000004bac <transform_plan>:

// Transform a PostgreSQL PlannedStmt into a BaoPlanNode tree.
static BaoPlanNode* transform_plan(PlannedStmt* stmt, Plan* node) {
    4bac:	f3 0f 1e fa          	endbr64 
    4bb0:	55                   	push   %rbp
    4bb1:	48 89 e5             	mov    %rsp,%rbp
    4bb4:	48 83 ec 20          	sub    $0x20,%rsp
    4bb8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    4bbc:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  BaoPlanNode* result = new_bao_plan();
    4bc0:	b8 00 00 00 00       	mov    $0x0,%eax
    4bc5:	e8 c0 fd ff ff       	call   498a <new_bao_plan>
    4bca:	48 89 45 f8          	mov    %rax,-0x8(%rbp)

  result->node_type = node->type;
    4bce:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    4bd2:	8b 10                	mov    (%rax),%edx
    4bd4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    4bd8:	89 10                	mov    %edx,(%rax)
  result->optimizer_cost = node->total_cost;
    4bda:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    4bde:	f2 0f 10 40 10       	movsd  0x10(%rax),%xmm0
    4be3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    4be7:	f2 0f 11 40 08       	movsd  %xmm0,0x8(%rax)
  result->cardinality_estimate = node->plan_rows;
    4bec:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    4bf0:	f2 0f 10 40 18       	movsd  0x18(%rax),%xmm0
    4bf5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    4bf9:	f2 0f 11 40 10       	movsd  %xmm0,0x10(%rax)
  result->relation_name = get_relation_name(stmt, node);
    4bfe:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
    4c02:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    4c06:	48 89 d6             	mov    %rdx,%rsi
    4c09:	48 89 c7             	mov    %rax,%rdi
    4c0c:	e8 c3 df ff ff       	call   2bd4 <get_relation_name>
    4c11:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
    4c15:	48 89 42 18          	mov    %rax,0x18(%rdx)

  result->left = NULL;
    4c19:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    4c1d:	48 c7 40 20 00 00 00 	movq   $0x0,0x20(%rax)
    4c24:	00 
  result->right = NULL;
    4c25:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    4c29:	48 c7 40 28 00 00 00 	movq   $0x0,0x28(%rax)
    4c30:	00 
  if (node->lefttree) result->left = transform_plan(stmt, node->lefttree);
    4c31:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    4c35:	48 8b 40 40          	mov    0x40(%rax),%rax
    4c39:	48 85 c0             	test   %rax,%rax
    4c3c:	74 1f                	je     4c5d <transform_plan+0xb1>
    4c3e:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    4c42:	48 8b 50 40          	mov    0x40(%rax),%rdx
    4c46:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    4c4a:	48 89 d6             	mov    %rdx,%rsi
    4c4d:	48 89 c7             	mov    %rax,%rdi
    4c50:	e8 57 ff ff ff       	call   4bac <transform_plan>
    4c55:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
    4c59:	48 89 42 20          	mov    %rax,0x20(%rdx)
  if (node->righttree) result->right = transform_plan(stmt, node->righttree);
    4c5d:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    4c61:	48 8b 40 48          	mov    0x48(%rax),%rax
    4c65:	48 85 c0             	test   %rax,%rax
    4c68:	74 1f                	je     4c89 <transform_plan+0xdd>
    4c6a:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    4c6e:	48 8b 50 48          	mov    0x48(%rax),%rdx
    4c72:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    4c76:	48 89 d6             	mov    %rdx,%rsi
    4c79:	48 89 c7             	mov    %rax,%rdi
    4c7c:	e8 2b ff ff ff       	call   4bac <transform_plan>
    4c81:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
    4c85:	48 89 42 28          	mov    %rax,0x28(%rdx)

  return result;
    4c89:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
}
    4c8d:	c9                   	leave  
    4c8e:	c3                   	ret    

0000000000004c8f <plan_to_json>:

// Given a PostgreSQL PlannedStmt, produce the JSON representation we need to
// send to the Bao server.
static char* plan_to_json(PlannedStmt* plan) {
    4c8f:	f3 0f 1e fa          	endbr64 
    4c93:	55                   	push   %rbp
    4c94:	48 89 e5             	mov    %rsp,%rbp
    4c97:	48 83 ec 40          	sub    $0x40,%rsp
    4c9b:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
    4c9f:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    4ca6:	00 00 
    4ca8:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    4cac:	31 c0                	xor    %eax,%eax
  char* buf;
  size_t json_size;
  FILE* stream;
  BaoPlanNode* transformed_plan;

  transformed_plan = transform_plan(plan, plan->planTree);
    4cae:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    4cb2:	48 8b 50 20          	mov    0x20(%rax),%rdx
    4cb6:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    4cba:	48 89 d6             	mov    %rdx,%rsi
    4cbd:	48 89 c7             	mov    %rax,%rdi
    4cc0:	e8 e7 fe ff ff       	call   4bac <transform_plan>
    4cc5:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  
  stream = open_memstream(&buf, &json_size);
    4cc9:	48 8d 55 e0          	lea    -0x20(%rbp),%rdx
    4ccd:	48 8d 45 d8          	lea    -0x28(%rbp),%rax
    4cd1:	48 89 d6             	mov    %rdx,%rsi
    4cd4:	48 89 c7             	mov    %rax,%rdi
    4cd7:	e8 84 d6 ff ff       	call   2360 <open_memstream@plt>
    4cdc:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  fprintf(stream, "{\"Plan\": ");
    4ce0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    4ce4:	48 8d 15 59 26 00 00 	lea    0x2659(%rip),%rdx        # 7344 <_fini+0x1048>
    4ceb:	48 89 d6             	mov    %rdx,%rsi
    4cee:	48 89 c7             	mov    %rax,%rdi
    4cf1:	b8 00 00 00 00       	mov    $0x0,%eax
    4cf6:	e8 95 d6 ff ff       	call   2390 <pg_fprintf@plt>
  emit_json(transformed_plan, stream);
    4cfb:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    4cff:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    4d03:	48 89 d6             	mov    %rdx,%rsi
    4d06:	48 89 c7             	mov    %rax,%rdi
    4d09:	e8 e9 fc ff ff       	call   49f7 <emit_json>
  fprintf(stream, "}\n");
    4d0e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    4d12:	48 8d 15 ff 23 00 00 	lea    0x23ff(%rip),%rdx        # 7118 <_fini+0xe1c>
    4d19:	48 89 d6             	mov    %rdx,%rsi
    4d1c:	48 89 c7             	mov    %rax,%rdi
    4d1f:	b8 00 00 00 00       	mov    $0x0,%eax
    4d24:	e8 67 d6 ff ff       	call   2390 <pg_fprintf@plt>
  fclose(stream);
    4d29:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    4d2d:	48 89 c7             	mov    %rax,%rdi
    4d30:	e8 cb d6 ff ff       	call   2400 <fclose@plt>

  free_bao_plan_node(transformed_plan);
    4d35:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    4d39:	48 89 c7             	mov    %rax,%rdi
    4d3c:	e8 5d fc ff ff       	call   499e <free_bao_plan_node>
  
  return buf;
    4d41:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
}
    4d45:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
    4d49:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
    4d50:	00 00 
    4d52:	74 05                	je     4d59 <plan_to_json+0xca>
    4d54:	e8 d7 d6 ff ff       	call   2430 <__stack_chk_fail@plt>
    4d59:	c9                   	leave  
    4d5a:	c3                   	ret    

0000000000004d5b <plan_query>:

// Primary planning function. Invokes the PG planner for each arm, sends the
// results to the Bao server, gets the response, and returns the corrosponding
// query plan (as a BaoPlan).
BaoPlan* plan_query(Query *parse, const char *query_string, int cursorOptions, ParamListInfo boundParams) {
    4d5b:	f3 0f 1e fa          	endbr64 
    4d5f:	55                   	push   %rbp
    4d60:	48 89 e5             	mov    %rsp,%rbp
    4d63:	53                   	push   %rbx
    4d64:	48 81 ec f8 01 00 00 	sub    $0x1f8,%rsp
    4d6b:	48 89 bd 18 fe ff ff 	mov    %rdi,-0x1e8(%rbp)
    4d72:	48 89 b5 10 fe ff ff 	mov    %rsi,-0x1f0(%rbp)
    4d79:	89 95 0c fe ff ff    	mov    %edx,-0x1f4(%rbp)
    4d7f:	48 89 8d 00 fe ff ff 	mov    %rcx,-0x200(%rbp)
    4d86:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    4d8d:	00 00 
    4d8f:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    4d93:	31 c0                	xor    %eax,%eax
  char* json_for_arm[BAO_MAX_ARMS];
  Query* query_copy;
  int conn_fd;

  // Prepare the plan object to store a BaoQueryInfo instance.
  plan = (BaoPlan*) malloc(sizeof(BaoPlan));
    4d95:	bf 18 00 00 00       	mov    $0x18,%edi
    4d9a:	e8 71 d7 ff ff       	call   2510 <malloc@plt>
    4d9f:	48 89 85 30 fe ff ff 	mov    %rax,-0x1d0(%rbp)
  plan->query_info = (BaoQueryInfo*) malloc(sizeof(BaoQueryInfo));
    4da6:	bf 10 00 00 00       	mov    $0x10,%edi
    4dab:	e8 60 d7 ff ff       	call   2510 <malloc@plt>
    4db0:	48 89 c2             	mov    %rax,%rdx
    4db3:	48 8b 85 30 fe ff ff 	mov    -0x1d0(%rbp),%rax
    4dba:	48 89 10             	mov    %rdx,(%rax)
  plan->selection = 0;
    4dbd:	48 8b 85 30 fe ff ff 	mov    -0x1d0(%rbp),%rax
    4dc4:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%rax)
  
  // Connect this buffer state with the query.
  plan->query_info->buffer_json = buffer_state();
    4dcb:	48 8b 85 30 fe ff ff 	mov    -0x1d0(%rbp),%rax
    4dd2:	48 8b 18             	mov    (%rax),%rbx
    4dd5:	b8 00 00 00 00       	mov    $0x0,%eax
    4dda:	e8 8c de ff ff       	call   2c6b <buffer_state>
    4ddf:	48 89 43 08          	mov    %rax,0x8(%rbx)

  if (!enable_bao_selection) {
    4de3:	0f b6 05 e0 53 00 00 	movzbl 0x53e0(%rip),%eax        # a1ca <enable_bao_selection>
    4dea:	83 f0 01             	xor    $0x1,%eax
    4ded:	84 c0                	test   %al,%al
    4def:	74 62                	je     4e53 <plan_query+0xf8>
    // If Bao is not picking query plans, we use arm -1 to get the
    // default PostgreSQL plan. Note that we do *not* use arm 0, as
    // this would ignore the user's settings for things like
    // enable_nestloop.
    plan->plan = plan_arm(-1, parse, query_string, cursorOptions, boundParams);
    4df1:	48 8b b5 00 fe ff ff 	mov    -0x200(%rbp),%rsi
    4df8:	8b 8d 0c fe ff ff    	mov    -0x1f4(%rbp),%ecx
    4dfe:	48 8b 95 10 fe ff ff 	mov    -0x1f0(%rbp),%rdx
    4e05:	48 8b 85 18 fe ff ff 	mov    -0x1e8(%rbp),%rax
    4e0c:	49 89 f0             	mov    %rsi,%r8
    4e0f:	48 89 c6             	mov    %rax,%rsi
    4e12:	bf ff ff ff ff       	mov    $0xffffffff,%edi
    4e17:	e8 c4 f9 ff ff       	call   47e0 <plan_arm>
    4e1c:	48 8b 95 30 fe ff ff 	mov    -0x1d0(%rbp),%rdx
    4e23:	48 89 42 08          	mov    %rax,0x8(%rdx)
    plan->query_info->plan_json = plan_to_json(plan->plan);
    4e27:	48 8b 85 30 fe ff ff 	mov    -0x1d0(%rbp),%rax
    4e2e:	48 8b 40 08          	mov    0x8(%rax),%rax
    4e32:	48 8b 95 30 fe ff ff 	mov    -0x1d0(%rbp),%rdx
    4e39:	48 8b 1a             	mov    (%rdx),%rbx
    4e3c:	48 89 c7             	mov    %rax,%rdi
    4e3f:	e8 4b fe ff ff       	call   4c8f <plan_to_json>
    4e44:	48 89 03             	mov    %rax,(%rbx)
    return plan;
    4e47:	48 8b 85 30 fe ff ff 	mov    -0x1d0(%rbp),%rax
    4e4e:	e9 44 03 00 00       	jmp    5197 <plan_query+0x43c>
  }
  
  conn_fd = connect_to_bao(bao_host, bao_port);
    4e53:	8b 15 3f 53 00 00    	mov    0x533f(%rip),%edx        # a198 <bao_port>
    4e59:	48 8b 05 70 53 00 00 	mov    0x5370(%rip),%rax        # a1d0 <bao_host>
    4e60:	89 d6                	mov    %edx,%esi
    4e62:	48 89 c7             	mov    %rax,%rdi
    4e65:	e8 a6 dc ff ff       	call   2b10 <connect_to_bao>
    4e6a:	89 85 2c fe ff ff    	mov    %eax,-0x1d4(%rbp)
  if (conn_fd == -1) {
    4e70:	83 bd 2c fe ff ff ff 	cmpl   $0xffffffff,-0x1d4(%rbp)
    4e77:	75 4f                	jne    4ec8 <plan_query+0x16d>
    elog(WARNING, "Unable to connect to Bao server.");
    4e79:	be 00 00 00 00       	mov    $0x0,%esi
    4e7e:	bf 13 00 00 00       	mov    $0x13,%edi
    4e83:	e8 f8 d5 ff ff       	call   2480 <errstart@plt>
    4e88:	84 c0                	test   %al,%al
    4e8a:	74 32                	je     4ebe <plan_query+0x163>
    4e8c:	48 8d 05 bd 24 00 00 	lea    0x24bd(%rip),%rax        # 7350 <_fini+0x1054>
    4e93:	48 89 c7             	mov    %rax,%rdi
    4e96:	b8 00 00 00 00       	mov    $0x0,%eax
    4e9b:	e8 b0 d5 ff ff       	call   2450 <errmsg_internal@plt>
    4ea0:	48 8d 05 a9 2c 00 00 	lea    0x2ca9(%rip),%rax        # 7b50 <__func__.5>
    4ea7:	48 89 c2             	mov    %rax,%rdx
    4eaa:	be 7f 01 00 00       	mov    $0x17f,%esi
    4eaf:	48 8d 05 e9 22 00 00 	lea    0x22e9(%rip),%rax        # 719f <_fini+0xea3>
    4eb6:	48 89 c7             	mov    %rax,%rdi
    4eb9:	e8 b2 d6 ff ff       	call   2570 <errfinish@plt>
    return NULL;
    4ebe:	b8 00 00 00 00       	mov    $0x0,%eax
    4ec3:	e9 cf 02 00 00       	jmp    5197 <plan_query+0x43c>
  }

  memset(plan_for_arm, 0, BAO_MAX_ARMS*sizeof(PlannedStmt*));
    4ec8:	48 8d 85 40 fe ff ff 	lea    -0x1c0(%rbp),%rax
    4ecf:	ba d0 00 00 00       	mov    $0xd0,%edx
    4ed4:	be 00 00 00 00       	mov    $0x0,%esi
    4ed9:	48 89 c7             	mov    %rax,%rdi
    4edc:	e8 7f d5 ff ff       	call   2460 <memset@plt>

  write_all_to_socket(conn_fd, START_QUERY_MESSAGE);
    4ee1:	48 8b 15 b8 52 00 00 	mov    0x52b8(%rip),%rdx        # a1a0 <START_QUERY_MESSAGE>
    4ee8:	8b 85 2c fe ff ff    	mov    -0x1d4(%rbp),%eax
    4eee:	48 89 d6             	mov    %rdx,%rsi
    4ef1:	89 c7                	mov    %eax,%edi
    4ef3:	e8 ab db ff ff       	call   2aa3 <write_all_to_socket>
  for (int i = 0; i < bao_num_arms; i++) {
    4ef8:	c7 85 24 fe ff ff 00 	movl   $0x0,-0x1dc(%rbp)
    4eff:	00 00 00 
    4f02:	e9 a2 00 00 00       	jmp    4fa9 <plan_query+0x24e>
    // Plan the query for this arm.
    query_copy = copyObject(parse);
    4f07:	48 8b 85 18 fe ff ff 	mov    -0x1e8(%rbp),%rax
    4f0e:	48 89 c7             	mov    %rax,%rdi
    4f11:	e8 0a d6 ff ff       	call   2520 <copyObjectImpl@plt>
    4f16:	48 89 85 38 fe ff ff 	mov    %rax,-0x1c8(%rbp)
    plan_for_arm[i] = plan_arm(i, query_copy, query_string, cursorOptions, boundParams);
    4f1d:	48 8b bd 00 fe ff ff 	mov    -0x200(%rbp),%rdi
    4f24:	8b 8d 0c fe ff ff    	mov    -0x1f4(%rbp),%ecx
    4f2a:	48 8b 95 10 fe ff ff 	mov    -0x1f0(%rbp),%rdx
    4f31:	48 8b b5 38 fe ff ff 	mov    -0x1c8(%rbp),%rsi
    4f38:	8b 85 24 fe ff ff    	mov    -0x1dc(%rbp),%eax
    4f3e:	49 89 f8             	mov    %rdi,%r8
    4f41:	89 c7                	mov    %eax,%edi
    4f43:	e8 98 f8 ff ff       	call   47e0 <plan_arm>
    4f48:	8b 95 24 fe ff ff    	mov    -0x1dc(%rbp),%edx
    4f4e:	48 63 d2             	movslq %edx,%rdx
    4f51:	48 89 84 d5 40 fe ff 	mov    %rax,-0x1c0(%rbp,%rdx,8)
    4f58:	ff 

    // Transform it into JSON, transmit it to the Bao server.
    json_for_arm[i] = plan_to_json(plan_for_arm[i]);
    4f59:	8b 85 24 fe ff ff    	mov    -0x1dc(%rbp),%eax
    4f5f:	48 98                	cltq   
    4f61:	48 8b 84 c5 40 fe ff 	mov    -0x1c0(%rbp,%rax,8),%rax
    4f68:	ff 
    4f69:	48 89 c7             	mov    %rax,%rdi
    4f6c:	e8 1e fd ff ff       	call   4c8f <plan_to_json>
    4f71:	8b 95 24 fe ff ff    	mov    -0x1dc(%rbp),%edx
    4f77:	48 63 d2             	movslq %edx,%rdx
    4f7a:	48 89 84 d5 10 ff ff 	mov    %rax,-0xf0(%rbp,%rdx,8)
    4f81:	ff 
    write_all_to_socket(conn_fd, json_for_arm[i]);
    4f82:	8b 85 24 fe ff ff    	mov    -0x1dc(%rbp),%eax
    4f88:	48 98                	cltq   
    4f8a:	48 8b 94 c5 10 ff ff 	mov    -0xf0(%rbp,%rax,8),%rdx
    4f91:	ff 
    4f92:	8b 85 2c fe ff ff    	mov    -0x1d4(%rbp),%eax
    4f98:	48 89 d6             	mov    %rdx,%rsi
    4f9b:	89 c7                	mov    %eax,%edi
    4f9d:	e8 01 db ff ff       	call   2aa3 <write_all_to_socket>
  for (int i = 0; i < bao_num_arms; i++) {
    4fa2:	83 85 24 fe ff ff 01 	addl   $0x1,-0x1dc(%rbp)
    4fa9:	8b 05 ed 51 00 00    	mov    0x51ed(%rip),%eax        # a19c <bao_num_arms>
    4faf:	39 85 24 fe ff ff    	cmp    %eax,-0x1dc(%rbp)
    4fb5:	0f 8c 4c ff ff ff    	jl     4f07 <plan_query+0x1ac>
  }
  
  write_all_to_socket(conn_fd, plan->query_info->buffer_json);
    4fbb:	48 8b 85 30 fe ff ff 	mov    -0x1d0(%rbp),%rax
    4fc2:	48 8b 00             	mov    (%rax),%rax
    4fc5:	48 8b 50 08          	mov    0x8(%rax),%rdx
    4fc9:	8b 85 2c fe ff ff    	mov    -0x1d4(%rbp),%eax
    4fcf:	48 89 d6             	mov    %rdx,%rsi
    4fd2:	89 c7                	mov    %eax,%edi
    4fd4:	e8 ca da ff ff       	call   2aa3 <write_all_to_socket>
  write_all_to_socket(conn_fd, TERMINAL_MESSAGE);
    4fd9:	48 8b 15 d8 51 00 00 	mov    0x51d8(%rip),%rdx        # a1b8 <TERMINAL_MESSAGE>
    4fe0:	8b 85 2c fe ff ff    	mov    -0x1d4(%rbp),%eax
    4fe6:	48 89 d6             	mov    %rdx,%rsi
    4fe9:	89 c7                	mov    %eax,%edi
    4feb:	e8 b3 da ff ff       	call   2aa3 <write_all_to_socket>
  shutdown(conn_fd, SHUT_WR);
    4ff0:	8b 85 2c fe ff ff    	mov    -0x1d4(%rbp),%eax
    4ff6:	be 01 00 00 00       	mov    $0x1,%esi
    4ffb:	89 c7                	mov    %eax,%edi
    4ffd:	e8 0e d4 ff ff       	call   2410 <shutdown@plt>

  // Read the response.
  if (read(conn_fd, &plan->selection, sizeof(unsigned int)) != sizeof(unsigned int)) {
    5002:	48 8b 85 30 fe ff ff 	mov    -0x1d0(%rbp),%rax
    5009:	48 8d 48 10          	lea    0x10(%rax),%rcx
    500d:	8b 85 2c fe ff ff    	mov    -0x1d4(%rbp),%eax
    5013:	ba 04 00 00 00       	mov    $0x4,%edx
    5018:	48 89 ce             	mov    %rcx,%rsi
    501b:	89 c7                	mov    %eax,%edi
    501d:	e8 7e d4 ff ff       	call   24a0 <read@plt>
    5022:	48 83 f8 04          	cmp    $0x4,%rax
    5026:	74 65                	je     508d <plan_query+0x332>
    shutdown(conn_fd, SHUT_RDWR);
    5028:	8b 85 2c fe ff ff    	mov    -0x1d4(%rbp),%eax
    502e:	be 02 00 00 00       	mov    $0x2,%esi
    5033:	89 c7                	mov    %eax,%edi
    5035:	e8 d6 d3 ff ff       	call   2410 <shutdown@plt>
    elog(WARNING, "Bao could not read the response from the server.");
    503a:	be 00 00 00 00       	mov    $0x0,%esi
    503f:	bf 13 00 00 00       	mov    $0x13,%edi
    5044:	e8 37 d4 ff ff       	call   2480 <errstart@plt>
    5049:	84 c0                	test   %al,%al
    504b:	74 32                	je     507f <plan_query+0x324>
    504d:	48 8d 05 24 23 00 00 	lea    0x2324(%rip),%rax        # 7378 <_fini+0x107c>
    5054:	48 89 c7             	mov    %rax,%rdi
    5057:	b8 00 00 00 00       	mov    $0x0,%eax
    505c:	e8 ef d3 ff ff       	call   2450 <errmsg_internal@plt>
    5061:	48 8d 05 e8 2a 00 00 	lea    0x2ae8(%rip),%rax        # 7b50 <__func__.5>
    5068:	48 89 c2             	mov    %rax,%rdx
    506b:	be 97 01 00 00       	mov    $0x197,%esi
    5070:	48 8d 05 28 21 00 00 	lea    0x2128(%rip),%rax        # 719f <_fini+0xea3>
    5077:	48 89 c7             	mov    %rax,%rdi
    507a:	e8 f1 d4 ff ff       	call   2570 <errfinish@plt>
    plan->selection = 0;
    507f:	48 8b 85 30 fe ff ff 	mov    -0x1d0(%rbp),%rax
    5086:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%rax)
  }
  shutdown(conn_fd, SHUT_RDWR);
    508d:	8b 85 2c fe ff ff    	mov    -0x1d4(%rbp),%eax
    5093:	be 02 00 00 00       	mov    $0x2,%esi
    5098:	89 c7                	mov    %eax,%edi
    509a:	e8 71 d3 ff ff       	call   2410 <shutdown@plt>

  if (plan->selection >= BAO_MAX_ARMS) {
    509f:	48 8b 85 30 fe ff ff 	mov    -0x1d0(%rbp),%rax
    50a6:	8b 40 10             	mov    0x10(%rax),%eax
    50a9:	83 f8 19             	cmp    $0x19,%eax
    50ac:	76 56                	jbe    5104 <plan_query+0x3a9>
    elog(ERROR, "Bao server returned arm index %d, which is outside the range.",
    50ae:	be 00 00 00 00       	mov    $0x0,%esi
    50b3:	bf 15 00 00 00       	mov    $0x15,%edi
    50b8:	e8 53 d5 ff ff       	call   2610 <errstart_cold@plt>
    50bd:	84 c0                	test   %al,%al
    50bf:	74 3e                	je     50ff <plan_query+0x3a4>
    50c1:	48 8b 85 30 fe ff ff 	mov    -0x1d0(%rbp),%rax
    50c8:	8b 40 10             	mov    0x10(%rax),%eax
    50cb:	89 c6                	mov    %eax,%esi
    50cd:	48 8d 05 dc 22 00 00 	lea    0x22dc(%rip),%rax        # 73b0 <_fini+0x10b4>
    50d4:	48 89 c7             	mov    %rax,%rdi
    50d7:	b8 00 00 00 00       	mov    $0x0,%eax
    50dc:	e8 6f d3 ff ff       	call   2450 <errmsg_internal@plt>
    50e1:	48 8d 05 68 2a 00 00 	lea    0x2a68(%rip),%rax        # 7b50 <__func__.5>
    50e8:	48 89 c2             	mov    %rax,%rdx
    50eb:	be 9d 01 00 00       	mov    $0x19d,%esi
    50f0:	48 8d 05 a8 20 00 00 	lea    0x20a8(%rip),%rax        # 719f <_fini+0xea3>
    50f7:	48 89 c7             	mov    %rax,%rdi
    50fa:	e8 71 d4 ff ff       	call   2570 <errfinish@plt>
    50ff:	e8 4c d2 ff ff       	call   2350 <abort@plt>
    plan->selection = 0;
  }
  
  // Keep the plan the Bao server selected, and associate the JSON representation
  // of the plan with the BaoPlan. Free everything else.
  plan->plan = plan_for_arm[plan->selection];
    5104:	48 8b 85 30 fe ff ff 	mov    -0x1d0(%rbp),%rax
    510b:	8b 40 10             	mov    0x10(%rax),%eax
    510e:	89 c0                	mov    %eax,%eax
    5110:	48 8b 94 c5 40 fe ff 	mov    -0x1c0(%rbp,%rax,8),%rdx
    5117:	ff 
    5118:	48 8b 85 30 fe ff ff 	mov    -0x1d0(%rbp),%rax
    511f:	48 89 50 08          	mov    %rdx,0x8(%rax)
  for (int i = 0; i < bao_num_arms; i++) {
    5123:	c7 85 28 fe ff ff 00 	movl   $0x0,-0x1d8(%rbp)
    512a:	00 00 00 
    512d:	eb 53                	jmp    5182 <plan_query+0x427>
    if (i == plan->selection) {
    512f:	48 8b 85 30 fe ff ff 	mov    -0x1d0(%rbp),%rax
    5136:	8b 50 10             	mov    0x10(%rax),%edx
    5139:	8b 85 28 fe ff ff    	mov    -0x1d8(%rbp),%eax
    513f:	39 c2                	cmp    %eax,%edx
    5141:	75 20                	jne    5163 <plan_query+0x408>
      plan->query_info->plan_json = json_for_arm[i];
    5143:	48 8b 85 30 fe ff ff 	mov    -0x1d0(%rbp),%rax
    514a:	48 8b 00             	mov    (%rax),%rax
    514d:	8b 95 28 fe ff ff    	mov    -0x1d8(%rbp),%edx
    5153:	48 63 d2             	movslq %edx,%rdx
    5156:	48 8b 94 d5 10 ff ff 	mov    -0xf0(%rbp,%rdx,8),%rdx
    515d:	ff 
    515e:	48 89 10             	mov    %rdx,(%rax)
    5161:	eb 18                	jmp    517b <plan_query+0x420>
    } else {
      free(json_for_arm[i]);
    5163:	8b 85 28 fe ff ff    	mov    -0x1d8(%rbp),%eax
    5169:	48 98                	cltq   
    516b:	48 8b 84 c5 10 ff ff 	mov    -0xf0(%rbp,%rax,8),%rax
    5172:	ff 
    5173:	48 89 c7             	mov    %rax,%rdi
    5176:	e8 c5 d1 ff ff       	call   2340 <free@plt>
  for (int i = 0; i < bao_num_arms; i++) {
    517b:	83 85 28 fe ff ff 01 	addl   $0x1,-0x1d8(%rbp)
    5182:	8b 05 14 50 00 00    	mov    0x5014(%rip),%eax        # a19c <bao_num_arms>
    5188:	39 85 28 fe ff ff    	cmp    %eax,-0x1d8(%rbp)
    518e:	7c 9f                	jl     512f <plan_query+0x3d4>
    }
  }
    
  return plan;
    5190:	48 8b 85 30 fe ff ff 	mov    -0x1d0(%rbp),%rax
}
    5197:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    519b:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
    51a2:	00 00 
    51a4:	74 05                	je     51ab <plan_query+0x450>
    51a6:	e8 85 d2 ff ff       	call   2430 <__stack_chk_fail@plt>
    51ab:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
    51af:	c9                   	leave  
    51b0:	c3                   	ret    

00000000000051b1 <arm_to_hint>:

// Given an arm index, produce the SQL statements that would cause PostgreSQL to
// select the same query plan as Bao would.
char* arm_to_hint(int arm) {
    51b1:	f3 0f 1e fa          	endbr64 
    51b5:	55                   	push   %rbp
    51b6:	48 89 e5             	mov    %rsp,%rbp
    51b9:	48 83 ec 40          	sub    $0x40,%rsp
    51bd:	89 7d cc             	mov    %edi,-0x34(%rbp)
    51c0:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    51c7:	00 00 
    51c9:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    51cd:	31 c0                	xor    %eax,%eax
  char* buf;
  size_t size;
  FILE* stream;
  
  stream = open_memstream(&buf, &size);
    51cf:	48 8d 55 e8          	lea    -0x18(%rbp),%rdx
    51d3:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    51d7:	48 89 d6             	mov    %rdx,%rsi
    51da:	48 89 c7             	mov    %rax,%rdi
    51dd:	e8 7e d1 ff ff       	call   2360 <open_memstream@plt>
    51e2:	48 89 45 f0          	mov    %rax,-0x10(%rbp)

  save_arm_options({
    51e6:	48 8b 05 e3 4d 00 00 	mov    0x4de3(%rip),%rax        # 9fd0 <enable_hashjoin@Base>
    51ed:	0f b6 00             	movzbl (%rax),%eax
    51f0:	88 45 da             	mov    %al,-0x26(%rbp)
    51f3:	48 8b 05 ae 4d 00 00 	mov    0x4dae(%rip),%rax        # 9fa8 <enable_mergejoin@Base>
    51fa:	0f b6 00             	movzbl (%rax),%eax
    51fd:	88 45 db             	mov    %al,-0x25(%rbp)
    5200:	48 8b 05 e9 4d 00 00 	mov    0x4de9(%rip),%rax        # 9ff0 <enable_nestloop@Base>
    5207:	0f b6 00             	movzbl (%rax),%eax
    520a:	88 45 dc             	mov    %al,-0x24(%rbp)
    520d:	48 8b 05 9c 4d 00 00 	mov    0x4d9c(%rip),%rax        # 9fb0 <enable_indexscan@Base>
    5214:	0f b6 00             	movzbl (%rax),%eax
    5217:	88 45 dd             	mov    %al,-0x23(%rbp)
    521a:	48 8b 05 4f 4d 00 00 	mov    0x4d4f(%rip),%rax        # 9f70 <enable_seqscan@Base>
    5221:	0f b6 00             	movzbl (%rax),%eax
    5224:	88 45 de             	mov    %al,-0x22(%rbp)
    5227:	48 8b 05 5a 4d 00 00 	mov    0x4d5a(%rip),%rax        # 9f88 <enable_indexonlyscan@Base>
    522e:	0f b6 00             	movzbl (%rax),%eax
    5231:	88 45 df             	mov    %al,-0x21(%rbp)
    5234:	8b 45 cc             	mov    -0x34(%rbp),%eax
    5237:	89 c7                	mov    %eax,%edi
    5239:	e8 91 f0 ff ff       	call   42cf <set_arm_options>
    523e:	48 8b 05 ab 4d 00 00 	mov    0x4dab(%rip),%rax        # 9ff0 <enable_nestloop@Base>
    5245:	0f b6 00             	movzbl (%rax),%eax
    5248:	83 f0 01             	xor    $0x1,%eax
    524b:	84 c0                	test   %al,%al
    524d:	74 1b                	je     526a <arm_to_hint+0xb9>
    524f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    5253:	48 8d 15 94 21 00 00 	lea    0x2194(%rip),%rdx        # 73ee <_fini+0x10f2>
    525a:	48 89 d6             	mov    %rdx,%rsi
    525d:	48 89 c7             	mov    %rax,%rdi
    5260:	b8 00 00 00 00       	mov    $0x0,%eax
    5265:	e8 26 d1 ff ff       	call   2390 <pg_fprintf@plt>
    526a:	48 8b 05 5f 4d 00 00 	mov    0x4d5f(%rip),%rax        # 9fd0 <enable_hashjoin@Base>
    5271:	0f b6 00             	movzbl (%rax),%eax
    5274:	83 f0 01             	xor    $0x1,%eax
    5277:	84 c0                	test   %al,%al
    5279:	74 1b                	je     5296 <arm_to_hint+0xe5>
    527b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    527f:	48 8d 15 85 21 00 00 	lea    0x2185(%rip),%rdx        # 740b <_fini+0x110f>
    5286:	48 89 d6             	mov    %rdx,%rsi
    5289:	48 89 c7             	mov    %rax,%rdi
    528c:	b8 00 00 00 00       	mov    $0x0,%eax
    5291:	e8 fa d0 ff ff       	call   2390 <pg_fprintf@plt>
    5296:	48 8b 05 0b 4d 00 00 	mov    0x4d0b(%rip),%rax        # 9fa8 <enable_mergejoin@Base>
    529d:	0f b6 00             	movzbl (%rax),%eax
    52a0:	83 f0 01             	xor    $0x1,%eax
    52a3:	84 c0                	test   %al,%al
    52a5:	74 1b                	je     52c2 <arm_to_hint+0x111>
    52a7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    52ab:	48 8d 15 76 21 00 00 	lea    0x2176(%rip),%rdx        # 7428 <_fini+0x112c>
    52b2:	48 89 d6             	mov    %rdx,%rsi
    52b5:	48 89 c7             	mov    %rax,%rdi
    52b8:	b8 00 00 00 00       	mov    $0x0,%eax
    52bd:	e8 ce d0 ff ff       	call   2390 <pg_fprintf@plt>
    52c2:	48 8b 05 a7 4c 00 00 	mov    0x4ca7(%rip),%rax        # 9f70 <enable_seqscan@Base>
    52c9:	0f b6 00             	movzbl (%rax),%eax
    52cc:	83 f0 01             	xor    $0x1,%eax
    52cf:	84 c0                	test   %al,%al
    52d1:	74 1b                	je     52ee <arm_to_hint+0x13d>
    52d3:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    52d7:	48 8d 15 68 21 00 00 	lea    0x2168(%rip),%rdx        # 7446 <_fini+0x114a>
    52de:	48 89 d6             	mov    %rdx,%rsi
    52e1:	48 89 c7             	mov    %rax,%rdi
    52e4:	b8 00 00 00 00       	mov    $0x0,%eax
    52e9:	e8 a2 d0 ff ff       	call   2390 <pg_fprintf@plt>
    52ee:	48 8b 05 bb 4c 00 00 	mov    0x4cbb(%rip),%rax        # 9fb0 <enable_indexscan@Base>
    52f5:	0f b6 00             	movzbl (%rax),%eax
    52f8:	83 f0 01             	xor    $0x1,%eax
    52fb:	84 c0                	test   %al,%al
    52fd:	74 1b                	je     531a <arm_to_hint+0x169>
    52ff:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    5303:	48 8d 15 58 21 00 00 	lea    0x2158(%rip),%rdx        # 7462 <_fini+0x1166>
    530a:	48 89 d6             	mov    %rdx,%rsi
    530d:	48 89 c7             	mov    %rax,%rdi
    5310:	b8 00 00 00 00       	mov    $0x0,%eax
    5315:	e8 76 d0 ff ff       	call   2390 <pg_fprintf@plt>
    531a:	48 8b 05 67 4c 00 00 	mov    0x4c67(%rip),%rax        # 9f88 <enable_indexonlyscan@Base>
    5321:	0f b6 00             	movzbl (%rax),%eax
    5324:	83 f0 01             	xor    $0x1,%eax
    5327:	84 c0                	test   %al,%al
    5329:	74 1b                	je     5346 <arm_to_hint+0x195>
    532b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    532f:	48 8d 15 4a 21 00 00 	lea    0x214a(%rip),%rdx        # 7480 <_fini+0x1184>
    5336:	48 89 d6             	mov    %rdx,%rsi
    5339:	48 89 c7             	mov    %rax,%rdi
    533c:	b8 00 00 00 00       	mov    $0x0,%eax
    5341:	e8 4a d0 ff ff       	call   2390 <pg_fprintf@plt>
    5346:	48 8b 05 83 4c 00 00 	mov    0x4c83(%rip),%rax        # 9fd0 <enable_hashjoin@Base>
    534d:	0f b6 55 da          	movzbl -0x26(%rbp),%edx
    5351:	88 10                	mov    %dl,(%rax)
    5353:	48 8b 05 4e 4c 00 00 	mov    0x4c4e(%rip),%rax        # 9fa8 <enable_mergejoin@Base>
    535a:	0f b6 55 db          	movzbl -0x25(%rbp),%edx
    535e:	88 10                	mov    %dl,(%rax)
    5360:	48 8b 05 89 4c 00 00 	mov    0x4c89(%rip),%rax        # 9ff0 <enable_nestloop@Base>
    5367:	0f b6 55 dc          	movzbl -0x24(%rbp),%edx
    536b:	88 10                	mov    %dl,(%rax)
    536d:	48 8b 05 3c 4c 00 00 	mov    0x4c3c(%rip),%rax        # 9fb0 <enable_indexscan@Base>
    5374:	0f b6 55 dd          	movzbl -0x23(%rbp),%edx
    5378:	88 10                	mov    %dl,(%rax)
    537a:	48 8b 05 ef 4b 00 00 	mov    0x4bef(%rip),%rax        # 9f70 <enable_seqscan@Base>
    5381:	0f b6 55 de          	movzbl -0x22(%rbp),%edx
    5385:	88 10                	mov    %dl,(%rax)
    5387:	48 8b 05 fa 4b 00 00 	mov    0x4bfa(%rip),%rax        # 9f88 <enable_indexonlyscan@Base>
    538e:	0f b6 55 df          	movzbl -0x21(%rbp),%edx
    5392:	88 10                	mov    %dl,(%rax)
      if (!enable_seqscan) fprintf(stream, "SET enable_seqscan TO off; ");
      if (!enable_indexscan) fprintf(stream, "SET enable_indexscan TO off; ");
      if (!enable_indexonlyscan) fprintf(stream, "SET enable_indexonlyscan TO off; ");
    });

  fclose(stream);
    5394:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    5398:	48 89 c7             	mov    %rax,%rdi
    539b:	e8 60 d0 ff ff       	call   2400 <fclose@plt>
  
  if (size == 0) return NULL;
    53a0:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    53a4:	48 85 c0             	test   %rax,%rax
    53a7:	75 07                	jne    53b0 <arm_to_hint+0x1ff>
    53a9:	b8 00 00 00 00       	mov    $0x0,%eax
    53ae:	eb 04                	jmp    53b4 <arm_to_hint+0x203>
  return buf;
    53b0:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
}
    53b4:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
    53b8:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
    53bf:	00 00 
    53c1:	74 05                	je     53c8 <arm_to_hint+0x217>
    53c3:	e8 68 d0 ff ff       	call   2430 <__stack_chk_fail@plt>
    53c8:	c9                   	leave  
    53c9:	c3                   	ret    

00000000000053ca <Pg_magic_func>:
#include "commands/explain.h"
#include "tcop/tcopprot.h"



PG_MODULE_MAGIC;
    53ca:	f3 0f 1e fa          	endbr64 
    53ce:	55                   	push   %rbp
    53cf:	48 89 e5             	mov    %rsp,%rbp
    53d2:	48 8d 05 87 27 00 00 	lea    0x2787(%rip),%rax        # 7b60 <Pg_magic_data.4>
    53d9:	5d                   	pop    %rbp
    53da:	c3                   	ret    

00000000000053db <_PG_init>:
static planner_hook_type prev_planner_hook = NULL;
static ExecutorStart_hook_type prev_ExecutorStart = NULL;
static ExecutorEnd_hook_type prev_ExecutorEnd = NULL;
static ExplainOneQuery_hook_type prev_ExplainOneQuery = NULL;

void _PG_init(void) {
    53db:	f3 0f 1e fa          	endbr64 
    53df:	55                   	push   %rbp
    53e0:	48 89 e5             	mov    %rsp,%rbp
  // install each Bao hook
  prev_ExecutorStart = ExecutorStart_hook;
    53e3:	48 8b 05 fe 4b 00 00 	mov    0x4bfe(%rip),%rax        # 9fe8 <ExecutorStart_hook@Base>
    53ea:	48 8b 00             	mov    (%rax),%rax
    53ed:	48 89 05 f4 4d 00 00 	mov    %rax,0x4df4(%rip)        # a1e8 <prev_ExecutorStart>
  ExecutorStart_hook = bao_ExecutorStart;
    53f4:	48 8b 05 ed 4b 00 00 	mov    0x4bed(%rip),%rax        # 9fe8 <ExecutorStart_hook@Base>
    53fb:	48 8d 15 c3 04 00 00 	lea    0x4c3(%rip),%rdx        # 58c5 <bao_ExecutorStart>
    5402:	48 89 10             	mov    %rdx,(%rax)

  prev_ExecutorEnd = ExecutorEnd_hook;
    5405:	48 8b 05 8c 4b 00 00 	mov    0x4b8c(%rip),%rax        # 9f98 <ExecutorEnd_hook@Base>
    540c:	48 8b 00             	mov    (%rax),%rax
    540f:	48 89 05 da 4d 00 00 	mov    %rax,0x4dda(%rip)        # a1f0 <prev_ExecutorEnd>
  ExecutorEnd_hook = bao_ExecutorEnd;
    5416:	48 8b 05 7b 4b 00 00 	mov    0x4b7b(%rip),%rax        # 9f98 <ExecutorEnd_hook@Base>
    541d:	48 8d 15 57 05 00 00 	lea    0x557(%rip),%rdx        # 597b <bao_ExecutorEnd>
    5424:	48 89 10             	mov    %rdx,(%rax)

  prev_planner_hook = planner_hook;
    5427:	48 8b 05 92 4b 00 00 	mov    0x4b92(%rip),%rax        # 9fc0 <planner_hook@Base>
    542e:	48 8b 00             	mov    (%rax),%rax
    5431:	48 89 05 a8 4d 00 00 	mov    %rax,0x4da8(%rip)        # a1e0 <prev_planner_hook>
  planner_hook = bao_planner;
    5438:	48 8b 05 81 4b 00 00 	mov    0x4b81(%rip),%rax        # 9fc0 <planner_hook@Base>
    543f:	48 8d 15 a1 02 00 00 	lea    0x2a1(%rip),%rdx        # 56e7 <bao_planner>
    5446:	48 89 10             	mov    %rdx,(%rax)

  prev_ExplainOneQuery = ExplainOneQuery_hook;
    5449:	48 8b 05 28 4b 00 00 	mov    0x4b28(%rip),%rax        # 9f78 <ExplainOneQuery_hook@Base>
    5450:	48 8b 00             	mov    (%rax),%rax
    5453:	48 89 05 9e 4d 00 00 	mov    %rax,0x4d9e(%rip)        # a1f8 <prev_ExplainOneQuery>
  ExplainOneQuery_hook = bao_ExplainOneQuery;
    545a:	48 8b 05 17 4b 00 00 	mov    0x4b17(%rip),%rax        # 9f78 <ExplainOneQuery_hook@Base>
    5461:	48 8d 15 1d 07 00 00 	lea    0x71d(%rip),%rdx        # 5b85 <bao_ExplainOneQuery>
    5468:	48 89 10             	mov    %rdx,(%rax)

  // define Bao user-visible variables
  DefineCustomBoolVariable(
    546b:	6a 00                	push   $0x0
    546d:	6a 00                	push   $0x0
    546f:	6a 00                	push   $0x0
    5471:	6a 00                	push   $0x0
    5473:	41 b9 06 00 00 00    	mov    $0x6,%r9d
    5479:	41 b8 00 00 00 00    	mov    $0x0,%r8d
    547f:	48 8d 05 42 4d 00 00 	lea    0x4d42(%rip),%rax        # a1c8 <enable_bao>
    5486:	48 89 c1             	mov    %rax,%rcx
    5489:	48 8d 05 18 20 00 00 	lea    0x2018(%rip),%rax        # 74a8 <_fini+0x11ac>
    5490:	48 89 c2             	mov    %rax,%rdx
    5493:	48 8d 05 c9 20 00 00 	lea    0x20c9(%rip),%rax        # 7563 <_fini+0x1267>
    549a:	48 89 c6             	mov    %rax,%rsi
    549d:	48 8d 05 d8 20 00 00 	lea    0x20d8(%rip),%rax        # 757c <_fini+0x1280>
    54a4:	48 89 c7             	mov    %rax,%rdi
    54a7:	e8 24 d1 ff ff       	call   25d0 <DefineCustomBoolVariable@plt>
    54ac:	48 83 c4 20          	add    $0x20,%rsp
    false,
    PGC_USERSET,
    0,
    NULL, NULL, NULL);

  DefineCustomBoolVariable(
    54b0:	6a 00                	push   $0x0
    54b2:	6a 00                	push   $0x0
    54b4:	6a 00                	push   $0x0
    54b6:	6a 00                	push   $0x0
    54b8:	41 b9 06 00 00 00    	mov    $0x6,%r9d
    54be:	41 b8 01 00 00 00    	mov    $0x1,%r8d
    54c4:	48 8d 05 fe 4c 00 00 	lea    0x4cfe(%rip),%rax        # a1c9 <enable_bao_rewards>
    54cb:	48 89 c1             	mov    %rax,%rcx
    54ce:	48 8d 05 b3 20 00 00 	lea    0x20b3(%rip),%rax        # 7588 <_fini+0x128c>
    54d5:	48 89 c2             	mov    %rax,%rdx
    54d8:	48 8d 05 2b 21 00 00 	lea    0x212b(%rip),%rax        # 760a <_fini+0x130e>
    54df:	48 89 c6             	mov    %rax,%rsi
    54e2:	48 8d 05 39 21 00 00 	lea    0x2139(%rip),%rax        # 7622 <_fini+0x1326>
    54e9:	48 89 c7             	mov    %rax,%rdi
    54ec:	e8 df d0 ff ff       	call   25d0 <DefineCustomBoolVariable@plt>
    54f1:	48 83 c4 20          	add    $0x20,%rsp
    true,
    PGC_USERSET,
    0,
    NULL, NULL, NULL);

  DefineCustomBoolVariable(
    54f5:	6a 00                	push   $0x0
    54f7:	6a 00                	push   $0x0
    54f9:	6a 00                	push   $0x0
    54fb:	6a 00                	push   $0x0
    54fd:	41 b9 06 00 00 00    	mov    $0x6,%r9d
    5503:	41 b8 01 00 00 00    	mov    $0x1,%r8d
    5509:	48 8d 05 ba 4c 00 00 	lea    0x4cba(%rip),%rax        # a1ca <enable_bao_selection>
    5510:	48 89 c1             	mov    %rax,%rcx
    5513:	48 8d 05 1e 21 00 00 	lea    0x211e(%rip),%rax        # 7638 <_fini+0x133c>
    551a:	48 89 c2             	mov    %rax,%rdx
    551d:	48 8d 05 9e 21 00 00 	lea    0x219e(%rip),%rax        # 76c2 <_fini+0x13c6>
    5524:	48 89 c6             	mov    %rax,%rsi
    5527:	48 8d 05 b2 21 00 00 	lea    0x21b2(%rip),%rax        # 76e0 <_fini+0x13e4>
    552e:	48 89 c7             	mov    %rax,%rdi
    5531:	e8 9a d0 ff ff       	call   25d0 <DefineCustomBoolVariable@plt>
    5536:	48 83 c4 20          	add    $0x20,%rsp
    true,
    PGC_USERSET,
    0,
    NULL, NULL, NULL);

  DefineCustomStringVariable(
    553a:	6a 00                	push   $0x0
    553c:	6a 00                	push   $0x0
    553e:	6a 00                	push   $0x0
    5540:	6a 00                	push   $0x0
    5542:	41 b9 06 00 00 00    	mov    $0x6,%r9d
    5548:	4c 8d 05 a6 21 00 00 	lea    0x21a6(%rip),%r8        # 76f5 <_fini+0x13f9>
    554f:	48 8d 05 7a 4c 00 00 	lea    0x4c7a(%rip),%rax        # a1d0 <bao_host>
    5556:	48 89 c1             	mov    %rax,%rcx
    5559:	ba 00 00 00 00       	mov    $0x0,%edx
    555e:	48 8d 05 9a 21 00 00 	lea    0x219a(%rip),%rax        # 76ff <_fini+0x1403>
    5565:	48 89 c6             	mov    %rax,%rsi
    5568:	48 8d 05 a0 21 00 00 	lea    0x21a0(%rip),%rax        # 770f <_fini+0x1413>
    556f:	48 89 c7             	mov    %rax,%rdi
    5572:	e8 19 d0 ff ff       	call   2590 <DefineCustomStringVariable@plt>
    5577:	48 83 c4 20          	add    $0x20,%rsp
    "localhost",
    PGC_USERSET,
    0,
    NULL, NULL, NULL);

  DefineCustomIntVariable(
    557b:	6a 00                	push   $0x0
    557d:	6a 00                	push   $0x0
    557f:	6a 00                	push   $0x0
    5581:	6a 00                	push   $0x0
    5583:	6a 06                	push   $0x6
    5585:	68 00 00 01 00       	push   $0x10000
    558a:	41 b9 01 00 00 00    	mov    $0x1,%r9d
    5590:	41 b8 a5 24 00 00    	mov    $0x24a5,%r8d
    5596:	48 8d 05 fb 4b 00 00 	lea    0x4bfb(%rip),%rax        # a198 <bao_port>
    559d:	48 89 c1             	mov    %rax,%rcx
    55a0:	ba 00 00 00 00       	mov    $0x0,%edx
    55a5:	48 8d 05 6c 21 00 00 	lea    0x216c(%rip),%rax        # 7718 <_fini+0x141c>
    55ac:	48 89 c6             	mov    %rax,%rsi
    55af:	48 8d 05 72 21 00 00 	lea    0x2172(%rip),%rax        # 7728 <_fini+0x142c>
    55b6:	48 89 c7             	mov    %rax,%rdi
    55b9:	e8 b2 ce ff ff       	call   2470 <DefineCustomIntVariable@plt>
    55be:	48 83 c4 30          	add    $0x30,%rsp
    9381, 1, 65536, 
    PGC_USERSET,
    0,
    NULL, NULL, NULL);

  DefineCustomIntVariable(
    55c2:	6a 00                	push   $0x0
    55c4:	6a 00                	push   $0x0
    55c6:	6a 00                	push   $0x0
    55c8:	6a 00                	push   $0x0
    55ca:	6a 06                	push   $0x6
    55cc:	6a 1a                	push   $0x1a
    55ce:	41 b9 01 00 00 00    	mov    $0x1,%r9d
    55d4:	41 b8 05 00 00 00    	mov    $0x5,%r8d
    55da:	48 8d 05 bb 4b 00 00 	lea    0x4bbb(%rip),%rax        # a19c <bao_num_arms>
    55e1:	48 89 c1             	mov    %rax,%rcx
    55e4:	48 8d 05 4d 21 00 00 	lea    0x214d(%rip),%rax        # 7738 <_fini+0x143c>
    55eb:	48 89 c2             	mov    %rax,%rdx
    55ee:	48 8d 05 0f 22 00 00 	lea    0x220f(%rip),%rax        # 7804 <_fini+0x1508>
    55f5:	48 89 c6             	mov    %rax,%rsi
    55f8:	48 8d 05 20 22 00 00 	lea    0x2220(%rip),%rax        # 781f <_fini+0x1523>
    55ff:	48 89 c7             	mov    %rax,%rdi
    5602:	e8 69 ce ff ff       	call   2470 <DefineCustomIntVariable@plt>
    5607:	48 83 c4 30          	add    $0x30,%rsp
    5, 1, BAO_MAX_ARMS, 
    PGC_USERSET,
    0,
    NULL, NULL, NULL);

  DefineCustomBoolVariable(
    560b:	6a 00                	push   $0x0
    560d:	6a 00                	push   $0x0
    560f:	6a 00                	push   $0x0
    5611:	6a 00                	push   $0x0
    5613:	41 b9 06 00 00 00    	mov    $0x6,%r9d
    5619:	41 b8 00 00 00 00    	mov    $0x0,%r8d
    561f:	48 8d 05 b2 4b 00 00 	lea    0x4bb2(%rip),%rax        # a1d8 <bao_include_json_in_explain>
    5626:	48 89 c1             	mov    %rax,%rcx
    5629:	48 8d 05 00 22 00 00 	lea    0x2200(%rip),%rax        # 7830 <_fini+0x1534>
    5630:	48 89 c2             	mov    %rax,%rdx
    5633:	48 8d 05 66 22 00 00 	lea    0x2266(%rip),%rax        # 78a0 <_fini+0x15a4>
    563a:	48 89 c6             	mov    %rax,%rsi
    563d:	48 8d 05 92 22 00 00 	lea    0x2292(%rip),%rax        # 78d6 <_fini+0x15da>
    5644:	48 89 c7             	mov    %rax,%rdi
    5647:	e8 84 cf ff ff       	call   25d0 <DefineCustomBoolVariable@plt>
    564c:	48 83 c4 20          	add    $0x20,%rsp
    &bao_include_json_in_explain,
    false,
    PGC_USERSET,
    0,
    NULL, NULL, NULL);
}
    5650:	90                   	nop
    5651:	c9                   	leave  
    5652:	c3                   	ret    

0000000000005653 <_PG_fini>:


void _PG_fini(void) {
    5653:	f3 0f 1e fa          	endbr64 
    5657:	55                   	push   %rbp
    5658:	48 89 e5             	mov    %rsp,%rbp
  ExecutorStart_hook = prev_ExecutorStart;
    565b:	48 8b 15 86 4b 00 00 	mov    0x4b86(%rip),%rdx        # a1e8 <prev_ExecutorStart>
    5662:	48 8b 05 7f 49 00 00 	mov    0x497f(%rip),%rax        # 9fe8 <ExecutorStart_hook@Base>
    5669:	48 89 10             	mov    %rdx,(%rax)

  ExecutorEnd_hook = prev_ExecutorEnd;
    566c:	48 8b 15 7d 4b 00 00 	mov    0x4b7d(%rip),%rdx        # a1f0 <prev_ExecutorEnd>
    5673:	48 8b 05 1e 49 00 00 	mov    0x491e(%rip),%rax        # 9f98 <ExecutorEnd_hook@Base>
    567a:	48 89 10             	mov    %rdx,(%rax)

  planner_hook = prev_planner_hook;
    567d:	48 8b 15 5c 4b 00 00 	mov    0x4b5c(%rip),%rdx        # a1e0 <prev_planner_hook>
    5684:	48 8b 05 35 49 00 00 	mov    0x4935(%rip),%rax        # 9fc0 <planner_hook@Base>
    568b:	48 89 10             	mov    %rdx,(%rax)
  
  ExplainOneQuery_hook = prev_ExplainOneQuery;
    568e:	48 8b 15 63 4b 00 00 	mov    0x4b63(%rip),%rdx        # a1f8 <prev_ExplainOneQuery>
    5695:	48 8b 05 dc 48 00 00 	mov    0x48dc(%rip),%rax        # 9f78 <ExplainOneQuery_hook@Base>
    569c:	48 89 10             	mov    %rdx,(%rax)
  elog(LOG, "finished extension");
    569f:	be 00 00 00 00       	mov    $0x0,%esi
    56a4:	bf 0f 00 00 00       	mov    $0xf,%edi
    56a9:	e8 d2 cd ff ff       	call   2480 <errstart@plt>
    56ae:	84 c0                	test   %al,%al
    56b0:	74 32                	je     56e4 <_PG_fini+0x91>
    56b2:	48 8d 05 39 22 00 00 	lea    0x2239(%rip),%rax        # 78f2 <_fini+0x15f6>
    56b9:	48 89 c7             	mov    %rax,%rdi
    56bc:	b8 00 00 00 00       	mov    $0x0,%eax
    56c1:	e8 8a cd ff ff       	call   2450 <errmsg_internal@plt>
    56c6:	48 8d 05 cb 24 00 00 	lea    0x24cb(%rip),%rax        # 7b98 <__func__.3>
    56cd:	48 89 c2             	mov    %rax,%rdx
    56d0:	be 98 00 00 00       	mov    $0x98,%esi
    56d5:	48 8d 05 29 22 00 00 	lea    0x2229(%rip),%rax        # 7905 <_fini+0x1609>
    56dc:	48 89 c7             	mov    %rax,%rdi
    56df:	e8 8c ce ff ff       	call   2570 <errfinish@plt>
}
    56e4:	90                   	nop
    56e5:	5d                   	pop    %rbp
    56e6:	c3                   	ret    

00000000000056e7 <bao_planner>:

static PlannedStmt* bao_planner(Query *parse,
                                const char *query_string,
                                int cursorOptions,
                                ParamListInfo boundParams) {
    56e7:	f3 0f 1e fa          	endbr64 
    56eb:	55                   	push   %rbp
    56ec:	48 89 e5             	mov    %rsp,%rbp
    56ef:	48 83 ec 50          	sub    $0x50,%rsp
    56f3:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
    56f7:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
    56fb:	89 55 bc             	mov    %edx,-0x44(%rbp)
    56fe:	48 89 4d b0          	mov    %rcx,-0x50(%rbp)
  double plan_time_ms;

  // Final PG plan to execute.
  PlannedStmt* to_return;

  if (prev_planner_hook) {
    5702:	48 8b 05 d7 4a 00 00 	mov    0x4ad7(%rip),%rax        # a1e0 <prev_planner_hook>
    5709:	48 85 c0             	test   %rax,%rax
    570c:	74 66                	je     5774 <bao_planner+0x8d>
    elog(WARNING, "Skipping Bao hook, another planner hook is installed.");
    570e:	be 00 00 00 00       	mov    $0x0,%esi
    5713:	bf 13 00 00 00       	mov    $0x13,%edi
    5718:	e8 63 cd ff ff       	call   2480 <errstart@plt>
    571d:	84 c0                	test   %al,%al
    571f:	74 32                	je     5753 <bao_planner+0x6c>
    5721:	48 8d 05 e8 21 00 00 	lea    0x21e8(%rip),%rax        # 7910 <_fini+0x1614>
    5728:	48 89 c7             	mov    %rax,%rdi
    572b:	b8 00 00 00 00       	mov    $0x0,%eax
    5730:	e8 1b cd ff ff       	call   2450 <errmsg_internal@plt>
    5735:	48 8d 05 6c 24 00 00 	lea    0x246c(%rip),%rax        # 7ba8 <__func__.2>
    573c:	48 89 c2             	mov    %rax,%rdx
    573f:	be ad 00 00 00       	mov    $0xad,%esi
    5744:	48 8d 05 ba 21 00 00 	lea    0x21ba(%rip),%rax        # 7905 <_fini+0x1609>
    574b:	48 89 c7             	mov    %rax,%rdi
    574e:	e8 1d ce ff ff       	call   2570 <errfinish@plt>
    return prev_planner_hook(parse, query_string, cursorOptions,
    5753:	4c 8b 05 86 4a 00 00 	mov    0x4a86(%rip),%r8        # a1e0 <prev_planner_hook>
    575a:	48 8b 4d b0          	mov    -0x50(%rbp),%rcx
    575e:	8b 55 bc             	mov    -0x44(%rbp),%edx
    5761:	48 8b 75 c0          	mov    -0x40(%rbp),%rsi
    5765:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    5769:	48 89 c7             	mov    %rax,%rdi
    576c:	41 ff d0             	call   *%r8
    576f:	e9 4f 01 00 00       	jmp    58c3 <bao_planner+0x1dc>

  // Skip optimizing this query if it is not a SELECT statement (checked by
  // `should_bao_optimize`), or if Bao is not enabled. We do not check
  // enable_bao_selection here, because if enable_bao is on, we still need
  // to attach a query plan to the query to record the reward later.
  if (!should_bao_optimize(parse) || !enable_bao) {
    5774:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    5778:	48 89 c7             	mov    %rax,%rdi
    577b:	e8 aa d1 ff ff       	call   292a <should_bao_optimize>
    5780:	83 f0 01             	xor    $0x1,%eax
    5783:	84 c0                	test   %al,%al
    5785:	75 0e                	jne    5795 <bao_planner+0xae>
    5787:	0f b6 05 3a 4a 00 00 	movzbl 0x4a3a(%rip),%eax        # a1c8 <enable_bao>
    578e:	83 f0 01             	xor    $0x1,%eax
    5791:	84 c0                	test   %al,%al
    5793:	74 1c                	je     57b1 <bao_planner+0xca>
    return standard_planner(parse, query_string, cursorOptions,
    5795:	48 8b 4d b0          	mov    -0x50(%rbp),%rcx
    5799:	8b 55 bc             	mov    -0x44(%rbp),%edx
    579c:	48 8b 75 c0          	mov    -0x40(%rbp),%rsi
    57a0:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    57a4:	48 89 c7             	mov    %rax,%rdi
    57a7:	e8 84 cd ff ff       	call   2530 <standard_planner@plt>
    57ac:	e9 12 01 00 00       	jmp    58c3 <bao_planner+0x1dc>
                            boundParams);
  }


  t_start = clock();
    57b1:	e8 3a cc ff ff       	call   23f0 <clock@plt>
    57b6:	48 89 45 d8          	mov    %rax,-0x28(%rbp)

  // Call Bao query planning routine (in `bao_planner.h`).
  plan = plan_query(parse, query_string, cursorOptions, boundParams);
    57ba:	48 8b 4d b0          	mov    -0x50(%rbp),%rcx
    57be:	8b 55 bc             	mov    -0x44(%rbp),%edx
    57c1:	48 8b 75 c0          	mov    -0x40(%rbp),%rsi
    57c5:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    57c9:	48 89 c7             	mov    %rax,%rdi
    57cc:	e8 8a f5 ff ff       	call   4d5b <plan_query>
    57d1:	48 89 45 e0          	mov    %rax,-0x20(%rbp)

  if (plan == NULL) {
    57d5:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
    57da:	75 1c                	jne    57f8 <bao_planner+0x111>
    // something went wrong, default to the PG plan.
    return standard_planner(parse, query_string, cursorOptions, boundParams);
    57dc:	48 8b 4d b0          	mov    -0x50(%rbp),%rcx
    57e0:	8b 55 bc             	mov    -0x44(%rbp),%edx
    57e3:	48 8b 75 c0          	mov    -0x40(%rbp),%rsi
    57e7:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    57eb:	48 89 c7             	mov    %rax,%rdi
    57ee:	e8 3d cd ff ff       	call   2530 <standard_planner@plt>
    57f3:	e9 cb 00 00 00       	jmp    58c3 <bao_planner+0x1dc>
  }

  // We need some way to associate this query with the BaoQueryInfo data.
  // Hack: connect the Bao plan info to this plan via the queryId field.
  to_return = plan->plan;
    57f8:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    57fc:	48 8b 40 08          	mov    0x8(%rax),%rax
    5800:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  to_return->queryId = (uint64_t)(void*) plan->query_info;
    5804:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    5808:	48 8b 00             	mov    (%rax),%rax
    580b:	48 89 c2             	mov    %rax,%rdx
    580e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    5812:	48 89 50 08          	mov    %rdx,0x8(%rax)
  plan->query_info = NULL;
    5816:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    581a:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  
  t_final = clock();
    5821:	e8 ca cb ff ff       	call   23f0 <clock@plt>
    5826:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  plan_time_ms = ((double)(t_final - t_start)
    582a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    582e:	48 2b 45 d8          	sub    -0x28(%rbp),%rax
    5832:	66 0f ef c0          	pxor   %xmm0,%xmm0
    5836:	f2 48 0f 2a c0       	cvtsi2sd %rax,%xmm0
                  / (double)CLOCKS_PER_SEC) * (double)1000.0;
    583b:	f2 0f 10 15 a5 23 00 	movsd  0x23a5(%rip),%xmm2        # 7be8 <__func__.0+0x18>
    5842:	00 
    5843:	66 0f 28 c8          	movapd %xmm0,%xmm1
    5847:	f2 0f 5e ca          	divsd  %xmm2,%xmm1
  plan_time_ms = ((double)(t_final - t_start)
    584b:	f2 0f 10 05 9d 23 00 	movsd  0x239d(%rip),%xmm0        # 7bf0 <__func__.0+0x20>
    5852:	00 
    5853:	f2 0f 59 c1          	mulsd  %xmm1,%xmm0
    5857:	f2 0f 11 45 f8       	movsd  %xmm0,-0x8(%rbp)
  
  elog(LOG, "Bao planning selected arm %d, in %f CPU ms.",
    585c:	be 00 00 00 00       	mov    $0x0,%esi
    5861:	bf 0f 00 00 00       	mov    $0xf,%edi
    5866:	e8 15 cc ff ff       	call   2480 <errstart@plt>
    586b:	84 c0                	test   %al,%al
    586d:	74 44                	je     58b3 <bao_planner+0x1cc>
    586f:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    5873:	8b 40 10             	mov    0x10(%rax),%eax
    5876:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
    587a:	66 48 0f 6e c2       	movq   %rdx,%xmm0
    587f:	89 c6                	mov    %eax,%esi
    5881:	48 8d 05 c0 20 00 00 	lea    0x20c0(%rip),%rax        # 7948 <_fini+0x164c>
    5888:	48 89 c7             	mov    %rax,%rdi
    588b:	b8 01 00 00 00       	mov    $0x1,%eax
    5890:	e8 bb cb ff ff       	call   2450 <errmsg_internal@plt>
    5895:	48 8d 05 0c 23 00 00 	lea    0x230c(%rip),%rax        # 7ba8 <__func__.2>
    589c:	48 89 c2             	mov    %rax,%rdx
    589f:	be d0 00 00 00       	mov    $0xd0,%esi
    58a4:	48 8d 05 5a 20 00 00 	lea    0x205a(%rip),%rax        # 7905 <_fini+0x1609>
    58ab:	48 89 c7             	mov    %rax,%rdi
    58ae:	e8 bd cc ff ff       	call   2570 <errfinish@plt>
       plan->selection, plan_time_ms);

  // Free the BaoPlan* object now that we have gotten the BaoQueryInfo
  // and after we have gotten the PG plan out of it.
  free_bao_plan(plan);
    58b3:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    58b7:	48 89 c7             	mov    %rax,%rdi
    58ba:	e8 e3 cf ff ff       	call   28a2 <free_bao_plan>
  
  return to_return;
    58bf:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
}
    58c3:	c9                   	leave  
    58c4:	c3                   	ret    

00000000000058c5 <bao_ExecutorStart>:


static void bao_ExecutorStart(QueryDesc *queryDesc, int eflags) {
    58c5:	f3 0f 1e fa          	endbr64 
    58c9:	55                   	push   %rbp
    58ca:	48 89 e5             	mov    %rsp,%rbp
    58cd:	48 83 ec 20          	sub    $0x20,%rsp
    58d1:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    58d5:	89 75 e4             	mov    %esi,-0x1c(%rbp)
  // Code from pg_stat_statements. If needed, setup query timing
  // to use as Bao's reward signal.

  if (prev_ExecutorStart)
    58d8:	48 8b 05 09 49 00 00 	mov    0x4909(%rip),%rax        # a1e8 <prev_ExecutorStart>
    58df:	48 85 c0             	test   %rax,%rax
    58e2:	74 17                	je     58fb <bao_ExecutorStart+0x36>
    prev_ExecutorStart(queryDesc, eflags);
    58e4:	48 8b 0d fd 48 00 00 	mov    0x48fd(%rip),%rcx        # a1e8 <prev_ExecutorStart>
    58eb:	8b 55 e4             	mov    -0x1c(%rbp),%edx
    58ee:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    58f2:	89 d6                	mov    %edx,%esi
    58f4:	48 89 c7             	mov    %rax,%rdi
    58f7:	ff d1                	call   *%rcx
    58f9:	eb 11                	jmp    590c <bao_ExecutorStart+0x47>
  else
    standard_ExecutorStart(queryDesc, eflags);
    58fb:	8b 55 e4             	mov    -0x1c(%rbp),%edx
    58fe:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    5902:	89 d6                	mov    %edx,%esi
    5904:	48 89 c7             	mov    %rax,%rdi
    5907:	e8 c4 cb ff ff       	call   24d0 <standard_ExecutorStart@plt>

  if (enable_bao_rewards
    590c:	0f b6 05 b6 48 00 00 	movzbl 0x48b6(%rip),%eax        # a1c9 <enable_bao_rewards>
    5913:	84 c0                	test   %al,%al
    5915:	74 61                	je     5978 <bao_ExecutorStart+0xb3>
      && queryDesc->plannedstmt->queryId != 0) {
    5917:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    591b:	48 8b 40 08          	mov    0x8(%rax),%rax
    591f:	48 8b 40 08          	mov    0x8(%rax),%rax
    5923:	48 85 c0             	test   %rax,%rax
    5926:	74 50                	je     5978 <bao_ExecutorStart+0xb3>
    if (queryDesc->totaltime == NULL) {
    5928:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    592c:	48 8b 40 68          	mov    0x68(%rax),%rax
    5930:	48 85 c0             	test   %rax,%rax
    5933:	75 43                	jne    5978 <bao_ExecutorStart+0xb3>
      MemoryContext oldcxt;
      
      oldcxt = MemoryContextSwitchTo(queryDesc->estate->es_query_cxt);
    5935:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    5939:	48 8b 40 50          	mov    0x50(%rax),%rax
    593d:	48 8b 80 a0 00 00 00 	mov    0xa0(%rax),%rax
    5944:	48 89 c7             	mov    %rax,%rdi
    5947:	e8 8d cd ff ff       	call   26d9 <MemoryContextSwitchTo>
    594c:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
      queryDesc->totaltime = InstrAlloc(1, INSTRUMENT_TIMER, true);
    5950:	ba 01 00 00 00       	mov    $0x1,%edx
    5955:	be 01 00 00 00       	mov    $0x1,%esi
    595a:	bf 01 00 00 00       	mov    $0x1,%edi
    595f:	e8 ec cb ff ff       	call   2550 <InstrAlloc@plt>
    5964:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    5968:	48 89 42 68          	mov    %rax,0x68(%rdx)
      MemoryContextSwitchTo(oldcxt);
    596c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    5970:	48 89 c7             	mov    %rax,%rdi
    5973:	e8 61 cd ff ff       	call   26d9 <MemoryContextSwitchTo>
    }
  }
}
    5978:	90                   	nop
    5979:	c9                   	leave  
    597a:	c3                   	ret    

000000000000597b <bao_ExecutorEnd>:

static void bao_ExecutorEnd(QueryDesc *queryDesc) {
    597b:	f3 0f 1e fa          	endbr64 
    597f:	55                   	push   %rbp
    5980:	48 89 e5             	mov    %rsp,%rbp
    5983:	48 83 ec 30          	sub    $0x30,%rsp
    5987:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  
  BaoQueryInfo* bao_query_info;
  char* r_json;
  int conn_fd;

  if (enable_bao_rewards && should_report_reward(queryDesc)) {
    598b:	0f b6 05 37 48 00 00 	movzbl 0x4837(%rip),%eax        # a1c9 <enable_bao_rewards>
    5992:	84 c0                	test   %al,%al
    5994:	0f 84 b9 01 00 00    	je     5b53 <bao_ExecutorEnd+0x1d8>
    599a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    599e:	48 89 c7             	mov    %rax,%rdi
    59a1:	e8 3f cf ff ff       	call   28e5 <should_report_reward>
    59a6:	84 c0                	test   %al,%al
    59a8:	0f 84 a5 01 00 00    	je     5b53 <bao_ExecutorEnd+0x1d8>
    // We are tracking rewards for queries, and this query was
    // eligible for optimization by Bao.
    conn_fd = connect_to_bao(bao_host, bao_port);
    59ae:	8b 15 e4 47 00 00    	mov    0x47e4(%rip),%edx        # a198 <bao_port>
    59b4:	48 8b 05 15 48 00 00 	mov    0x4815(%rip),%rax        # a1d0 <bao_host>
    59bb:	89 d6                	mov    %edx,%esi
    59bd:	48 89 c7             	mov    %rax,%rdi
    59c0:	e8 4b d1 ff ff       	call   2b10 <connect_to_bao>
    59c5:	89 45 ec             	mov    %eax,-0x14(%rbp)
    if (conn_fd < 0) {
    59c8:	83 7d ec 00          	cmpl   $0x0,-0x14(%rbp)
    59cc:	79 4e                	jns    5a1c <bao_ExecutorEnd+0xa1>
      elog(WARNING, "Unable to connect to Bao server, reward for query will be dropped.");
    59ce:	be 00 00 00 00       	mov    $0x0,%esi
    59d3:	bf 13 00 00 00       	mov    $0x13,%edi
    59d8:	e8 a3 ca ff ff       	call   2480 <errstart@plt>
    59dd:	84 c0                	test   %al,%al
    59df:	0f 84 9a 01 00 00    	je     5b7f <bao_ExecutorEnd+0x204>
    59e5:	48 8d 05 8c 1f 00 00 	lea    0x1f8c(%rip),%rax        # 7978 <_fini+0x167c>
    59ec:	48 89 c7             	mov    %rax,%rdi
    59ef:	b8 00 00 00 00       	mov    $0x0,%eax
    59f4:	e8 57 ca ff ff       	call   2450 <errmsg_internal@plt>
    59f9:	48 8d 05 c0 21 00 00 	lea    0x21c0(%rip),%rax        # 7bc0 <__func__.1>
    5a00:	48 89 c2             	mov    %rax,%rdx
    5a03:	be fd 00 00 00       	mov    $0xfd,%esi
    5a08:	48 8d 05 f6 1e 00 00 	lea    0x1ef6(%rip),%rax        # 7905 <_fini+0x1609>
    5a0f:	48 89 c7             	mov    %rax,%rdi
    5a12:	e8 59 cb ff ff       	call   2570 <errfinish@plt>
      return;
    5a17:	e9 63 01 00 00       	jmp    5b7f <bao_ExecutorEnd+0x204>
    }

    if (!queryDesc->totaltime) {
    5a1c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    5a20:	48 8b 40 68          	mov    0x68(%rax),%rax
    5a24:	48 85 c0             	test   %rax,%rax
    5a27:	75 4e                	jne    5a77 <bao_ExecutorEnd+0xfc>
      elog(WARNING, "Bao could not read instrumentation result, reward for query will be dropped.");
    5a29:	be 00 00 00 00       	mov    $0x0,%esi
    5a2e:	bf 13 00 00 00       	mov    $0x13,%edi
    5a33:	e8 48 ca ff ff       	call   2480 <errstart@plt>
    5a38:	84 c0                	test   %al,%al
    5a3a:	0f 84 42 01 00 00    	je     5b82 <bao_ExecutorEnd+0x207>
    5a40:	48 8d 05 79 1f 00 00 	lea    0x1f79(%rip),%rax        # 79c0 <_fini+0x16c4>
    5a47:	48 89 c7             	mov    %rax,%rdi
    5a4a:	b8 00 00 00 00       	mov    $0x0,%eax
    5a4f:	e8 fc c9 ff ff       	call   2450 <errmsg_internal@plt>
    5a54:	48 8d 05 65 21 00 00 	lea    0x2165(%rip),%rax        # 7bc0 <__func__.1>
    5a5b:	48 89 c2             	mov    %rax,%rdx
    5a5e:	be 02 01 00 00       	mov    $0x102,%esi
    5a63:	48 8d 05 9b 1e 00 00 	lea    0x1e9b(%rip),%rax        # 7905 <_fini+0x1609>
    5a6a:	48 89 c7             	mov    %rax,%rdi
    5a6d:	e8 fe ca ff ff       	call   2570 <errfinish@plt>
      return;
    5a72:	e9 0b 01 00 00       	jmp    5b82 <bao_ExecutorEnd+0x207>
    }

    // Finalize the instrumentation so we can read the final time.
    InstrEndLoop(queryDesc->totaltime);
    5a77:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    5a7b:	48 8b 40 68          	mov    0x68(%rax),%rax
    5a7f:	48 89 c7             	mov    %rax,%rdi
    5a82:	e8 b9 ca ff ff       	call   2540 <InstrEndLoop@plt>

    // Generate a JSON blob with our reward.
    r_json = reward_json(queryDesc->totaltime->total * 1000.0);
    5a87:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    5a8b:	48 8b 40 68          	mov    0x68(%rax),%rax
    5a8f:	f2 0f 10 88 d8 00 00 	movsd  0xd8(%rax),%xmm1
    5a96:	00 
    5a97:	f2 0f 10 05 51 21 00 	movsd  0x2151(%rip),%xmm0        # 7bf0 <__func__.0+0x20>
    5a9e:	00 
    5a9f:	f2 0f 59 c8          	mulsd  %xmm0,%xmm1
    5aa3:	66 48 0f 7e c8       	movq   %xmm1,%rax
    5aa8:	66 48 0f 6e c0       	movq   %rax,%xmm0
    5aad:	e8 65 cf ff ff       	call   2a17 <reward_json>
    5ab2:	48 89 45 f0          	mov    %rax,-0x10(%rbp)

    // Extract the BaoQueryInfo, which we hid inside the queryId of the
    // PlannedStmt. `should_report_reward` ensures it is set.
    bao_query_info = (BaoQueryInfo*)(void*)queryDesc->plannedstmt->queryId;
    5ab6:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    5aba:	48 8b 40 08          	mov    0x8(%rax),%rax
    5abe:	48 8b 40 08          	mov    0x8(%rax),%rax
    5ac2:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    queryDesc->plannedstmt->queryId = 0;
    5ac6:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    5aca:	48 8b 40 08          	mov    0x8(%rax),%rax
    5ace:	48 c7 40 08 00 00 00 	movq   $0x0,0x8(%rax)
    5ad5:	00 

    // Write out the query plan, buffer information, and reward to the Bao
    // server.
    write_all_to_socket(conn_fd, START_FEEDBACK_MESSAGE);
    5ad6:	48 8b 15 cb 46 00 00 	mov    0x46cb(%rip),%rdx        # a1a8 <START_FEEDBACK_MESSAGE>
    5add:	8b 45 ec             	mov    -0x14(%rbp),%eax
    5ae0:	48 89 d6             	mov    %rdx,%rsi
    5ae3:	89 c7                	mov    %eax,%edi
    5ae5:	e8 b9 cf ff ff       	call   2aa3 <write_all_to_socket>
    write_all_to_socket(conn_fd, bao_query_info->plan_json);
    5aea:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    5aee:	48 8b 10             	mov    (%rax),%rdx
    5af1:	8b 45 ec             	mov    -0x14(%rbp),%eax
    5af4:	48 89 d6             	mov    %rdx,%rsi
    5af7:	89 c7                	mov    %eax,%edi
    5af9:	e8 a5 cf ff ff       	call   2aa3 <write_all_to_socket>
    write_all_to_socket(conn_fd, bao_query_info->buffer_json);
    5afe:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    5b02:	48 8b 50 08          	mov    0x8(%rax),%rdx
    5b06:	8b 45 ec             	mov    -0x14(%rbp),%eax
    5b09:	48 89 d6             	mov    %rdx,%rsi
    5b0c:	89 c7                	mov    %eax,%edi
    5b0e:	e8 90 cf ff ff       	call   2aa3 <write_all_to_socket>
    write_all_to_socket(conn_fd, r_json);
    5b13:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    5b17:	8b 45 ec             	mov    -0x14(%rbp),%eax
    5b1a:	48 89 d6             	mov    %rdx,%rsi
    5b1d:	89 c7                	mov    %eax,%edi
    5b1f:	e8 7f cf ff ff       	call   2aa3 <write_all_to_socket>
    write_all_to_socket(conn_fd, TERMINAL_MESSAGE);
    5b24:	48 8b 15 8d 46 00 00 	mov    0x468d(%rip),%rdx        # a1b8 <TERMINAL_MESSAGE>
    5b2b:	8b 45 ec             	mov    -0x14(%rbp),%eax
    5b2e:	48 89 d6             	mov    %rdx,%rsi
    5b31:	89 c7                	mov    %eax,%edi
    5b33:	e8 6b cf ff ff       	call   2aa3 <write_all_to_socket>
    shutdown(conn_fd, SHUT_RDWR);
    5b38:	8b 45 ec             	mov    -0x14(%rbp),%eax
    5b3b:	be 02 00 00 00       	mov    $0x2,%esi
    5b40:	89 c7                	mov    %eax,%edi
    5b42:	e8 c9 c8 ff ff       	call   2410 <shutdown@plt>

    free_bao_query_info(bao_query_info);
    5b47:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    5b4b:	48 89 c7             	mov    %rax,%rdi
    5b4e:	e8 ef cc ff ff       	call   2842 <free_bao_query_info>
  }
  
  if (prev_ExecutorEnd) {
    5b53:	48 8b 05 96 46 00 00 	mov    0x4696(%rip),%rax        # a1f0 <prev_ExecutorEnd>
    5b5a:	48 85 c0             	test   %rax,%rax
    5b5d:	74 12                	je     5b71 <bao_ExecutorEnd+0x1f6>
    prev_ExecutorEnd(queryDesc);
    5b5f:	48 8b 15 8a 46 00 00 	mov    0x468a(%rip),%rdx        # a1f0 <prev_ExecutorEnd>
    5b66:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    5b6a:	48 89 c7             	mov    %rax,%rdi
    5b6d:	ff d2                	call   *%rdx
    5b6f:	eb 12                	jmp    5b83 <bao_ExecutorEnd+0x208>
  } else {
    standard_ExecutorEnd(queryDesc);
    5b71:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    5b75:	48 89 c7             	mov    %rax,%rdi
    5b78:	e8 33 ca ff ff       	call   25b0 <standard_ExecutorEnd@plt>
    5b7d:	eb 04                	jmp    5b83 <bao_ExecutorEnd+0x208>
      return;
    5b7f:	90                   	nop
    5b80:	eb 01                	jmp    5b83 <bao_ExecutorEnd+0x208>
      return;
    5b82:	90                   	nop
  }
}
    5b83:	c9                   	leave  
    5b84:	c3                   	ret    

0000000000005b85 <bao_ExplainOneQuery>:

static void bao_ExplainOneQuery(Query* query, int cursorOptions, IntoClause* into,
                                ExplainState* es, const char* queryString,
                                ParamListInfo params, QueryEnvironment* queryEnv) {
    5b85:	f3 0f 1e fa          	endbr64 
    5b89:	55                   	push   %rbp
    5b8a:	48 89 e5             	mov    %rsp,%rbp
    5b8d:	53                   	push   %rbx
    5b8e:	48 81 ec c8 01 00 00 	sub    $0x1c8,%rsp
    5b95:	48 89 bd 68 fe ff ff 	mov    %rdi,-0x198(%rbp)
    5b9c:	89 b5 64 fe ff ff    	mov    %esi,-0x19c(%rbp)
    5ba2:	48 89 95 58 fe ff ff 	mov    %rdx,-0x1a8(%rbp)
    5ba9:	48 89 8d 50 fe ff ff 	mov    %rcx,-0x1b0(%rbp)
    5bb0:	4c 89 85 48 fe ff ff 	mov    %r8,-0x1b8(%rbp)
    5bb7:	4c 89 8d 40 fe ff ff 	mov    %r9,-0x1c0(%rbp)
    5bbe:	48 8b 45 10          	mov    0x10(%rbp),%rax
    5bc2:	48 89 85 38 fe ff ff 	mov    %rax,-0x1c8(%rbp)
    5bc9:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    5bd0:	00 00 
    5bd2:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    5bd6:	31 c0                	xor    %eax,%eax
  char* buffer_json;
  char* plan_json;
  double prediction;
  char* hint_text;
  bool old_selection_val;
  bool connected = false;
    5bd8:	c6 85 7a fe ff ff 00 	movb   $0x0,-0x186(%rbp)
  // by Bao.
  
  // TODO: right now we add to the start of the EXPLAIN output, because I cannot
  //       figure out how to add to the end of it. 
  
  if (prev_ExplainOneQuery) {
    5bdf:	48 8b 05 12 46 00 00 	mov    0x4612(%rip),%rax        # a1f8 <prev_ExplainOneQuery>
    5be6:	48 85 c0             	test   %rax,%rax
    5be9:	74 4a                	je     5c35 <bao_ExplainOneQuery+0xb0>
    prev_ExplainOneQuery(query, cursorOptions, into, es,
    5beb:	4c 8b 15 06 46 00 00 	mov    0x4606(%rip),%r10        # a1f8 <prev_ExplainOneQuery>
    5bf2:	4c 8b 85 40 fe ff ff 	mov    -0x1c0(%rbp),%r8
    5bf9:	48 8b bd 48 fe ff ff 	mov    -0x1b8(%rbp),%rdi
    5c00:	48 8b 8d 50 fe ff ff 	mov    -0x1b0(%rbp),%rcx
    5c07:	48 8b 95 58 fe ff ff 	mov    -0x1a8(%rbp),%rdx
    5c0e:	8b b5 64 fe ff ff    	mov    -0x19c(%rbp),%esi
    5c14:	48 8b 85 68 fe ff ff 	mov    -0x198(%rbp),%rax
    5c1b:	48 83 ec 08          	sub    $0x8,%rsp
    5c1f:	ff b5 38 fe ff ff    	push   -0x1c8(%rbp)
    5c25:	4d 89 c1             	mov    %r8,%r9
    5c28:	49 89 f8             	mov    %rdi,%r8
    5c2b:	48 89 c7             	mov    %rax,%rdi
    5c2e:	41 ff d2             	call   *%r10
    5c31:	48 83 c4 10          	add    $0x10,%rsp

  // There should really be a standard_ExplainOneQuery, but there
  // isn't, so we will do our best. We will replicate some PG code
  // here as a consequence.

  if (es->buffers)
    5c35:	48 8b 85 50 fe ff ff 	mov    -0x1b0(%rbp),%rax
    5c3c:	0f b6 40 0b          	movzbl 0xb(%rax),%eax
    5c40:	84 c0                	test   %al,%al
    5c42:	0f 84 d2 00 00 00    	je     5d1a <bao_ExplainOneQuery+0x195>
    bufusage_start = pgBufferUsage;
    5c48:	48 8b 05 51 43 00 00 	mov    0x4351(%rip),%rax        # 9fa0 <pgBufferUsage@Base>
    5c4f:	48 8b 08             	mov    (%rax),%rcx
    5c52:	48 8b 58 08          	mov    0x8(%rax),%rbx
    5c56:	48 89 8d c0 fe ff ff 	mov    %rcx,-0x140(%rbp)
    5c5d:	48 89 9d c8 fe ff ff 	mov    %rbx,-0x138(%rbp)
    5c64:	48 8b 48 10          	mov    0x10(%rax),%rcx
    5c68:	48 8b 58 18          	mov    0x18(%rax),%rbx
    5c6c:	48 89 8d d0 fe ff ff 	mov    %rcx,-0x130(%rbp)
    5c73:	48 89 9d d8 fe ff ff 	mov    %rbx,-0x128(%rbp)
    5c7a:	48 8b 48 20          	mov    0x20(%rax),%rcx
    5c7e:	48 8b 58 28          	mov    0x28(%rax),%rbx
    5c82:	48 89 8d e0 fe ff ff 	mov    %rcx,-0x120(%rbp)
    5c89:	48 89 9d e8 fe ff ff 	mov    %rbx,-0x118(%rbp)
    5c90:	48 8b 48 30          	mov    0x30(%rax),%rcx
    5c94:	48 8b 58 38          	mov    0x38(%rax),%rbx
    5c98:	48 89 8d f0 fe ff ff 	mov    %rcx,-0x110(%rbp)
    5c9f:	48 89 9d f8 fe ff ff 	mov    %rbx,-0x108(%rbp)
    5ca6:	48 8b 48 40          	mov    0x40(%rax),%rcx
    5caa:	48 8b 58 48          	mov    0x48(%rax),%rbx
    5cae:	48 89 8d 00 ff ff ff 	mov    %rcx,-0x100(%rbp)
    5cb5:	48 89 9d 08 ff ff ff 	mov    %rbx,-0xf8(%rbp)
    5cbc:	48 8b 48 50          	mov    0x50(%rax),%rcx
    5cc0:	48 8b 58 58          	mov    0x58(%rax),%rbx
    5cc4:	48 89 8d 10 ff ff ff 	mov    %rcx,-0xf0(%rbp)
    5ccb:	48 89 9d 18 ff ff ff 	mov    %rbx,-0xe8(%rbp)
    5cd2:	48 8b 48 60          	mov    0x60(%rax),%rcx
    5cd6:	48 8b 58 68          	mov    0x68(%rax),%rbx
    5cda:	48 89 8d 20 ff ff ff 	mov    %rcx,-0xe0(%rbp)
    5ce1:	48 89 9d 28 ff ff ff 	mov    %rbx,-0xd8(%rbp)
    5ce8:	48 8b 48 70          	mov    0x70(%rax),%rcx
    5cec:	48 8b 58 78          	mov    0x78(%rax),%rbx
    5cf0:	48 89 8d 30 ff ff ff 	mov    %rcx,-0xd0(%rbp)
    5cf7:	48 89 9d 38 ff ff ff 	mov    %rbx,-0xc8(%rbp)
    5cfe:	48 8b 90 88 00 00 00 	mov    0x88(%rax),%rdx
    5d05:	48 8b 80 80 00 00 00 	mov    0x80(%rax),%rax
    5d0c:	48 89 85 40 ff ff ff 	mov    %rax,-0xc0(%rbp)
    5d13:	48 89 95 48 ff ff ff 	mov    %rdx,-0xb8(%rbp)
    
  INSTR_TIME_SET_CURRENT(plan_start);
    5d1a:	e8 cb ca ff ff       	call   27ea <pg_clock_gettime_ns>
    5d1f:	48 89 85 80 fe ff ff 	mov    %rax,-0x180(%rbp)

  plan = (planner_hook ? planner_hook(query, queryString, cursorOptions, params)
    5d26:	48 8b 05 93 42 00 00 	mov    0x4293(%rip),%rax        # 9fc0 <planner_hook@Base>
    5d2d:	48 8b 00             	mov    (%rax),%rax
          : standard_planner(query, queryString, cursorOptions, params));
    5d30:	48 85 c0             	test   %rax,%rax
    5d33:	74 2d                	je     5d62 <bao_ExplainOneQuery+0x1dd>
  plan = (planner_hook ? planner_hook(query, queryString, cursorOptions, params)
    5d35:	48 8b 05 84 42 00 00 	mov    0x4284(%rip),%rax        # 9fc0 <planner_hook@Base>
    5d3c:	4c 8b 00             	mov    (%rax),%r8
    5d3f:	48 8b 8d 40 fe ff ff 	mov    -0x1c0(%rbp),%rcx
    5d46:	8b 95 64 fe ff ff    	mov    -0x19c(%rbp),%edx
    5d4c:	48 8b b5 48 fe ff ff 	mov    -0x1b8(%rbp),%rsi
    5d53:	48 8b 85 68 fe ff ff 	mov    -0x198(%rbp),%rax
    5d5a:	48 89 c7             	mov    %rax,%rdi
    5d5d:	41 ff d0             	call   *%r8
    5d60:	eb 23                	jmp    5d85 <bao_ExplainOneQuery+0x200>
          : standard_planner(query, queryString, cursorOptions, params));
    5d62:	48 8b 8d 40 fe ff ff 	mov    -0x1c0(%rbp),%rcx
    5d69:	8b 95 64 fe ff ff    	mov    -0x19c(%rbp),%edx
    5d6f:	48 8b b5 48 fe ff ff 	mov    -0x1b8(%rbp),%rsi
    5d76:	48 8b 85 68 fe ff ff 	mov    -0x198(%rbp),%rax
    5d7d:	48 89 c7             	mov    %rax,%rdi
    5d80:	e8 ab c7 ff ff       	call   2530 <standard_planner@plt>
  plan = (planner_hook ? planner_hook(query, queryString, cursorOptions, params)
    5d85:	48 89 85 98 fe ff ff 	mov    %rax,-0x168(%rbp)
  INSTR_TIME_SET_CURRENT(plan_duration);
    5d8c:	e8 59 ca ff ff       	call   27ea <pg_clock_gettime_ns>
    5d91:	48 89 85 88 fe ff ff 	mov    %rax,-0x178(%rbp)
  INSTR_TIME_SUBTRACT(plan_duration, plan_start);
    5d98:	48 8b 85 88 fe ff ff 	mov    -0x178(%rbp),%rax
    5d9f:	48 8b 95 80 fe ff ff 	mov    -0x180(%rbp),%rdx
    5da6:	48 29 d0             	sub    %rdx,%rax
    5da9:	48 89 85 88 fe ff ff 	mov    %rax,-0x178(%rbp)

  /* calc differences of buffer counters. */
  if (es->buffers)
    5db0:	48 8b 85 50 fe ff ff 	mov    -0x1b0(%rbp),%rax
    5db7:	0f b6 40 0b          	movzbl 0xb(%rax),%eax
    5dbb:	84 c0                	test   %al,%al
    5dbd:	74 39                	je     5df8 <bao_ExplainOneQuery+0x273>
  {
    memset(&bufusage, 0, sizeof(BufferUsage));
    5dbf:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
    5dc6:	ba 90 00 00 00       	mov    $0x90,%edx
    5dcb:	be 00 00 00 00       	mov    $0x0,%esi
    5dd0:	48 89 c7             	mov    %rax,%rdi
    5dd3:	e8 88 c6 ff ff       	call   2460 <memset@plt>
    BufferUsageAccumDiff(&bufusage, &pgBufferUsage, &bufusage_start);
    5dd8:	48 8d 95 c0 fe ff ff 	lea    -0x140(%rbp),%rdx
    5ddf:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
    5de6:	48 8b 0d b3 41 00 00 	mov    0x41b3(%rip),%rcx        # 9fa0 <pgBufferUsage@Base>
    5ded:	48 89 ce             	mov    %rcx,%rsi
    5df0:	48 89 c7             	mov    %rax,%rdi
    5df3:	e8 e8 c7 ff ff       	call   25e0 <BufferUsageAccumDiff@plt>
  }

  if (!enable_bao) {
    5df8:	0f b6 05 c9 43 00 00 	movzbl 0x43c9(%rip),%eax        # a1c8 <enable_bao>
    5dff:	83 f0 01             	xor    $0x1,%eax
    5e02:	84 c0                	test   %al,%al
    5e04:	74 61                	je     5e67 <bao_ExplainOneQuery+0x2e2>
    // Bao is disabled, do the deault explain thing.

		ExplainOnePlan(plan, into, es, queryString, params, queryEnv,
					   &plan_duration, (es->buffers ? &bufusage : NULL));
    5e06:	48 8b 85 50 fe ff ff 	mov    -0x1b0(%rbp),%rax
    5e0d:	0f b6 40 0b          	movzbl 0xb(%rax),%eax
		ExplainOnePlan(plan, into, es, queryString, params, queryEnv,
    5e11:	84 c0                	test   %al,%al
    5e13:	74 09                	je     5e1e <bao_ExplainOneQuery+0x299>
    5e15:	48 8d bd 50 ff ff ff 	lea    -0xb0(%rbp),%rdi
    5e1c:	eb 05                	jmp    5e23 <bao_ExplainOneQuery+0x29e>
    5e1e:	bf 00 00 00 00       	mov    $0x0,%edi
    5e23:	4c 8b 8d 38 fe ff ff 	mov    -0x1c8(%rbp),%r9
    5e2a:	4c 8b 85 40 fe ff ff 	mov    -0x1c0(%rbp),%r8
    5e31:	48 8b 8d 48 fe ff ff 	mov    -0x1b8(%rbp),%rcx
    5e38:	48 8b 95 50 fe ff ff 	mov    -0x1b0(%rbp),%rdx
    5e3f:	48 8b b5 58 fe ff ff 	mov    -0x1a8(%rbp),%rsi
    5e46:	48 8b 85 98 fe ff ff 	mov    -0x168(%rbp),%rax
    5e4d:	57                   	push   %rdi
    5e4e:	48 8d bd 88 fe ff ff 	lea    -0x178(%rbp),%rdi
    5e55:	57                   	push   %rdi
    5e56:	48 89 c7             	mov    %rax,%rdi
    5e59:	e8 82 c5 ff ff       	call   23e0 <ExplainOnePlan@plt>
    5e5e:	48 83 c4 10          	add    $0x10,%rsp
    5e62:	e9 79 04 00 00       	jmp    62e0 <bao_ExplainOneQuery+0x75b>
    return;
  }

  buffer_json = buffer_state();
    5e67:	b8 00 00 00 00       	mov    $0x0,%eax
    5e6c:	e8 fa cd ff ff       	call   2c6b <buffer_state>
    5e71:	48 89 85 a0 fe ff ff 	mov    %rax,-0x160(%rbp)
  plan_json = plan_to_json(plan);
    5e78:	48 8b 85 98 fe ff ff 	mov    -0x168(%rbp),%rax
    5e7f:	48 89 c7             	mov    %rax,%rdi
    5e82:	e8 08 ee ff ff       	call   4c8f <plan_to_json>
    5e87:	48 89 85 a8 fe ff ff 	mov    %rax,-0x158(%rbp)

  // Ask the Bao server for an estimate for this plan.
  conn_fd = connect_to_bao(bao_host, bao_port);
    5e8e:	8b 15 04 43 00 00    	mov    0x4304(%rip),%edx        # a198 <bao_port>
    5e94:	48 8b 05 35 43 00 00 	mov    0x4335(%rip),%rax        # a1d0 <bao_host>
    5e9b:	89 d6                	mov    %edx,%esi
    5e9d:	48 89 c7             	mov    %rax,%rdi
    5ea0:	e8 6b cc ff ff       	call   2b10 <connect_to_bao>
    5ea5:	89 85 7c fe ff ff    	mov    %eax,-0x184(%rbp)
  if (conn_fd < 0) {
    5eab:	83 bd 7c fe ff ff 00 	cmpl   $0x0,-0x184(%rbp)
    5eb2:	79 5a                	jns    5f0e <bao_ExplainOneQuery+0x389>
    elog(WARNING, "Unable to connect to Bao server, no prediction provided.");
    5eb4:	be 00 00 00 00       	mov    $0x0,%esi
    5eb9:	bf 13 00 00 00       	mov    $0x13,%edi
    5ebe:	e8 bd c5 ff ff       	call   2480 <errstart@plt>
    5ec3:	84 c0                	test   %al,%al
    5ec5:	74 32                	je     5ef9 <bao_ExplainOneQuery+0x374>
    5ec7:	48 8d 05 42 1b 00 00 	lea    0x1b42(%rip),%rax        # 7a10 <_fini+0x1714>
    5ece:	48 89 c7             	mov    %rax,%rdi
    5ed1:	b8 00 00 00 00       	mov    $0x0,%eax
    5ed6:	e8 75 c5 ff ff       	call   2450 <errmsg_internal@plt>
    5edb:	48 8d 05 ee 1c 00 00 	lea    0x1cee(%rip),%rax        # 7bd0 <__func__.0>
    5ee2:	48 89 c2             	mov    %rax,%rdx
    5ee5:	be 64 01 00 00       	mov    $0x164,%esi
    5eea:	48 8d 05 14 1a 00 00 	lea    0x1a14(%rip),%rax        # 7905 <_fini+0x1609>
    5ef1:	48 89 c7             	mov    %rax,%rdi
    5ef4:	e8 77 c6 ff ff       	call   2570 <errfinish@plt>
    prediction = NAN;
    5ef9:	f2 0f 10 05 f7 1c 00 	movsd  0x1cf7(%rip),%xmm0        # 7bf8 <__func__.0+0x28>
    5f00:	00 
    5f01:	f2 0f 11 85 90 fe ff 	movsd  %xmm0,-0x170(%rbp)
    5f08:	ff 
    5f09:	e9 fe 00 00 00       	jmp    600c <bao_ExplainOneQuery+0x487>
  } else {
    write_all_to_socket(conn_fd, START_PREDICTION_MESSAGE);
    5f0e:	48 8b 15 9b 42 00 00 	mov    0x429b(%rip),%rdx        # a1b0 <START_PREDICTION_MESSAGE>
    5f15:	8b 85 7c fe ff ff    	mov    -0x184(%rbp),%eax
    5f1b:	48 89 d6             	mov    %rdx,%rsi
    5f1e:	89 c7                	mov    %eax,%edi
    5f20:	e8 7e cb ff ff       	call   2aa3 <write_all_to_socket>
    write_all_to_socket(conn_fd, plan_json);
    5f25:	48 8b 95 a8 fe ff ff 	mov    -0x158(%rbp),%rdx
    5f2c:	8b 85 7c fe ff ff    	mov    -0x184(%rbp),%eax
    5f32:	48 89 d6             	mov    %rdx,%rsi
    5f35:	89 c7                	mov    %eax,%edi
    5f37:	e8 67 cb ff ff       	call   2aa3 <write_all_to_socket>
    write_all_to_socket(conn_fd, buffer_json);
    5f3c:	48 8b 95 a0 fe ff ff 	mov    -0x160(%rbp),%rdx
    5f43:	8b 85 7c fe ff ff    	mov    -0x184(%rbp),%eax
    5f49:	48 89 d6             	mov    %rdx,%rsi
    5f4c:	89 c7                	mov    %eax,%edi
    5f4e:	e8 50 cb ff ff       	call   2aa3 <write_all_to_socket>
    write_all_to_socket(conn_fd, TERMINAL_MESSAGE);
    5f53:	48 8b 15 5e 42 00 00 	mov    0x425e(%rip),%rdx        # a1b8 <TERMINAL_MESSAGE>
    5f5a:	8b 85 7c fe ff ff    	mov    -0x184(%rbp),%eax
    5f60:	48 89 d6             	mov    %rdx,%rsi
    5f63:	89 c7                	mov    %eax,%edi
    5f65:	e8 39 cb ff ff       	call   2aa3 <write_all_to_socket>
    shutdown(conn_fd, SHUT_WR);
    5f6a:	8b 85 7c fe ff ff    	mov    -0x184(%rbp),%eax
    5f70:	be 01 00 00 00       	mov    $0x1,%esi
    5f75:	89 c7                	mov    %eax,%edi
    5f77:	e8 94 c4 ff ff       	call   2410 <shutdown@plt>
    
    // Read the response from the Bao server.
    if (read(conn_fd, &prediction, sizeof(double)) != sizeof(double)) {
    5f7c:	48 8d 8d 90 fe ff ff 	lea    -0x170(%rbp),%rcx
    5f83:	8b 85 7c fe ff ff    	mov    -0x184(%rbp),%eax
    5f89:	ba 08 00 00 00       	mov    $0x8,%edx
    5f8e:	48 89 ce             	mov    %rcx,%rsi
    5f91:	89 c7                	mov    %eax,%edi
    5f93:	e8 08 c5 ff ff       	call   24a0 <read@plt>
    5f98:	48 83 f8 08          	cmp    $0x8,%rax
    5f9c:	74 55                	je     5ff3 <bao_ExplainOneQuery+0x46e>
      elog(WARNING, "Bao could not read the response from the server during EXPLAIN.");
    5f9e:	be 00 00 00 00       	mov    $0x0,%esi
    5fa3:	bf 13 00 00 00       	mov    $0x13,%edi
    5fa8:	e8 d3 c4 ff ff       	call   2480 <errstart@plt>
    5fad:	84 c0                	test   %al,%al
    5faf:	74 32                	je     5fe3 <bao_ExplainOneQuery+0x45e>
    5fb1:	48 8d 05 98 1a 00 00 	lea    0x1a98(%rip),%rax        # 7a50 <_fini+0x1754>
    5fb8:	48 89 c7             	mov    %rax,%rdi
    5fbb:	b8 00 00 00 00       	mov    $0x0,%eax
    5fc0:	e8 8b c4 ff ff       	call   2450 <errmsg_internal@plt>
    5fc5:	48 8d 05 04 1c 00 00 	lea    0x1c04(%rip),%rax        # 7bd0 <__func__.0>
    5fcc:	48 89 c2             	mov    %rax,%rdx
    5fcf:	be 6f 01 00 00       	mov    $0x16f,%esi
    5fd4:	48 8d 05 2a 19 00 00 	lea    0x192a(%rip),%rax        # 7905 <_fini+0x1609>
    5fdb:	48 89 c7             	mov    %rax,%rdi
    5fde:	e8 8d c5 ff ff       	call   2570 <errfinish@plt>
      prediction = NAN;
    5fe3:	f2 0f 10 05 0d 1c 00 	movsd  0x1c0d(%rip),%xmm0        # 7bf8 <__func__.0+0x28>
    5fea:	00 
    5feb:	f2 0f 11 85 90 fe ff 	movsd  %xmm0,-0x170(%rbp)
    5ff2:	ff 
    }

    connected = true;
    5ff3:	c6 85 7a fe ff ff 01 	movb   $0x1,-0x186(%rbp)
    shutdown(conn_fd, SHUT_RDWR);
    5ffa:	8b 85 7c fe ff ff    	mov    -0x184(%rbp),%eax
    6000:	be 02 00 00 00       	mov    $0x2,%esi
    6005:	89 c7                	mov    %eax,%edi
    6007:	e8 04 c4 ff ff       	call   2410 <shutdown@plt>
  }

  // Open a new explain group called "Bao" and add our prediction into it.
  ExplainOpenGroup("BaoProps", NULL, true, es);
    600c:	48 8b 85 50 fe ff ff 	mov    -0x1b0(%rbp),%rax
    6013:	48 89 c1             	mov    %rax,%rcx
    6016:	ba 01 00 00 00       	mov    $0x1,%edx
    601b:	be 00 00 00 00       	mov    $0x0,%esi
    6020:	48 8d 05 69 1a 00 00 	lea    0x1a69(%rip),%rax        # 7a90 <_fini+0x1794>
    6027:	48 89 c7             	mov    %rax,%rdi
    602a:	e8 01 c3 ff ff       	call   2330 <ExplainOpenGroup@plt>
  ExplainOpenGroup("Bao", "Bao", true, es);
    602f:	48 8b 85 50 fe ff ff 	mov    -0x1b0(%rbp),%rax
    6036:	48 89 c1             	mov    %rax,%rcx
    6039:	ba 01 00 00 00       	mov    $0x1,%edx
    603e:	48 8d 05 54 1a 00 00 	lea    0x1a54(%rip),%rax        # 7a99 <_fini+0x179d>
    6045:	48 89 c6             	mov    %rax,%rsi
    6048:	48 8d 05 4a 1a 00 00 	lea    0x1a4a(%rip),%rax        # 7a99 <_fini+0x179d>
    604f:	48 89 c7             	mov    %rax,%rdi
    6052:	e8 d9 c2 ff ff       	call   2330 <ExplainOpenGroup@plt>

  if (connected) {
    6057:	80 bd 7a fe ff ff 00 	cmpb   $0x0,-0x186(%rbp)
    605e:	74 67                	je     60c7 <bao_ExplainOneQuery+0x542>
    // The Bao server will (correctly) give a NaN if no model is available,
    // but PostgreSQL will dump that NaN into the raw JSON, causing parse bugs.
    if (isnan(prediction))
    6060:	f2 0f 10 85 90 fe ff 	movsd  -0x170(%rbp),%xmm0
    6067:	ff 
    6068:	66 0f 2e c0          	ucomisd %xmm0,%xmm0
    606c:	7b 25                	jnp    6093 <bao_ExplainOneQuery+0x50e>
      ExplainPropertyText("Bao prediction", "NaN", es);
    606e:	48 8b 85 50 fe ff ff 	mov    -0x1b0(%rbp),%rax
    6075:	48 89 c2             	mov    %rax,%rdx
    6078:	48 8d 05 1e 1a 00 00 	lea    0x1a1e(%rip),%rax        # 7a9d <_fini+0x17a1>
    607f:	48 89 c6             	mov    %rax,%rsi
    6082:	48 8d 05 18 1a 00 00 	lea    0x1a18(%rip),%rax        # 7aa1 <_fini+0x17a5>
    6089:	48 89 c7             	mov    %rax,%rdi
    608c:	e8 5f c5 ff ff       	call   25f0 <ExplainPropertyText@plt>
    6091:	eb 34                	jmp    60c7 <bao_ExplainOneQuery+0x542>
    else
      ExplainPropertyFloat("Bao prediction", "ms", prediction, 3, es);
    6093:	48 8b 85 90 fe ff ff 	mov    -0x170(%rbp),%rax
    609a:	48 8b 95 50 fe ff ff 	mov    -0x1b0(%rbp),%rdx
    60a1:	48 89 d1             	mov    %rdx,%rcx
    60a4:	ba 03 00 00 00       	mov    $0x3,%edx
    60a9:	66 48 0f 6e c0       	movq   %rax,%xmm0
    60ae:	48 8d 05 fb 19 00 00 	lea    0x19fb(%rip),%rax        # 7ab0 <_fini+0x17b4>
    60b5:	48 89 c6             	mov    %rax,%rsi
    60b8:	48 8d 05 e2 19 00 00 	lea    0x19e2(%rip),%rax        # 7aa1 <_fini+0x17a5>
    60bf:	48 89 c7             	mov    %rax,%rdi
    60c2:	e8 29 c4 ff ff       	call   24f0 <ExplainPropertyFloat@plt>
  }
  
  if (bao_include_json_in_explain) {
    60c7:	0f b6 05 0a 41 00 00 	movzbl 0x410a(%rip),%eax        # a1d8 <bao_include_json_in_explain>
    60ce:	84 c0                	test   %al,%al
    60d0:	74 40                	je     6112 <bao_ExplainOneQuery+0x58d>
    ExplainPropertyText("Bao plan JSON", plan_json, es);
    60d2:	48 8b 95 50 fe ff ff 	mov    -0x1b0(%rbp),%rdx
    60d9:	48 8b 85 a8 fe ff ff 	mov    -0x158(%rbp),%rax
    60e0:	48 89 c6             	mov    %rax,%rsi
    60e3:	48 8d 05 c9 19 00 00 	lea    0x19c9(%rip),%rax        # 7ab3 <_fini+0x17b7>
    60ea:	48 89 c7             	mov    %rax,%rdi
    60ed:	e8 fe c4 ff ff       	call   25f0 <ExplainPropertyText@plt>
    ExplainPropertyText("Bao buffer JSON", buffer_json, es);
    60f2:	48 8b 95 50 fe ff ff 	mov    -0x1b0(%rbp),%rdx
    60f9:	48 8b 85 a0 fe ff ff 	mov    -0x160(%rbp),%rax
    6100:	48 89 c6             	mov    %rax,%rsi
    6103:	48 8d 05 b7 19 00 00 	lea    0x19b7(%rip),%rax        # 7ac1 <_fini+0x17c5>
    610a:	48 89 c7             	mov    %rax,%rdi
    610d:	e8 de c4 ff ff       	call   25f0 <ExplainPropertyText@plt>
  }

  free(plan_json);
    6112:	48 8b 85 a8 fe ff ff 	mov    -0x158(%rbp),%rax
    6119:	48 89 c7             	mov    %rax,%rdi
    611c:	e8 1f c2 ff ff       	call   2340 <free@plt>
  free(buffer_json);
    6121:	48 8b 85 a0 fe ff ff 	mov    -0x160(%rbp),%rax
    6128:	48 89 c7             	mov    %rax,%rdi
    612b:	e8 10 c2 ff ff       	call   2340 <free@plt>

  // Next, plan the query so that we can suggest a hint. If enable_bao_selection
  // was on, this repeats some work, as the query will be planned twice. That's OK
  // since EXPLAIN should still be fast.
  old_selection_val = enable_bao_selection;
    6130:	0f b6 05 93 40 00 00 	movzbl 0x4093(%rip),%eax        # a1ca <enable_bao_selection>
    6137:	88 85 7b fe ff ff    	mov    %al,-0x185(%rbp)
  enable_bao_selection = true;
    613d:	c6 05 86 40 00 00 01 	movb   $0x1,0x4086(%rip)        # a1ca <enable_bao_selection>
  bao_plan = plan_query(query, queryString, cursorOptions, params);
    6144:	48 8b 8d 40 fe ff ff 	mov    -0x1c0(%rbp),%rcx
    614b:	8b 95 64 fe ff ff    	mov    -0x19c(%rbp),%edx
    6151:	48 8b b5 48 fe ff ff 	mov    -0x1b8(%rbp),%rsi
    6158:	48 8b 85 68 fe ff ff 	mov    -0x198(%rbp),%rax
    615f:	48 89 c7             	mov    %rax,%rdi
    6162:	e8 f4 eb ff ff       	call   4d5b <plan_query>
    6167:	48 89 85 b0 fe ff ff 	mov    %rax,-0x150(%rbp)
  enable_bao_selection = old_selection_val;
    616e:	0f b6 85 7b fe ff ff 	movzbl -0x185(%rbp),%eax
    6175:	88 05 4f 40 00 00    	mov    %al,0x404f(%rip)        # a1ca <enable_bao_selection>
  
  if (!bao_plan) {
    617b:	48 83 bd b0 fe ff ff 	cmpq   $0x0,-0x150(%rbp)
    6182:	00 
    6183:	75 4b                	jne    61d0 <bao_ExplainOneQuery+0x64b>
    elog(WARNING, "Could not plan query with Bao during explain, omitting hint.");
    6185:	be 00 00 00 00       	mov    $0x0,%esi
    618a:	bf 13 00 00 00       	mov    $0x13,%edi
    618f:	e8 ec c2 ff ff       	call   2480 <errstart@plt>
    6194:	84 c0                	test   %al,%al
    6196:	0f 84 9d 00 00 00    	je     6239 <bao_ExplainOneQuery+0x6b4>
    619c:	48 8d 05 35 19 00 00 	lea    0x1935(%rip),%rax        # 7ad8 <_fini+0x17dc>
    61a3:	48 89 c7             	mov    %rax,%rdi
    61a6:	b8 00 00 00 00       	mov    $0x0,%eax
    61ab:	e8 a0 c2 ff ff       	call   2450 <errmsg_internal@plt>
    61b0:	48 8d 05 19 1a 00 00 	lea    0x1a19(%rip),%rax        # 7bd0 <__func__.0>
    61b7:	48 89 c2             	mov    %rax,%rdx
    61ba:	be 95 01 00 00       	mov    $0x195,%esi
    61bf:	48 8d 05 3f 17 00 00 	lea    0x173f(%rip),%rax        # 7905 <_fini+0x1609>
    61c6:	48 89 c7             	mov    %rax,%rdi
    61c9:	e8 a2 c3 ff ff       	call   2570 <errfinish@plt>
    61ce:	eb 69                	jmp    6239 <bao_ExplainOneQuery+0x6b4>
  } else {
    hint_text = arm_to_hint(bao_plan->selection);
    61d0:	48 8b 85 b0 fe ff ff 	mov    -0x150(%rbp),%rax
    61d7:	8b 40 10             	mov    0x10(%rax),%eax
    61da:	89 c7                	mov    %eax,%edi
    61dc:	e8 d0 ef ff ff       	call   51b1 <arm_to_hint>
    61e1:	48 89 85 b8 fe ff ff 	mov    %rax,-0x148(%rbp)
    ExplainPropertyText("Bao recommended hint",
    61e8:	48 83 bd b8 fe ff ff 	cmpq   $0x0,-0x148(%rbp)
    61ef:	00 
    61f0:	74 09                	je     61fb <bao_ExplainOneQuery+0x676>
    61f2:	48 8b 85 b8 fe ff ff 	mov    -0x148(%rbp),%rax
    61f9:	eb 07                	jmp    6202 <bao_ExplainOneQuery+0x67d>
    61fb:	48 8d 05 13 19 00 00 	lea    0x1913(%rip),%rax        # 7b15 <_fini+0x1819>
    6202:	48 8b 95 50 fe ff ff 	mov    -0x1b0(%rbp),%rdx
    6209:	48 89 c6             	mov    %rax,%rsi
    620c:	48 8d 05 0c 19 00 00 	lea    0x190c(%rip),%rax        # 7b1f <_fini+0x1823>
    6213:	48 89 c7             	mov    %rax,%rdi
    6216:	e8 d5 c3 ff ff       	call   25f0 <ExplainPropertyText@plt>
                        (hint_text ? hint_text : "(no hint)"),
                        es);
    free(hint_text);
    621b:	48 8b 85 b8 fe ff ff 	mov    -0x148(%rbp),%rax
    6222:	48 89 c7             	mov    %rax,%rdi
    6225:	e8 16 c1 ff ff       	call   2340 <free@plt>
    free_bao_plan(bao_plan);
    622a:	48 8b 85 b0 fe ff ff 	mov    -0x150(%rbp),%rax
    6231:	48 89 c7             	mov    %rax,%rdi
    6234:	e8 69 c6 ff ff       	call   28a2 <free_bao_plan>
  }
    
  ExplainCloseGroup("Bao", "Bao", true, es);
    6239:	48 8b 85 50 fe ff ff 	mov    -0x1b0(%rbp),%rax
    6240:	48 89 c1             	mov    %rax,%rcx
    6243:	ba 01 00 00 00       	mov    $0x1,%edx
    6248:	48 8d 05 4a 18 00 00 	lea    0x184a(%rip),%rax        # 7a99 <_fini+0x179d>
    624f:	48 89 c6             	mov    %rax,%rsi
    6252:	48 8d 05 40 18 00 00 	lea    0x1840(%rip),%rax        # 7a99 <_fini+0x179d>
    6259:	48 89 c7             	mov    %rax,%rdi
    625c:	e8 2f c2 ff ff       	call   2490 <ExplainCloseGroup@plt>
  ExplainCloseGroup("BaoProps", NULL, true, es);
    6261:	48 8b 85 50 fe ff ff 	mov    -0x1b0(%rbp),%rax
    6268:	48 89 c1             	mov    %rax,%rcx
    626b:	ba 01 00 00 00       	mov    $0x1,%edx
    6270:	be 00 00 00 00       	mov    $0x0,%esi
    6275:	48 8d 05 14 18 00 00 	lea    0x1814(%rip),%rax        # 7a90 <_fini+0x1794>
    627c:	48 89 c7             	mov    %rax,%rdi
    627f:	e8 0c c2 ff ff       	call   2490 <ExplainCloseGroup@plt>
  
  // Do the deault explain thing.
  ExplainOnePlan(plan, into, es, queryString,
                 params, queryEnv, &plan_duration, (es->buffers ? &bufusage : NULL));
    6284:	48 8b 85 50 fe ff ff 	mov    -0x1b0(%rbp),%rax
    628b:	0f b6 40 0b          	movzbl 0xb(%rax),%eax
  ExplainOnePlan(plan, into, es, queryString,
    628f:	84 c0                	test   %al,%al
    6291:	74 09                	je     629c <bao_ExplainOneQuery+0x717>
    6293:	48 8d bd 50 ff ff ff 	lea    -0xb0(%rbp),%rdi
    629a:	eb 05                	jmp    62a1 <bao_ExplainOneQuery+0x71c>
    629c:	bf 00 00 00 00       	mov    $0x0,%edi
    62a1:	4c 8b 8d 38 fe ff ff 	mov    -0x1c8(%rbp),%r9
    62a8:	4c 8b 85 40 fe ff ff 	mov    -0x1c0(%rbp),%r8
    62af:	48 8b 8d 48 fe ff ff 	mov    -0x1b8(%rbp),%rcx
    62b6:	48 8b 95 50 fe ff ff 	mov    -0x1b0(%rbp),%rdx
    62bd:	48 8b b5 58 fe ff ff 	mov    -0x1a8(%rbp),%rsi
    62c4:	48 8b 85 98 fe ff ff 	mov    -0x168(%rbp),%rax
    62cb:	57                   	push   %rdi
    62cc:	48 8d bd 88 fe ff ff 	lea    -0x178(%rbp),%rdi
    62d3:	57                   	push   %rdi
    62d4:	48 89 c7             	mov    %rax,%rdi
    62d7:	e8 04 c1 ff ff       	call   23e0 <ExplainOnePlan@plt>
    62dc:	48 83 c4 10          	add    $0x10,%rsp
}
    62e0:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    62e4:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
    62eb:	00 00 
    62ed:	74 05                	je     62f4 <bao_ExplainOneQuery+0x76f>
    62ef:	e8 3c c1 ff ff       	call   2430 <__stack_chk_fail@plt>
    62f4:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
    62f8:	c9                   	leave  
    62f9:	c3                   	ret    

Disassembly of section .fini:

00000000000062fc <_fini>:
    62fc:	f3 0f 1e fa          	endbr64 
    6300:	48 83 ec 08          	sub    $0x8,%rsp
    6304:	48 83 c4 08          	add    $0x8,%rsp
    6308:	c3                   	ret    
